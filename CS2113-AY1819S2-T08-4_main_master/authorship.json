[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanseet"
        },
        "content": "\u003d FOP Manager"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "https://travis-ci.org/CS2113-AY1819S2-T08-4/main[image:https://travis-ci.org/CS2113-AY1819S2-T08-4/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* This is a desktop Address Book application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* It is a Java application targeted at *Project Directors* organizing the *School of Computing Freshman Orientation Camp*."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "* This application is a useful tool to manage the contacts of participating Freshmen, OGLs and others. Its features include:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanseet"
        },
        "content": "** An easy to use GUI with a list panel displaying participant details"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "** Listing of participants by their 3 categories (Freshmen, OGLs and others)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanseet"
        },
        "content": "** Grouping of participants into groups, stored within houses"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanseet"
        },
        "content": "** Viewing graphs of the statistics of the camp participants"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "** Random group allocation of participants"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "** Exporting participant information (by whole list, by Freshmen list or by OGL list) from the application to a readable format (Excel)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "** Importing participant information from Excel file to FOP Manager"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "* FOP Manager is built upon the awesome https://github.com/se-edu/[AddressBook-Level4] codebase by the SE-EDU initiative."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* Some parts of this application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by _Marco Jakob_."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "ssunil3232": 4,
      "shanseet": 6,
      "-": 25,
      "weizhang05": 3
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    implementation group: \u0027org.apache.poi\u0027, name: \u0027poi\u0027, version: \u00274.0.1\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    archiveName \u003d \u0027[T08-4][FOPManager].jar\u0027"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-name\u0027: \u0027FOP Manager\u0027,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/cs2113-ay1819s2-t08-4/main\u0027,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "ssunil3232": 1,
      "-": 236,
      "weizhang05": 1
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanseet"
        },
        "content": "FOP Manager was developed by the https://cs2113-ay1819s2-t08-4.github.io/main/AboutUs.html[T08-4] team, based on the Address Book Level 4 codebase."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "\u003d\u003d\u003d Chan Wei Zhang"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "image::weizhang05.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "{empty}[http://github.com/weizhang05[github]] [\u003c\u003cweizhang05#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "Role: Team Lead + Developer +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "Responsibilities: Integration"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "\u003d\u003d\u003d Phan Duy Nhat Tan"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "image::tantantan277.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "{empty}[http://github.com/tantantan277[github]] [\u003c\u003ctantantan277#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "Responsibilities: UI"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "\u003d\u003d\u003d Shanon Seet Shwen Ling"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "image::shanseet.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "{empty}[http://github.com/shanseet[github]] [\u003c\u003cshanseet#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Responsibilities: Logic + Documentation +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "\u003d\u003d\u003d Sonia Sunil"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "image::ssunil3232.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "{empty}[http://github.com/ssunil3232[github]] [\u003c\u003cssunil3232#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "Responsibilities: Add, List, Export, Import features and Documentations"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "ssunil3232": 1,
      "shanseet": 3,
      "-": 28,
      "weizhang05": 15
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "* *Bug reports, Suggestions*: Post in our https://github.com/cs2113-ay1819s2-t08-4/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing*: We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* *Email us*: You can also reach any of the team members at soniasunil@u.nus.edu, shanon.seet@u.nus.edu, wzchan@u.nus.edu or tan.phan@u.nus.edu."
      }
    ],
    "authorContributionMap": {
      "ssunil3232": 1,
      "shanseet": 1,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanseet"
        },
        "content": "\u003d FOP Manager - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level4/tree/master"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanseet"
        },
        "content": "By: `Team T08`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanseet"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Welcome to the *FOP Manager* Developer Guide!"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanseet"
        },
        "content": "*FOP Manager* was created for the purpose of easing the management of camp participants\u0027 contact information, where participants include Orientation Group Leaders (OGLs), Freshmen and other participants such as admin in the camp. As a text-based (Command Line Interface) address book application, *FOP Manager* is optimized for users who type fast and/or are learning to work efficiently with CLI tools. Despite being a text-based application, *FOP Manager* has a developed Graphical User Interface (GUI) that allows users to view contact details in an appealing, well-organized format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanseet"
        },
        "content": "\u003d\u003d About the Developer Guide"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanseet"
        },
        "content": "This developer guide provides detailed documentation on the implementation of all the various features *FOP Manager* offers. It also suggests methods for you to modify and build upon it, should you see fit."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanseet"
        },
        "content": "See the table of contents above to navigate between different sections easily."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Throughout this developer guide, there will be various icons used, as shown below:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanseet"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanseet"
        },
        "content": "This is a tip. Follow these tips to aid your development of *FOP Manager*."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanseet"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanseet"
        },
        "content": "This is a note. Read these for additional information."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanseet"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanseet"
        },
        "content": "This is a warning. Heed these warnings to avoid making mistakes that will hamper your development efforts."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanseet"
        },
        "content": "This section shows how to set up *FOP Manager* on your desktop and begin your development journey."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ". Open link:{repoURL}/src/main/java/seedu/major/ui/MainWindow.java[`MainWindow.java`] and check for any code errors"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".. Due to an ongoing https://youtrack.jetbrains.com/issue/IDEA-189060[issue] with some of the newer versions of IntelliJ, code errors may be detected even if the project can be built and run successfully"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ".. To resolve this, place your cursor over any of the code section highlighted in red. Press kbd:[ALT + ENTER], and select `Add \u0027--add-modules\u003d...\u0027 to module compiler options` for each error"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ". Repeat this for the test folder as well (e.g. check link:{repoURL}/src/test/java/seedu/major/ui/HelpWindowTest.java[`HelpWindowTest.java`] for code errors, and if so, resolve it the same way)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level4` repo."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level4`), you should do the following:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/major/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/major/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `TextResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `ChartPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/major/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "link:{repoURL}/src/main/java/seedu/major/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a participant)."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/major/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cParticipant\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "shanseet"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Participant` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Participant` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "image:ModelClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/major/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "shanseet"
        },
        "content": "//tag::commandStructure[]"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "shanseet"
        },
        "content": "\u003d\u003d\u003d Command Structure"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "shanseet"
        },
        "content": "To support multiple commands while ensuring separation of concerns, commands entered into the command box are handled by multiple classes that allow the code to be easily extended to support more commands."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "shanseet"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "shanseet"
        },
        "content": "When each command is entered into the command box, the command word gets sent to the `AddressBookParser` to be identified. If the command word is valid, arguments are sent to the corresponding command parser, that parses the arguments and creates a corresponding command object to then implement the commands."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "shanseet"
        },
        "content": "In the current implementation of *FOP Manager*, some commands are create from a parser while some are created directly when then command word is identified."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "shanseet"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "shanseet"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Handling unnecessary parameters"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "shanseet"
        },
        "content": "[options\u003d\"header\"]"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|Alternatives |Pros | Cons"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|Ignore all unnecessary parameters and pass as arguments to the command object the number of parameters required for the command. |Less computationally expensive, and allows the user to make mistakes |User\u0027s intentions may be misinterpreted and wrong commands may be executed"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|Only accept the number of parameters the command requires, nothing more and nothing less. |Command carried out will always be the user\u0027s exact intention |More computationally expensive, and leaves no room for user mistakes or typos"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "shanseet"
        },
        "content": "We chose to implement a combination of both alternatives: commands that do not require parameters and do not modify data (such as list and view) ignore unnecessary parameters. At the same time, commands that require specific instructions to identify particular participants, groups or houses only accept the required number of parameters."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "shanseet"
        },
        "content": "//end::commandStructure[]"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "shanseet"
        },
        "content": "//tag:: PartManagement[]"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "shanseet"
        },
        "content": "\u003d\u003d\u003d Participant Management"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Participant management refers to how users manipulate and view the data of camp participants. Participants are categorised into 3 types: OGL, Freshman or other."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "shanseet"
        },
        "content": "This section describes how the 3 types of participants are managed."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "shanseet"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "In *FOP Manager*, participants can be added, edited, deleted and listed."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Add"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* `add_o`: Adds an OGL type participant"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* `add_f`: Adds a Freshman type participant"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* `add`: Adds a participant who is neither OGL nor Freshman"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Edit"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* `edit INDEX`: Edits the participant at the current `INDEX` of the list showing"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Delete"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* `delete INDEX`: Deletes the participant at the current `INDEX` of the list showing"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Participant contact details can be viewed in different manners:"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* `list`: Lists all participants in the camp"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* `list_o`: Lists all OGLs"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* `list_f`: Lists all Freshmen"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "shanseet"
        },
        "content": "All participants are stored in the same participant list as a `UniqueParticipantList` in an AddressBook object. Participants created as OGLs or Freshmen differ only in the tags added to them. The different listing of the participants is very useful for Project Directors as it helps them to view the Freshmen and the OGL participants separately, to specifically see who are in the respective lists and how many participants are there in each of the lists."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "The following is an Activity Diagram to summarize what happens when either the `list_f` or `list_o` commands are entered."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "shanseet"
        },
        "content": ".Activity Diagram for listing Freshmen command"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "image::ListFreshmenCommandActivityDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "shanseet"
        },
        "content": "The list commands, `list_o` and `list_f`, use the keywords/predicates \"OGL\" and \"Freshman\", respectively, to search through the tags of all participants in the participant list. All participants with matching tags of \"Freshman\" or \"OGL\" will be added into the filtered participant list, enabling the user to view all freshmen or OGLs in the participant list."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "The following Sequence diagram below will explain how the `list_f` command works in detail."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "shanseet"
        },
        "content": ".Sequence Diagram for listing Freshmen command"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "image::ListParticipantCommandSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "An example usage of the `list_f` command is as follows:"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "*Step 1:* The user launches the application. The `VersionedAddressBook` will be initialized with the initial address book state."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "*Step 2:* The user enters the `list_f` command . The `list_f` command calls the `FindingParticipantPredicate` class and searches all tags of each participant for \"Freshman\"."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "shanseet"
        },
        "content": "*Step 3:* The `updateFilteredParticipantList()` takes in this predicate and the `getFilteredParticipantList()` is called to give the list of Freshmen in the participant list"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "The implementation is similar for the `list_o` command with the use of `FindingOglPredicate` instead where the searched tag is \"OGL\"."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "shanseet"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "shanseet"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Separate management of freshmen and OGLs"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "shanseet"
        },
        "content": "[options\u003d\"header\"]"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|Alternatives |Pros | Cons"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|Create 2 separate lists containing freshmen and OGLs separately, in addition to a full list containing all participants. |Less computationally expensive to obtain separate lists of freshmen and OGLs |Involves greater code complexity to update any contact details, with greater room for error, and requires more memory and storage"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|Store all participants in the same list (current choice). |Smaller code base needed, and allows for participants who are neither OGLs nor Freshmen (such as camp directors or camp commandants) to be added |More computationally expensive to access lists of freshmen and lists of OGLs"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "We decided to go ahead with *Alternative 2* as it was easier to implement. It would not require creation of switch cases for the UI to display the respective lists and would not require unnecessarily long codes to filter out freshmen and OGLs from the participant list. The pros of doing *Alternative 2* outweighs the pros of doing *Alternative 1* hence the decision to implement the latter."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "shanseet"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Editing or deleting participants"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "shanseet"
        },
        "content": "[options\u003d\"header\"]"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|Alternatives |Pros | Cons"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|Editing and deleting by name. |More intuitive for the user to edit and delete a participant by name |Greater complexity required to handle multiple participants who have the same partial name, or user must specify participant\u0027s full name"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|Editing and deleting by index (current choice). |Specifies the exact participant to be edited or deleted |Must be used with other commands such as `find` to obtain the index of the desired participant"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "We decided to go with *Alternative 2* as it meant there was no need to check for the full name of the participant and so fewer complications as in indexing, each participant has a unique index."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "shanseet"
        },
        "content": "//end::PartManagement[]"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "shanseet"
        },
        "content": "//tag::GroupHouseManagement[]"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "shanseet"
        },
        "content": "\u003d\u003d\u003d Group and House Management"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "shanseet"
        },
        "content": "*FOP Manager* supports group and house commands, to reflect the structure of an actual Freshmen Orientation camp. Group and house management refer to how groups and houses are created and modified, as well as viewed, and how they support the addition of participants."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "shanseet"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "shanseet"
        },
        "content": "In *FOP Manager*, groups can be added, edit and deleted."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Add"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* `add_h HOUSENAME`: Adds a new house with `HOUSENAME`"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "shanseet"
        },
        "content": "** Creates a new house by adding it to `UniqueHouseList` in the `VersionedAddressBook`."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* `add_g GROUPNAME HOUSENAME`: Adds a new group named `GROUPNAME` into the house"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "shanseet"
        },
        "content": "** Adds a new group to a house by adding it to `UniqueGroupList` in the `VersionedAddressBook`."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "shanseet"
        },
        "content": "The following sequence diagram shows how the `Logic` and `Model` components interact when the user enters the command `add_g r1 red`."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "shanseet"
        },
        "content": ".Interactions within Logic and Model for the command `add_g r1 red`"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "shanseet"
        },
        "content": "image::AddGroupSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* The new group (R1, Red) is added to `UniqueGroupList` stored within `VersionedAddressBook` when the `addGroup(a)` function is called from `Model`"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Edit"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* `edit_h OLDHOUSENAME NEWHOUSENAME`: Edits the name of an existing house"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "shanseet"
        },
        "content": "** Edits the name of a house in `UniqueHouseList`, as well as changes the house name of all groups within the house in `UniqueGroupList`."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* `edit_g OLDGROUPNAME NEWGROUPNAME`: Edits the name of an existing group"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "shanseet"
        },
        "content": "** `edit_g` edits the name of a group in `UniqueGroupList`, as well as changes the group name of all participants with that group name in `UniqueParticipantList`."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "shanseet"
        },
        "content": "The following sequence diagram shows how the `Logic` and `Model` components interact when the user enters the command `edit_g r1 r2`."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "shanseet"
        },
        "content": ".Interactions within Logic and Model for the command `edit_g r1 r2`"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "shanseet"
        },
        "content": "image::EditGroupSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* The edit group command updates the group of all participants within the old group by looping through `UniqueParticipantList` from `VersionedAddressBook` to check if their group matches the old group name."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* This command also changes the name of the group within `UniqueGroupList` stored within `VersionedAddressBook`."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Delete"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* `delete_h HOUSENAME`: Deletes the group named `HOUSENAME`"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "shanseet"
        },
        "content": "** Deleting of house objects require there to be no groups within that house."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* `delete_g GROUPNAME`: Deletes the group named `GROUPNAME`"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "shanseet"
        },
        "content": "** Deleting of group objects require there to be no participants within that group."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Groups and houses can also be viewed in different manners:"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* Viewing houses and groups"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "shanseet"
        },
        "content": "** `view_h` and `view_g` simply displays the houses and groups stored in `UniqueHouseList` and `UniqueGroupList` respectively."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* Listing participants in a particular group or house"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "shanseet"
        },
        "content": "** `list_g` and `list_h` use similar logic to `list_o` and `list_f`, implemented by using an entered group name as a predicate that searches through all the `Group` fields of participants, and updates the `filteredParticipant` list with participants with the matching group name or house name respectively."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "shanseet"
        },
        "content": "NOTE: `list_g empty` lists all participants without a group by searching for participants with an empty group name."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "shanseet"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "shanseet"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Storage of group and house lists"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "shanseet"
        },
        "content": "[options\u003d\"header\"]"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|Alternatives |Pros | Cons"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|Storing groups and houses within a single list of houses that contain differing number of groups. | Easy management of data |Requires looping through all houses to find a single group and to ensure group names are unique"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|Storing groups and houses in 2 separate lists (current choice). |House objects are not affected by the operations done to the groups stored within it |More computationally expensive to identify the groups within a single house"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "shanseet"
        },
        "content": "We decided to follow the second alternative as it allows us to identify a specific group faster, a function that will be more commonly used in *FOP Manager*, since it is called when adding and editing a person and/or a group name."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "shanseet"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Deleting a group object requirements"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "shanseet"
        },
        "content": "[options\u003d\"header\"]"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|Alternatives |Pros | Cons"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|No requirements when groups are deleted. |User can delete a group much more easily |Participants in the deleted group will belong to no group"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|Requires a group to contain no participants before it can be deleted (current choice). |User can be sure to not delete a group with participants in it accidentally |Participants must be manually removed from the group before being deleted"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Camp organizers rarely intend to remove a filled group. Requiring a group to be empty before being deleted acts as a fail-safe to ensure that filled groups are not accidentally removed, resulting in participants having to be manually added back to the group."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "shanseet"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Duplicate group names under different houses"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "shanseet"
        },
        "content": "[options\u003d\"header\"]"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|Alternatives |Pros | Cons"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|Duplicate group names are not allowed (current choice). |Groups can be searched for by name without specifying its house |Simple names such as 1 and 2 cannot be used for different houses at initial planning stage"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|Duplicate group names under different houses are allowed. |User can easily name groups without too much thought |User must always specify house name when searching for a specific group"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "shanseet"
        },
        "content": "We chose to not allow duplicate groups, as it makes the app more user-friendly. Moreover, this will model real life situations as camp groups normally have unique group names."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "shanseet"
        },
        "content": "//end::GroupHouseManagement[]"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th participant in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new participant. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "Step 4. The user now decides that adding the participant was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "shanseet"
        },
        "content": ".Interactions within Logic and Model when `undo` is entered"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "shanseet"
        },
        "content": ".Activity flow when new command is executed"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "shanseet"
        },
        "content": "[options\u003d\"header\"]"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|Alternatives |Pros | Cons"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|Saves the entire address book (current choice). |Easy to implement. |May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|Individual command knows how to undo/redo by itself. |Will use less memory (e.g. for `delete`, just save the participant being deleted). |We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "shanseet"
        },
        "content": "[options\u003d\"header\"]"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|Alternatives |Pros | Cons"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|Use a list to store the history of address book states (current choice). |Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project. |Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|Use `HistoryManager` for undo/redo |We do not need to maintain a separate list, and just reuse what is already in the codebase. |Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "//tag::randomize[]"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "\u003d\u003d\u003d Randomized Group Allocation"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "*FOP Manager* has a `randomize` command, which allows the Project Director to automatically assign all participants to a group. +"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "Following is the activity diagram when the command is executed:"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "image::RandomizeActivityDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "The `randomize` is achieved by coding a sequence of steps to achieve the allocation of groups to participants:"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "* Creating list holding specific type of participants (i.e. all OGLs will be stored in a list while freshmen will be stored in another)"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "* Shuffles all of the previously created list"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "* Assigns all of the participants to a group in order of freshmen, OGLs"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "Following is the sequence diagram of the flow of the program when the command is executed:"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "image::RandomizeSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "The above Sequence Diagram only shows the updating of group details for freshmen (for clarity purposes, refer to the https://github.com/CS2113-AY1819S2-T08-4/main/blob/master/src/main/java/seedu/address/logic/commands/RandomizeCommand.java[codes] for more details). +"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " +"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " The algorithm is applied also to OGLs within the RandomizeCommand class."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Algorithm"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "This segment will show relevant diagrams explaining the algorithm for the shuffling of assignment"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " and cases where the randomization will not happen. The following diagram shows the annotations and symbols"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "  that will be used:"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "image::RandomizeAlgo1.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "The following diagram shows an example where the Project Director has added sufficient OGLs and freshmen to the system,"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " and created sufficient groups:"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "image::RandomizeAlgo2.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "Upon executing the `randomize` command, the system will first assign the freshmen to the groups first:"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "image::RandomizeAlgo3_1.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "Followed by assigning the OGLs to the group:"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "image::RandomizeAlgo3_2.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "The rationale for such assignment is to ensure that the every group has an OGL."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "Following diagrams shows the cases where the randomization will not happen and will throws an error message backs to the user. +"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "Insufficient participants:"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "image::RandomizeAlgo4.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "Insufficient OGLs to cover all the groups:"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "image::RandomizeAlgo5.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "Insufficient groups:"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "image::RandomizeAlgo6.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "Engineers are free to modify the algorithm for the random distribution but are advised to consider the corner"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " cases similarly to the ones mentioned above."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Updating group attribute of participants"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "shanseet"
        },
        "content": "[options\u003d\"header\"]"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|Alternatives |Pros | Cons"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "|Programmatically simulate the calling of the `edit` command |Changing of interface with the Model component only requires changing the EditCommand and Parser |Tightly coupled with EditCommand and EditCommandParser"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "|Calls the function that edit the details of the participants by interacting with the Model component (current choice) |Implementation is obvious, follow guidelines of the system architecture and cleaner code base |Coupled with ModelManager"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "Rationale: It is to follow the design architecture of the system, allowing it to be consistent with"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " the rest of the codes and cleaner code base. It may seems intuitive for some engineers"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " to programmatically simulate the `edit` command,"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " but it might causes unknown complexity within the system if there is a change in the dependent classes. +"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "  +"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Shuffling of participants"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "shanseet"
        },
        "content": "[options\u003d\"header\"]"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|Alternatives |Pros | Cons"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "|Creating a list fo freshmen and OGLs, then shuffles the list separately (current choice) |Ensures all groups will have at least an OGL and balanced distribution amongst the group |Requires more memory space"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "|Shuffling the list of participant |Saves memory space |Risk having uneven distribution (e.g. all OGLs in a group)"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "Rationale: The idea of separating freshmen and OGLs is to ensure that every group will have at least 1 type of participant."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " By shuffling the list of participant containing both freshmen and OGLs, we risk running into a situation where there"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "  are groups with no OGLs, which is something that a Project Director does not want. The current choice ensures that"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "   all of the OGLs will be distributed evenly into groups similarly to how the freshmen are distributed."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "Before the randomization happens, the application ensures that there are sufficient OGLs to cover all of the created"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " groups (i.e. at least 1 OGL per group). Refer to the https://github.com/CS2113-AY1819S2-T08-4/main/blob/master/src/main/java/seedu/address/logic/commands/RandomizeCommand.java[codes] for more details."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "//end::randomize[]"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "// tag::statistic[]"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "\u003d\u003d\u003d Statistic feature"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "The \u0027stat\u0027 command allows FOP Manager users to view the statistic of camp participants regarding their age, major and sex in a graphical manner."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "The Statistic feature is facilitated by `AddressBook`. It has three HashMaps, containing the number of each categories in the participants\u0027 age, major and sex. These Map are generated after every call of the"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "`stat` command. After command call, these data is loaded into three different pie charts and shown on the UI."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "The following sequence diagram show hows the \u0027stat\u0027 command works in details :"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "shanseet"
        },
        "content": ".Interaction between UI, Logic and Model when `stat` is executed"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "image::StatisticUpdateSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "shanseet"
        },
        "content": "\u003d\u003d\u003d\u003d Design Consideration"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to update the data of the AddressBook"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "shanseet"
        },
        "content": "[options\u003d\"header\"]"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|Alternatives |Pros | Cons"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|Use a loop to loop through the `UniqueParticipantList` to get the data of everyone (current choice). |Easy to implement, guaranteed to get the correct data every time |Takes longer time and more computational power to get the result."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|Update charts data after each commands that modify it. |Quick runtime, does not require much changes to the codebase |We must ensure that the data is updated after each command."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Since this function is unlikely to be used many times and the number of participants in a camp is not too large, the drawbacks to the first alternative are acceptable."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "// end::statistic[]"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "// tag::export[]"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "\u003d\u003d\u003d Export Feature"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "The Export feature will allow the FOP Manager user to export the data into an excel file and distribute to other relevant people involved in the FOP. This way, data can be distributed and raw data untouched except by the Project Director or other camp organisers who are given the access to the raw data."
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "Participant contact details can be exported in different manners:"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "* `export`: Exports all participants\u0027 contacts into an Excel Spreadsheet"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "* `export_f`: Exports all freshmen contacts into an Excel Spreadsheet"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "* `export_o`: Exports all OGL contacts into an Excel Spreadsheet"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "The following is an Activity Diagram to summarize what happens when the `export` command is entered."
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "shanseet"
        },
        "content": ".Activity Diagram for exporting command"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "image::ExportCommandActivityDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "* A third-party library \u0027Apache.poi\u0027 was integrated into the project to enable easy creation of excel files through Object-Oriented Programming (OOP). In this case, the library will enable the creation of HSSF Workbook."
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "* The `export` command will call a function from a class `WriteToExcel` to start the creation of the HSSF Workbook and the addition of all the participants found on the participant list to the Workbook, with the respective objects to the participant class added to the correct column. The system will get the current directory path and add the path name to the proposed file name that end with \".xls\". The file will thus be successfully saved in the current user directory."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "The following Sequence diagram below will explain how the `export` command works in detail."
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "shanseet"
        },
        "content": ".Sequence Diagram for exporting command"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "image::ExportCommandSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "An example usage of the command is as follows:"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "*Step 1:* The user launches the application. The `VersionedAddressBook` will be initialized with the initial address book state."
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "*Step 2:* The user enters the `export` command . The `export` command updates the filtered list with the predicate to show all participants in the address book."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "*Step 3:* The filtered list is obtained in the command. The export command calls the `WriteToExcel` class\u0027s `WriteExcelSheet()`. This will set the directory, create the Excel Workbook and Sheet, the file name, the cells and rows with the titles for the FOP Manager."
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "*Step 4:* `WriteExcelSheet()` calls `WriteDataIntoExcelSheet()` which writes the values from the filtered participant list into the Excel Sheet."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "*Step 5:* Returning to `WriteExcelSheet()`, the file is output to user\u0027s current directory as an .xls file."
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "\u003d\u003d\u003d\u003d Design Consideration"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "Only one way was considered for the implementation of Export feature, which involved importing the third-party library."
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "// end:: export[]"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "// tag::import[]"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "\u003d\u003d\u003d Import Feature"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "Sometimes FOP Project Directors realise they need to add many participants\u0027 contacts that they gathered and usually they gather the contacts through sign up links that allow for exportation into Excel spreadsheets. Manually added the large influx of participants is troublesome. Hence, with the Import feature, FOP Project Directors can import the data of Non-duplicate people from an excel file into the FOP Manager. This makes adding of contacts easier."
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "The following is an Activity Diagram to summarize what happens when the `import` command is entered."
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "shanseet"
        },
        "content": ".Activity Diagram for the importing command"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "image::ImportCommandActivityDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "* A third-party library \u0027Apache.poi\u0027 was integrated into the project to enable easy creation of excel files through Object-Oriented Programming (OOP). In this case, the library will enable the creation of HSSF Workbook."
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "* The `import` command will call a function from a class `WriteToExcel` to start the reading from a HSSF Workbook found in the current directory path, with the file name \"FOP_MANAGER_LIST.xls\"."
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "* The cell value from the respective heading/columns are read into their respective string and `person` is created with these strings."
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "* The `person` is added to a `List\u003cPerson\u003e` and each `person` is added into the `Address Book`."
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "The following Sequence diagram below will explain how the `import` command works in detail."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "shanseet"
        },
        "content": ".Sequence Diagram for importing command"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "image::ImportCommandSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "An example usage of the command is as follows:"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "*Step 1:* The user launches the application. The `VersionedAddressBook` will be initialized with the initial address book state."
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "*Step 2:* The user enters the `import` command . The `import` command calls the `WriteToExcel` class\u0027s `ReadFromExcel()`. This will open the file of the default set name from the set directory."
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "*Step 3:* The Excel sheets is checked for the correct headings and then the cell\u0027s values are read to create each `person`. Each `person` is added to a `List\u003cPerson\u003e` which will be returned to the Import command."
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "*Step 4:* The `import` command adds each non-duplicate person into the FOP Manager."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "** One interesting usage of both `import` and `export` feature will be to retain and retrieve contacts. For instance, after exporting the data, we can clear. We can then import the contacts if needed."
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "** Another interesting usage is for manual edit of the details of multiple contacts. We can clear the Address Book and then `import` command to import the data."
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "\u003d\u003d\u003d\u003d Design Consideration"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "Only one way was considered for the implementation of Import feature, which involved importing the third-party library."
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "// end:: import[]"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "shanseet"
        },
        "content": "// tag::autocompletion[]"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "shanseet"
        },
        "content": "\u003d\u003d\u003d [Proposed] Auto-Completion"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "shanseet"
        },
        "content": "_{Coming in: v2.0}_"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "shanseet"
        },
        "content": "// end::autocompletion[]"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "shanseet"
        },
        "content": "_{Coming in: v2.0}_"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/major/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the https://github.com/FasterXML/jackson[Jackson library] for JSON parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives:"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": "[loweralpha]"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": ". Include those libraries in the repo (this bloats the repo size)"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": ". Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming]]"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Suggested Programming Tasks to Get Started"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": "Suggested path for new programmers:"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": "1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": "2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-EachComponent]]"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Improving each component"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": "Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Logic` component"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all participants in the list."
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/major/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/major/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/major/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "** Modify the switch statement in link:{repoURL}/src/main/java/seedu/major/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the aliases that you have added."
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": "** Update the user guide to document the new aliases."
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Model` component"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "** The link:{repoURL}/src/main/java/seedu/major/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/major/model/AddressBook.java[`AddressBook`] API need to be updated."
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": "** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/major/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/major/model/participant/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/major/model/AddressBook.java[`AddressBook`] allows you to update a participant, and link:{repoURL}/src/main/java/seedu/major/model/participant/Person.java[`Person`] allows you to update the tags."
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/major/model/AddressBook.java[`AddressBook`]. Loop through each participant, and remove the `tag` from each participant."
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/major/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/major/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the new public methods that you have added."
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Ui` component"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last participant in the list. Your job is to implement improvements to the UI to solve all these problems."
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ". Use different colors for different tags inside participant cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-before.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-after.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "** The tag labels are created inside link:{repoURL}/src/main/java/seedu/major/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": "** Use the .css attribute `-fx-background-color` to add a color."
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": "** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": "** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": "*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/major/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/major/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-before.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-after.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/major/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/major/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/major/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "** Refer to link:{repoURL}/src/main/java/seedu/major/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/major/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/major/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": "** You can write two different kinds of tests to ensure that the functionality works:"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": "*** The unit tests for `ResultDisplay` can be modified to include verification of the color."
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": "*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": "*** Do read the commits one at a time if you feel overwhelmed."
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ". Modify the link:{repoURL}/src/main/java/seedu/major/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-before.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-after.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/major/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "** Modify the constructor of link:{repoURL}/src/main/java/seedu/major/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of participants when the application just started."
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "** Use link:{repoURL}/src/main/java/seedu/major/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of participants whenever there are new changes to the addressbook."
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": "** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of participants status bar."
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Storage` component"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": "* Hint"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "** Add the API method in link:{repoURL}/src/main/java/seedu/major/storage/AddressBookStorage.java[`AddressBookStorage`] interface."
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "** Implement the logic in link:{repoURL}/src/main/java/seedu/major/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/major/storage/JsonAddressBookStorage.java[`JsonAddressBookStorage`] class."
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-RemarkCommand]]"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Creating a new command: `remark`"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "-"
        },
        "content": "By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Description"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "Edits the remark for a participant specified in the `INDEX`. +"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `remark INDEX r/[REMARK]`"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/Likes to drink coffee.` +"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "Edits the remark for the first participant to `Likes to drink coffee.`"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/` +"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "Removes the remark for the first participant."
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Step-by-step Instructions"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/major/logic/commands/Command.java[`Command`]. Upon execution, it should just throw an `Exception`."
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/major/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandTest` that tests that `execute()` throws an Exception."
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ". Add new test method to link:{repoURL}/src/test/java/seedu/major/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/major/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParserTest` that tests different boundary values"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "-"
        },
        "content": "for `RemarkCommandParser`."
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/major/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/major/ui/PersonCard.java[`PersonCard`] s to display a remark for each participant later."
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ". Add FXML annotation in link:{repoURL}/src/main/java/seedu/major/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/major/model/participant/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/major/model/participant/Address.java[`Address`], remove the regex and change the names accordingly)."
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "-"
        },
        "content": ". Add test for `Remark`, to test the `Remark#equals()` method."
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/major/model/participant/Person.java[`Person`]."
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/major/model/participant/Person.java[`Person`]."
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the participant will be created without a remark)."
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/major/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `data/addressbook.json` so that the application will load the sample data when you launch it.)"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `JsonAdaptedPerson` class"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/major/storage/JsonAdaptedPerson.java[`JsonAdaptedPerson`] to include a `Remark` field so that it will be saved."
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new JSON field for `Remark`."
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "-"
        },
        "content": ". Fix `invalidAndValidPersonAddressBook.json`, `typicalPersonsAddressBook.json`, `validAddressBook.json` etc., such that the JSON tests will not fail due to a missing `remark` field."
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/major/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/major/model/participant/Person.java[`Person`]."
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/major/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the participant that it is currently building."
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/major/testutil/TypicalPersons.java[`TypicalPersons`]."
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "Our remark label in link:{repoURL}/src/main/java/seedu/major/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/major/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/major/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "-"
        },
        "content": "We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a participant."
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "-"
        },
        "content": ". Update `RemarkCommandTest` to test that the `execute()` logic works."
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Full Solution"
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "-"
        },
        "content": "See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "shanseet"
        },
        "content": "*Target user profile*: School of Computing Freshman Orientation Camp Project Directors"
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "-"
        },
        "content": "* has a need to manage a significant number of contacts"
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "shanseet"
        },
        "content": "*Value proposition*: manage a large number of camp participants faster than a GUI driven app"
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|`* * *` |user |add a participants |"
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|`* * *` |user |see the number of participants |know how many people are involved in the camp"
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|`* * *` |user |edit a participants details |correct any details I may have keyed in wrongly"
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|`* * *` |user |delete participants wrongly added |have error-free data"
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "|`* * *` |user |find a participant by name |locate details of participants without having to go through the entire list"
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|`* * *` |user |list only the OGLs |see the details of only the OGLs in the camp for planning purposes"
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|`* * *` |user |list only the Freshmen |see the details of only the Freshmen in the camp for planning purposes"
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|`* * *` |user |create Houses |group Groups together in Houses, just like I can do in a camp"
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|`* * *` |user |create Groups |allocate students to their groupings"
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|`* * *` |user |edit the name of a House or Group |give my groups and houses proper names later into the camp planning"
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|`* * *` |user |delete a House or Group |give my groups and houses names later into the camp planning"
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|`* * *` |user |view the Houses I have added |see which houses I have added so far"
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|`* * *` |user |view the Groups I have added |see the groups I have added, and which groups belong to which houses"
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|`* * *` |user |see the size of my participant list |see the number of participants in the camp"
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|`* * *` |user |see the number of Freshmen in the camp |see the number of sign-ups the camp has so far"
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|`* * *` |user |see the number of OGLs in the camp |see if the camp has sufficient OGLs to for the planned number of Groups"
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|`* * *` |user |see the number of houses and groups |know if I have a sufficient number of groups and houses"
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|`* * *` |user |randomly divide freshmen into different houses and groups |do not have to manually assign them"
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|`* *` |user |view graphical statistics of my participants data |have visual representation of participants\u0027 data to show stakeholders"
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|`* *` |user |color code participants based on their house colors |easily identify which house they belong to"
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|`*` |user |save my data to cloud storage between logins |access address book data from elsewhere"
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|`*` |user |keep track of the prices of items I have bought for the camp |know if I am within budget"
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "-"
        },
        "content": "(For all use cases below, the *System* is the `AddressBook` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "\u003d\u003d\u003d Use case: Delete participant"
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "1.  User requests to list participants"
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "2.  AddressBook shows a list of participants"
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "3.  User requests to delete a specific participant in the list"
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "4.  AddressBook deletes the participant"
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "-"
        },
        "content": "** 3a1. AddressBook shows an error message."
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "\u003d\u003d\u003d Use case: Add participant into group"
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "shanseet"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "shanseet"
        },
        "content": "1. User requests to add a house"
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "shanseet"
        },
        "content": "2. User requests to add a group to house"
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "3. User requests to add a participant and specifies group that exists in house"
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "shanseet"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "* 3a. User edits the group attribute of a participant with no specified group to the new group"
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "shanseet"
        },
        "content": "\u003d\u003d\u003d Use case: Change the name of a group"
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "shanseet"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "shanseet"
        },
        "content": "1. User requests to view all groups"
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "shanseet"
        },
        "content": "2. User requests to edit the group name"
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ".  Should be able to hold up to 1000 participants without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "shanseet"
        },
        "content": "*FOP Manager*"
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Authors: Chan Wei Zhang, Shanon Seet, Sonia Sunil, Tan Phan"
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* Fast at managing large numbers of contacts"
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* User-friendly UI"
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* Recreates camp environment by allowing grouping of camp participants"
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* Single-user login"
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* Requires fast typing speed to be beneficial"
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "shanseet"
        },
        "content": "\u003d\u003d\u003d Adding an OGL"
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "shanseet"
        },
        "content": ". Adding an OGL to the participant list"
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "shanseet"
        },
        "content": ".. Prerequisites: List all participants using the `list` command, no groups added yet."
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "shanseet"
        },
        "content": ".. Test case: `add_o n/[NAME] s/SEX b/BIRTHDAY p/PHONE e/EMAIL m/MAJOR g/ [t/TAG]…` +"
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "shanseet"
        },
        "content": "   Expected: Participant is added to the participant list with tag `OGL`. Details of added contact shown in the result box."
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "shanseet"
        },
        "content": ".. Test case: `add_o n/[NAME] s/SEX b/BIRTHDAY p/PHONE e/EMAIL g/` (or missing any field) +"
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "shanseet"
        },
        "content": "   Expected: No participant is added. Error details shown in the result box."
      },
      {
        "lineNumber": 1447,
        "author": {
          "gitId": "shanseet"
        },
        "content": ".. Test case: `add_o n/[NAME] s/SEX b/BIRTHDAY p/PHONE e/EMAIL m/MAJOR g/1` +"
      },
      {
        "lineNumber": 1448,
        "author": {
          "gitId": "shanseet"
        },
        "content": "   Expected: No participant is added. Error details shown in the result box."
      },
      {
        "lineNumber": 1449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1450,
        "author": {
          "gitId": "shanseet"
        },
        "content": "\u003d\u003d\u003d Adding a freshman"
      },
      {
        "lineNumber": 1451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1452,
        "author": {
          "gitId": "shanseet"
        },
        "content": ". Adding a freshman to the participant list"
      },
      {
        "lineNumber": 1453,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1454,
        "author": {
          "gitId": "shanseet"
        },
        "content": ".. Prerequisites: The participant\u0027s name must not match any existing participant. +"
      },
      {
        "lineNumber": 1455,
        "author": {
          "gitId": "shanseet"
        },
        "content": "   : Only group `R1` has been added."
      },
      {
        "lineNumber": 1456,
        "author": {
          "gitId": "shanseet"
        },
        "content": ".. Test case: `add_f n/Janet Tan s/F b/19041998 e/janet@example.com m/CS g/` +"
      },
      {
        "lineNumber": 1457,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    Expected: Freshman named Janet Tan is added to the bottom of the participant list."
      },
      {
        "lineNumber": 1458,
        "author": {
          "gitId": "shanseet"
        },
        "content": ".. Test case: `add_f n/James Tan s/M b/20041998 e/james@example.com m/IS g/r1` +"
      },
      {
        "lineNumber": 1459,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    Expected: Freshman named James Tan is added to the bottom of the participant list."
      },
      {
        "lineNumber": 1460,
        "author": {
          "gitId": "shanseet"
        },
        "content": ".. Test case: `add_f n/Joel Tan s/M b/01121998 e/joel@example.com m/IS g/b1` +"
      },
      {
        "lineNumber": 1461,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    Expected: No participant is added due to the nonexistent group `B1`. Error details shown in the result box."
      },
      {
        "lineNumber": 1462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1463,
        "author": {
          "gitId": "shanseet"
        },
        "content": "\u003d\u003d\u003d Deleting a participant"
      },
      {
        "lineNumber": 1464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1465,
        "author": {
          "gitId": "shanseet"
        },
        "content": ". Deleting a participant while all participants are listed"
      },
      {
        "lineNumber": 1466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1467,
        "author": {
          "gitId": "shanseet"
        },
        "content": ".. Prerequisites: List all participants using the `list` command. Multiple participants in the list."
      },
      {
        "lineNumber": 1468,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1469,
        "author": {
          "gitId": "-"
        },
        "content": "  Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1470,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1471,
        "author": {
          "gitId": "shanseet"
        },
        "content": "  Expected: No participant is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1472,
        "author": {
          "gitId": "shanseet"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) +"
      },
      {
        "lineNumber": 1473,
        "author": {
          "gitId": "-"
        },
        "content": "  Expected: Similar to previous."
      },
      {
        "lineNumber": 1474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1475,
        "author": {
          "gitId": "shanseet"
        },
        "content": "\u003d\u003d\u003d Adding a house"
      },
      {
        "lineNumber": 1476,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 1477,
        "author": {
          "gitId": "shanseet"
        },
        "content": ". Adding a house to the address book"
      },
      {
        "lineNumber": 1478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1479,
        "author": {
          "gitId": "shanseet"
        },
        "content": ".. Test case: `add_h Green` +"
      },
      {
        "lineNumber": 1480,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    Expected: House named `Green` is added."
      },
      {
        "lineNumber": 1481,
        "author": {
          "gitId": "shanseet"
        },
        "content": ".. Test case: +"
      },
      {
        "lineNumber": 1482,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    `add_h Red` +"
      },
      {
        "lineNumber": 1483,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    `add_h Red` +"
      },
      {
        "lineNumber": 1484,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    Expected: House named `Red` is added on first command. No house is added on the second. An error message showing that the house `Red` already exists is shown in the result box."
      },
      {
        "lineNumber": 1485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1486,
        "author": {
          "gitId": "shanseet"
        },
        "content": "\u003d\u003d\u003d Adding a group"
      },
      {
        "lineNumber": 1487,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1488,
        "author": {
          "gitId": "shanseet"
        },
        "content": ". Adding a group to the address book"
      },
      {
        "lineNumber": 1489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1490,
        "author": {
          "gitId": "shanseet"
        },
        "content": ".. Prerequisites: House named Green has been added."
      },
      {
        "lineNumber": 1491,
        "author": {
          "gitId": "shanseet"
        },
        "content": ".. Test case: `add_g g1 green` +"
      },
      {
        "lineNumber": 1492,
        "author": {
          "gitId": "shanseet"
        },
        "content": "   Expected: Group named `G1` is added to the house named Green."
      },
      {
        "lineNumber": 1493,
        "author": {
          "gitId": "shanseet"
        },
        "content": ".. Test case: `add_g g2 gReEn` +"
      },
      {
        "lineNumber": 1494,
        "author": {
          "gitId": "shanseet"
        },
        "content": "   Expected: Group named `G2` is added to the house named Green."
      },
      {
        "lineNumber": 1495,
        "author": {
          "gitId": "shanseet"
        },
        "content": ".. Test case: +"
      },
      {
        "lineNumber": 1496,
        "author": {
          "gitId": "shanseet"
        },
        "content": "   `add_g g1 Green` +"
      },
      {
        "lineNumber": 1497,
        "author": {
          "gitId": "shanseet"
        },
        "content": "   `add_g g1 Green` +"
      },
      {
        "lineNumber": 1498,
        "author": {
          "gitId": "shanseet"
        },
        "content": "   Expected: Group named `G1` is added on first command. No group is added on the second. An error message showing that group `G1` already exists is shown in the result box."
      },
      {
        "lineNumber": 1499,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 1500,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "// tag::Tan_test[]"
      },
      {
        "lineNumber": 1501,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "\u003d\u003d\u003d Show participant statistic"
      },
      {
        "lineNumber": 1502,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 1503,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ". Show pie charts of participants\u0027 age, major and sex"
      },
      {
        "lineNumber": 1504,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 1505,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ".. Prerequisites: List all participants using the `list` command. Multiple participants in the list."
      },
      {
        "lineNumber": 1506,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ".. Test case: `stat` +"
      },
      {
        "lineNumber": 1507,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "   Expected: Three pie charts are shown on the GUI with labels for each one."
      },
      {
        "lineNumber": 1508,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ".. Test case: +"
      },
      {
        "lineNumber": 1509,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "   `clear` +"
      },
      {
        "lineNumber": 1510,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "   `stat` +"
      },
      {
        "lineNumber": 1511,
        "author": {
          "gitId": "shanseet"
        },
        "content": "   Expected: Error details shown in the result box."
      },
      {
        "lineNumber": 1512,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 1513,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "\u003d\u003d\u003d Save pie charts to image files"
      },
      {
        "lineNumber": 1514,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 1515,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ". Show pie charts of participants\u0027 age, major and sex"
      },
      {
        "lineNumber": 1516,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 1517,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ".. Prerequisites: List all participants using the `list` command. Multiple participants in the list."
      },
      {
        "lineNumber": 1518,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ".. Test case: +"
      },
      {
        "lineNumber": 1519,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "   `stat` +"
      },
      {
        "lineNumber": 1520,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "   `save_c File Name` +"
      },
      {
        "lineNumber": 1521,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "   Expected: Open chart folder to see three PNG files name \"File Name_age\", \"File Name_major\" ,and \"File Name_sex\""
      },
      {
        "lineNumber": 1522,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ".. Test case: +"
      },
      {
        "lineNumber": 1523,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "   `clear` +"
      },
      {
        "lineNumber": 1524,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "   `stat` +"
      },
      {
        "lineNumber": 1525,
        "author": {
          "gitId": "shanseet"
        },
        "content": "   Expected: Error details shown in the result box."
      },
      {
        "lineNumber": 1526,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "// end::Tan_test[]"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 82,
      "ssunil3232": 92,
      "shanseet": 358,
      "-": 852,
      "weizhang05": 142
    }
  },
  {
    "path": "docs/HelpWindow.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ":no-site-header:"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanseet"
        },
        "content": "\u003d FOP Manager - Help"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanseet"
        },
        "content": ":site-section: Help"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanseet"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanseet"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanseet"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanseet"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanseet"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanseet"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanseet"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanseet"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanseet"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanseet"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanseet"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanseet"
        },
        "content": "include::UserGuide.adoc[tag\u003dcommandsummary]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanseet"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanseet"
        },
        "content": "include::UserGuide.adoc[tag\u003dfeatures]"
      }
    ],
    "authorContributionMap": {
      "shanseet": 17,
      "-": 2
    }
  },
  {
    "path": "docs/LearningOutcomes.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Learning Outcomes"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: LearningOutcomes"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc: macro"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toclevels: 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnumlevels: 1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level4/tree/master"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "After studying this code and completing the corresponding exercises, you should be able to,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "toc::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use High-Level Designs `[LO-HighLevelDesign]`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the \u003c\u003cDeveloperGuide#architecture, Developer Guide\u003e\u003e describes the high-level design using an _Architecture Diagrams_ and high-level sequence diagrams."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/architecture/[se-edu/se-book: Design: Architecture]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/design/introduction/multilevelDesign/[se-edu/se-book: Design: Introduction: Multi-Level Design]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Event-Driven Programming `[LO-EventDriven]`"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "The JavaFX framework, which this code base uses for its UI, uses _events_ to communicate user input (such as mouse movement and button presses) to interested _event consumers_."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "The JavaFX event loop acts as an _event dispatcher_ to transmit events to event consumers."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* https://docs.oracle.com/javase/8/javafx/events-tutorial/events.htm[JavaFX: Handling Events]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/architecture/architecturalStyles/eventDriven/[se-edu/se-book: Design: Architecture: Architecture Styles: Event-Driven Architectural Style]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use API Design `[LO-ApiDesign]`"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "Note how components of AddressBook have well-defined APIs. For example, the API of the `Logic` component is given in the link:{repoURL}/src/main/java/seedu/major/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "image:LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/reuse/apis/[se-edu/se-book: Implementation: Reuse: APIs]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Assertions `[LO-Assertions]`"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the AddressBook app uses Java ``assert``s to verify assumptions."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/errorHandling/assertions/[se-edu/se-book: Implementation: Error Handling: Assertions]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add more assertions"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "* Make sure assertions are enabled in your IDE by forcing an assertion failure (e.g. add `assert false;` somewhere in the code and run the code to ensure the runtime reports an assertion failure)."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "* Add more assertions to AddressBook as you see fit."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Logging `[LO-Logging]`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Note \u003c\u003cDeveloperGuide#logging, how the AddressBook app uses Java\u0027s `java.util.log` package to do logging\u003e\u003e."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/errorHandling/logging/[se-edu/se-book: Implementation: Error Handling: Logging]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add more logging"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "Add more logging to AddressBook as you see fit."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Defensive Coding `[LO-DefensiveCoding]`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Note how AddressBook uses the `ReadOnly*` interfaces to prevent objects being modified by clients who are not supposed to modify them."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/errorHandling/defensiveProgramming/[se-edu/se-book: Implementation: Error Handling: Defensive Programming]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: identify more places for defensive coding"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "Analyze the AddressBook code/design to identify,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "* where defensive coding is used"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "* where the code can be more defensive"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Build Automation `[LO-BuildAutomation]`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "Note \u003c\u003cUsingGradle#, how the AddressBook app uses Gradle to automate build tasks\u003e\u003e."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/integration/buildAutomation/what/[se-edu/se-book: Implementation: Integration: Build Automation: What]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use gradle to run tasks"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "* Use gradle to do these tasks: Run all tests in headless mode, build the jar file."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use gradle to manage dependencies"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "* Note how the build script `build.gradle` file manages third party dependencies such as Jackson. Update that file to manage a third-party library dependency."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Continuous Integration `[LO-ContinuousIntegration]`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "Note \u003c\u003cUsingTravis#, how the AddressBook app uses Travis to perform Continuous Integration\u003e\u003e. (https://travis-ci.org/se-edu/addressbook-level4[image:https://travis-ci.org/se-edu/addressbook-level4.svg?branch\u003dmaster[Build Status]])"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/integration/buildAutomation/continuousIntegrationDeployment/[se-edu/se-book: Implementation: Integration: Build Automation: CI \u0026 CD]"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use Travis in your own project"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "* Set up Travis to perform CI on your own fork."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Code Coverage `[LO-CodeCoverage]`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Note how our CI server \u003c\u003cUsingTravis#, Travis uses Coveralls to report code coverage\u003e\u003e. (https://coveralls.io/github/se-edu/addressbook-level4?branch\u003dmaster[image:https://coveralls.io/repos/github/se-edu/addressbook-level4/badge.svg?branch\u003dmaster[Coverage Status]]) After \u003c\u003cUsingCoveralls#, setting up Coveralls\u003e\u003e for your project, you can visit Coveralls website to find details about the coverage of code pushed to your repo. https://coveralls.io/github/se-edu/addressbook-level4?branch\u003dmaster[Here] is an example."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testing/testCoverage/[se-edu/se-book: QA: Testing: Test Coverage]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use the IDE to measure coverage locally"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* Use the IDE to measure code coverage of your tests."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Apply Test Case Design Heuristics `[LO-TestCaseDesignHeuristics]`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "The link:{repoURL}/src/test/java/seedu/major/commons/util/StringUtilTest.java[`StringUtilTest.java`]"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "class gives some examples of how to use _Equivalence Partitions_, _Boundary Value Analysis_, and _Test Input Combination Heuristics_ to improve the efficiency and effectiveness of test cases testing the link:../src/main/java/seedu/major/commons/util/StringUtil.java[`StringUtil.java`] class."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testCaseDesign/[se-edu/se-book: QA: Test Case Design]"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Apply Test Case Design Heuristics to other places"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "* Use the test case design heuristics mentioned above to improve test cases in other places."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Write Integration Tests `[LO-IntegrationTests]`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "Consider the link:{repoURL}/src/test/java/seedu/major/storage/StorageManagerTest.java[`StorageManagerTest.java`] class."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "* Test methods `prefsReadSave()` and `addressBookReadSave()` are integration tests. Note how they simply test if The `StorageManager` class is correctly wired to its dependencies."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "* Test method `handleAddressBookChangedEvent_exceptionThrown_eventRaised()` is a unit test because it uses _dependency injection_ to isolate the SUT `StorageManager#handleAddressBookChangedEvent(...)` from its dependencies."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "Compare the above with link:{repoURL}/src/test/java/seedu/major/logic/LogicManagerTest.java[`LogicManagerTest`]. Some of the tests in that class (e.g. `execute_*` methods) are neither integration nor unit tests. They are _integration + unit_ tests because they not only check if the LogicManager is correctly wired to its dependencies, but also checks the working of its dependencies. For example, the following two lines test the `LogicManager` but also the `Parser`."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "@Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testing/testingTypes/[se-edu/se-book: QA: Testing: Testing Types]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Write unit and integration tests for the same method."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "* Write a unit test for a high-level method somewhere in the code base (or a new method you wrote)."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "* Write an integration test for the same method."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Write System Tests `[LO-SystemTesting]`"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "Note how tests below `src/test/java/systemtests` package (e.g link:{repoURL}/src/test/java/systemtests/AddCommandSystemTest.java[`AddCommandSystemTest.java`]) are system tests because they test the entire system end-to-end."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testing/testingTypes/[se-edu/se-book: QA: Testing: Testing Types]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Write more system tests"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "* Write system tests for the new features you add."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Automate GUI Testing `[LO-AutomateGuiTesting]`"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "Note how this project uses TextFX library to automate GUI testing, including \u003c\u003cDeveloperGuide#headless-gui-testing, _headless_ GUI testing\u003e\u003e."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Write more automated GUI tests"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "* Covered by `[LO-SystemTesting]`"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Apply Design Patterns `[LO-DesignPatterns]`"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some example design patterns used in the code base."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "* *Singleton Pattern* : link:{repoURL}/src/main/java/seedu/major/commons/core/EventsCenter.java[`EventsCenter.java`] is Singleton class. Its single instance can be accessed using the `EventsCenter.getInstance()` method."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "* *Facade Pattern* : link:{repoURL}/src/main/java/seedu/major/storage/StorageManager.java[`StorageManager.java`] is not only shielding the internals of the Storage component from outsiders, it is mostly redirecting method calls to its internal components (i.e. minimal logic in the class itself). Therefore, `StorageManager` can be considered a Facade class."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "* *Command Pattern* : The link:{repoURL}/src/main/java/seedu/major/logic/commands/Command.java[`Command.java`] and its sub classes implement the Command Pattern."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "* *Observer Pattern*: The code base uses JavaFX\u0027s https://docs.oracle.com/javase/8/javafx/api/javafx/beans/value/ObservableValue.html[`ObservableValue`] interface to allow objects to watch for changes in data."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "This interface is an implementation of the Observer pattern."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "Objects that are interested in changes to an `ObservableValue` can register a listener via `ObservableValue#addListener(...)`."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "When the value represented by the `ObservableValue` changes, it will notify all registered listeners."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "* *MVC Pattern* :"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "** The \u0027View\u0027 part of the application is mostly in the `.fxml` files in the `src/main/resources/view` folder."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "** `Model` component contains the \u0027Model\u0027. However, note that it is possible to view the `Logic` as the model because it hides the `Model` behind it and the view has to go through the `Logic` to access the `Model`."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "** Sub classes of link:{repoURL}/src/main/java/seedu/major/ui/UiPart.java[`UiPart`] (e.g. `PersonListPanel` ) act as \u0027Controllers\u0027, each controlling some part of the UI and communicating with the \u0027Model\u0027 (via the `Logic` component which sits between the \u0027Controller\u0027 and the \u0027Model\u0027)."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "* *Abstraction Occurrence Pattern* : Not currently used in the app."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/designPatterns/[se-edu/se-book: Design: Design Patterns]"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Discover other possible applications of the patterns"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "* Find other possible applications of the patterns to improve the current design. e.g. where else in the design can you apply the Singleton pattern?"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "* Discuss pros and cons of applying the pattern in each of the situations you found in the previous step."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Find more applicable patterns"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "* Learn other _Gang of Four_ Design patterns to see if they are applicable to the app."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Static Analysis `[LO-StaticAnalysis]`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "Note how this project uses the http://checkstyle.sourceforge.net/[CheckStyle] static analysis tool to confirm compliance with the coding standard."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/qualityAssurance/staticAnalysis/[se-edu/se-book: QA: Static Analysis]"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use CheckStyle locally to check style compliance"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "* Install the CheckStyle plugin for your IDE and use it to check compliance of your code with our style rules (given in `/config/checkstyle/checkstyle.xml`)."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Do Code Reviews `[LO-CodeReview]`"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "* Note how some PRs in this project have been reviewed by other developers. Here is an https://github.com/se-edu/addressbook-level4/pull/147[example]."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "* Also note how we have used https://www.codacy.com[Codacy] to do automate some part of the code review workload (https://www.codacy.com/app/damith/addressbook-level4?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dse-edu/addressbook-level4\u0026utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/fc0b7775cf7f4fdeaf08776f3d8e364a[Codacy Badge]])"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Review a PR"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "* Review PRs created by team members."
      }
    ],
    "authorContributionMap": {
      "tantantan277": 9,
      "-": 262
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanseet"
        },
        "content": "\u003d FOP Manager - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanseet"
        },
        "content": ":toclevels: 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanseet"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ":repoURL: https://github.com/cs2113-ay1819s2-t08-4/main"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanseet"
        },
        "content": "By: `Team T08-4`      Since: `Jan 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanseet"
        },
        "content": "FOP Manager is a desktop Graphical User Interface (GUI) address book app, specifically designed for *NUS Freshman Orientation Camp Organizers* to manage the contact information of camp participants: both Orientation Group Leaders (OGLs) and Freshmen. It is optimized for those who prefer to work with a *Command Line Interface* (CLI). If you can type fast, FOP Manager can get your contact management tasks done faster than traditional GUI apps."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Interested? Hurry, jump to \u003c\u003cQuick Start, Quick Start\u003e\u003e to get started!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanseet"
        },
        "content": "\u003d\u003d About User Guide"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "This user guide shows you how to get started with FOP Manager. It introduces you to the features of FOP Manager and provides you with examples, that you will become an expert user in no time!"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Throughout this user guide, there will be various icons used, as shown below:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanseet"
        },
        "content": "TIP: This is a tip. Following these suggestions will make using FOP Manager much simpler!"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanseet"
        },
        "content": "NOTE: This is a note. Read these for additional information."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanseet"
        },
        "content": "WARNING: This is a warning. Make sure to heed the warnings for FOP Manager to work smoothly!"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanseet"
        },
        "content": "This section serves as a tutorial for a new user to FOP Manager."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanseet"
        },
        "content": "\u003d\u003d\u003d Installation"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ".  Download the latest `fop_manager.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanseet"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for FOP Manager."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds and will look like this:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shanseet"
        },
        "content": "\u003d\u003d\u003d Introducing the Interface"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shanseet"
        },
        "content": "image::UiLabelledParts.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shanseet"
        },
        "content": ". [lime]#Undo List#: This list displays all undoable commands executed since the app was started."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shanseet"
        },
        "content": ". [blue]#Redo List#: This list displays all redoable commands executed since the app was started."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shanseet"
        },
        "content": ". [red]#Participant List#: This panel shows a list of all the participants and their information you have stored so far."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shanseet"
        },
        "content": ". [yellow]#Result Box#: The result box displays the result to the commands you input."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shanseet"
        },
        "content": ". [fuchsia]#Command Box#: The command box is where all commands should be typed in."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shanseet"
        },
        "content": "\u003d\u003d\u003d Try It Out!"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Now that you understand the app\u0027s interface, you can now try keying in commands to interact with FOP Manager."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shanseet"
        },
        "content": "NOTE: Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shanseet"
        },
        "content": "e.g. typing `help` and pressing kbd:[Enter] opens the help window."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Some example commands you can try:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* `list` : lists all contacts"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* `add_o  n/John Doe s/M b/27071999 p/98765432 e/johnd@example.com m/Information Systems g/` : adds an OGL named `John Doe` to your contact list"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* `add_h  Red` : adds a House named `Red`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* `add_g  R1 Red` : adds a Group named `R1` to the House `Red`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* `delete  3` : deletes the 3rd contact shown in the current list"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* `exit` : exits the app"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Refer to \u003c\u003cFeatures,Features\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shanseet"
        },
        "content": "This section tells you about the features available in FOP Manager."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shanseet"
        },
        "content": "// tag::features[]"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* Words in `UPPER_CASE` are parameters to be supplied by the user +"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shanseet"
        },
        "content": "e.g. if the command states `n/NAME`, `NAME` is a parameter which can be used as `n/John Doe`."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* Items in square brackets are optional +"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shanseet"
        },
        "content": "e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* Items with `…` after them can be used as many times as you want +"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shanseet"
        },
        "content": "e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shanseet"
        },
        "content": "[[Help]]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "Opens a window with a list of all the commands available on FOP Manager +"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "// tag::add[]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shanseet"
        },
        "content": "\u003d\u003d\u003d Add Commands"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shanseet"
        },
        "content": "[[AddFresh]]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shanseet"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a freshman : `add_f`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "Adds a freshman to the Freshman list +"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Format: `add_f n/NAME s/SEX b/BIRTHDAY p/PHONE e/EMAIL m/MAJOR g/GROUP [t/TAG]...`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shanseet"
        },
        "content": "****"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* Parameters can be accepted in any order."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "* A freshman can have any number of tags (including 0)."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shanseet"
        },
        "content": "`GROUP` can be left blank i.e. `g/`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shanseet"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "If not blank, the `GROUP` must exist before a freshman can be added to it"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shanseet"
        },
        "content": "****"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* `add_f n/John Doe s/M b/27071999 p/98765432 e/johnd@example.com m/Information Systems g/`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "* `add_f n/Jane Doe s/F e/betsycrowe@example.com m/CS g/ p/1234567 t/vegetarian`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "[[AddOGL]]"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shanseet"
        },
        "content": "\u003d\u003d\u003d\u003d Adding an OGL : `add_o`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "Adds an OGL to the OGL list +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Format: `add_o n/NAME s/SEX b/BIRTHDAY p/PHONE e/EMAIL m/MAJOR g/GROUP [t/TAG]...`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shanseet"
        },
        "content": "****"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* Parameters can be accepted in any order."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "* An OGL can have any number of tags (including 0)."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "`GROUP` can be left blank i.e. `g/`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "If not blank, the `GROUP` must exist before an OGL can be added to it"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shanseet"
        },
        "content": "****"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "* `add_o n/James Boe s/M b/27071999 p/13579753 e/jamesd@example.com m/CEG g/`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "* `add_o n/Jane Doe s/F e/betsycrowe@example.com m/CS g/ p/1234567 t/vegetarian`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "[[AddOther]]"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shanseet"
        },
        "content": "\u003d\u003d\u003d\u003d Adding other participants : `add`"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Adds other participants involved in the camp that are neither Freshmen nor OGLs to the contact list +"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "Format: `add n/NAME s/SEX b/BIRTHDAY p/PHONE e/EMAIL m/MAJOR g/GROUP [t/TAG]...`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "****"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "* Parameters can be accepted in any order."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "* An entered participant can have any number of tags (including 0)."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Leave `GROUP` blank i.e. `g/` since there is no group allocation for this participant!"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "****"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* `add n/James Boe s/M b/27071999 p/13579753 e/jamesd@example.com m/CEG g/ t/Camp Commandant`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shanseet"
        },
        "content": "[[AddHouse]]"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shanseet"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a house : `add_h`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Adds a house that can contain different groups +"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Format: `add_h HOUSENAME`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "shanseet"
        },
        "content": "****"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shanseet"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "shanseet"
        },
        "content": "House names are always saved with first letter in Uppercase, the rest in lowercase"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "shanseet"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "shanseet"
        },
        "content": "House names cannot contain spaces"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "shanseet"
        },
        "content": "****"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* `add_h blue` saves a house named `Blue` to the house list."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "shanseet"
        },
        "content": "[[AddGroup]]"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "shanseet"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a group : `add_g`"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Adds a group to a house +"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Format: `add_g GROUPNAME HOUSENAME`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "shanseet"
        },
        "content": "****"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "shanseet"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Group names are always saved in all-caps"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "shanseet"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Group names cannot contain spaces"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "shanseet"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Groups can only be added to houses that already exist"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "shanseet"
        },
        "content": "****"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* `add_g b1 blue` saves a group named `B1` in house `Blue` to the group list."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "// end::add[]"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "shanseet"
        },
        "content": "\u003d\u003d\u003d Edit Commands"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "shanseet"
        },
        "content": "[[EditPart]]"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "shanseet"
        },
        "content": "\u003d\u003d\u003d\u003d Editing a participant : `edit`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Edits an existing participant in the contact list. +"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Format: `edit INDEX [n/NAME] [p/PHONE] [m/MAJOR] [g/GROUP] [t/TAG] ...`"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* Edits the participant currently shown at `INDEX`."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* When editing tags, the existing tags of the participant will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "shanseet"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "shanseet"
        },
        "content": "`INDEX` must be a *positive integer*: 1, 2, 3, ..."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "shanseet"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "shanseet"
        },
        "content": "To edit a particular participant by name, first \u003c\u003cFind,find\u003e\u003e the participant by name, then edit by index"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "shanseet"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Remove all the participant\u0027s tags by typing `t/` without specifying any tags after it"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "shanseet"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Edit a participant\u0027s `GROUP` after adding them, instead of choosing a group for them from the start"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* `edit 1 p/91234567 g/g1` +"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Edits the phone number and group of the participant at index 1 to be `91234567` and `G1` respectively."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* `edit 2 n/John Koe t/` +"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Edits the name of the participant at index 2 to be `John Koe` and clears all existing tags."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "shanseet"
        },
        "content": "[[EditHouse]]"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "shanseet"
        },
        "content": "// tag::editgrouphouse[]"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "shanseet"
        },
        "content": "\u003d\u003d\u003d\u003d Editing a house : `edit_h`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Edits a house name. +"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Format: `edit_h OLDHOUSENAME NEWHOUSENAME`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* Edits the house named `OLDHOUSENAME` to `NEWHOUSENAME`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* All groups under the old house name remain in the new house."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "shanseet"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "shanseet"
        },
        "content": "`OLDHOUSENAME` must exist in the current list of houses"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "shanseet"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "shanseet"
        },
        "content": "`NEWHOUSENAME` must not exist in the current list of houses"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "shanseet"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "shanseet"
        },
        "content": "House names are not case-sensitive"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* `edit_h Red green` +"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Edits the house named `Red` to `Green`."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "shanseet"
        },
        "content": "[[EditGroup]]"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "shanseet"
        },
        "content": "\u003d\u003d\u003d\u003d Editing a group : `edit_g`"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Edits a group name. +"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Format: `edit_g OLDGROUPNAME NEWGROUPNAME`"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "shanseet"
        },
        "content": "****"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* Edits the group named `OLDGROUPNAME` to `NEWGROUPNAME`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* The `GROUP` of all participants within the old group is automatically updated."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "shanseet"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "shanseet"
        },
        "content": "`OLDGROUPNAME` must exist in the current list of groups"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "shanseet"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "shanseet"
        },
        "content": "`NEWGROUPNAME` must not exist in the current list of groups"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "shanseet"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Group names are not case-sensitive"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "shanseet"
        },
        "content": "****"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* `edit_g red1 red2` +"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Edits the group named `RED1` to `RED2`. All participants in RED1 are now in RED2."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "shanseet"
        },
        "content": "//end::editgrouphouse[]"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "// tag::list[]"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "shanseet"
        },
        "content": "\u003d\u003d\u003d List Commands"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "shanseet"
        },
        "content": "[[ListALL]]"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "shanseet"
        },
        "content": "\u003d\u003d\u003d\u003d Listing all the participants : `list`"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Shows a list of all the participants involved in the camp in your contact list. +"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "shanseet"
        },
        "content": "[[ListFresh]]"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "shanseet"
        },
        "content": "\u003d\u003d\u003d\u003d Listing all freshmen : `list_f`"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Shows a list of all the freshmen in the freshmen list. +"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Format: `list_f`"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "shanseet"
        },
        "content": "[[ListOGL]]"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "shanseet"
        },
        "content": "\u003d\u003d\u003d\u003d Listing all OGLs : `list_o`"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Shows a list of all the OGLs in the OGL list. +"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Format: `list_o`"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "shanseet"
        },
        "content": "[[ListGroup]]"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "shanseet"
        },
        "content": "\u003d\u003d\u003d\u003d Listing all group participants : `list_g`"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Shows a list of all the participants in a group. +"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Format: `list_g GROUPNAME`"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "shanseet"
        },
        "content": "****"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "shanseet"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Group names are not case-sensitive"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "shanseet"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "shanseet"
        },
        "content": "`list_g empty` lists participants with an empty group field"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "shanseet"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "shanseet"
        },
        "content": "`OLDGROUPNAME` must exist in the current list of groups"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* `list_g g1` lists all participants in Group `G1` if `G1` exists."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* `list_g empty` lists all participants not in any group yet."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "// end::list[]"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "shanseet"
        },
        "content": "\u003d\u003d\u003d View Commands"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "shanseet"
        },
        "content": "[[ViewHouse]]"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "shanseet"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing all houses : `view_h`"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Views the list of all houses added so far. +"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Format: `view_h`"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* Houses `Orange` and `Blue` have been added. +"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "shanseet"
        },
        "content": "`view_h` returns `[Orange, Blue]`."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "shanseet"
        },
        "content": "[[ViewGroup]]"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "shanseet"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing all groups : `view_g`"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Views the list of all groups added so far, along with the house they belong to. +"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Format: `view_g`"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* Groups `R1` and `R2` have been added under the house `Red`. +"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "shanseet"
        },
        "content": "`view_g` returns `[(R1, Red), (R2, Red)]`."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "shanseet"
        },
        "content": "\u003d\u003d\u003d Delete Commands"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "shanseet"
        },
        "content": "[[DeletePart]]"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "shanseet"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting a participant : `delete`"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Deletes the specified participant from your contact list. +"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* Deletes the participant at the specified `INDEX`."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* The index refers to the index number shown in the displayed contact list."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "shanseet"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "shanseet"
        },
        "content": "The index *must be a positive integer*: 1, 2, 3, ..."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* `list` has just been entered. +"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "shanseet"
        },
        "content": "`delete 2` deletes the participant at index 2."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* `find Betsy` has just been entered. +"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "shanseet"
        },
        "content": "`delete 1` deletes the participant at index 2 in the results of the `find` command."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "shanseet"
        },
        "content": "//tag::deletegrouphouse[]"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "shanseet"
        },
        "content": "[[DeleteGroup]]"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "shanseet"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting a group : `delete_g`"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Deletes the specified group from the list of groups. +"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Format: `delete_g GROUPNAME`"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* Deletes the group matching the specified `GROUPNAME`."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* `GROUPNAME` must exist in the list of groups."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "shanseet"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "shanseet"
        },
        "content": "The group *must contain no participants* before it can be deleted"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "shanseet"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Group names are not case-sensitive"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "shanseet"
        },
        "content": "****"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* Group `G1` has just been added under house `Green`. +"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "shanseet"
        },
        "content": "  `delete_g G1` removes the group `G1` from the list of groups."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* `list_g y1` shows only one participant in Group `Y1`. +"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "shanseet"
        },
        "content": "  `edit 1 g/` removes the participant from the group. +"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "shanseet"
        },
        "content": "  `delete_g Y1` removes the group `Y1` from the list of groups."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "shanseet"
        },
        "content": "[[DeleteHouse]]"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "shanseet"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting a house : `delete_h`"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Deletes the specified house from the list of houses. +"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Format: `delete_h HOUSENAME`"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "shanseet"
        },
        "content": "****"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* Deletes the house matching the specified `HOUSENAME`."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* `HOUSENAME` must exist in the list of hosues."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "shanseet"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "shanseet"
        },
        "content": "The house *must contain no groups* before it can be deleted."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "shanseet"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "shanseet"
        },
        "content": "House names are not case-sensitive"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "shanseet"
        },
        "content": "****"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* A house named `Blue` has just been added. +"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "shanseet"
        },
        "content": "  `delete_h blue` deletes the house `Blue`."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* `view_g` shows only 1 group `R1` in the house `Red`. +"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "shanseet"
        },
        "content": "  Group `R1` is deleted by first removing its participants from the group, then entering `delete_g R1`. +"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "shanseet"
        },
        "content": " `delete_h RED` deletes the house `Red`."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "shanseet"
        },
        "content": "//end::deletegrouphouse[]"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "shanseet"
        },
        "content": "[[Size]]"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "shanseet"
        },
        "content": "\u003d\u003d\u003d Displaying the camp size: `size`"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Displays the total number of participants, the number of OGLs and freshmen, and the number of houses and groups in the command result box. +"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Format: `size`"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "shanseet"
        },
        "content": "[[Find]]"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "shanseet"
        },
        "content": "\u003d\u003d\u003d Finding participants by name: `find`"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Finds participants whose names contain any of the given keywords. +"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Format: `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "shanseet"
        },
        "content": "****"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* The order of the keywords does not matter. e.g. `John Poe` will match `Poe John`"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* Only name is searched."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* Participants matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "shanseet"
        },
        "content": "****"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* `find John` returns `john` and `John Goe`"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* `find Betsy Tim John` returns any participant having names `Betsy`, `Tim`, or `John`"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "shanseet"
        },
        "content": "[[Select]]"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "shanseet"
        },
        "content": "\u003d\u003d\u003d Selecting a participant : `select`"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Selects the participant identified by the index number used in the displayed participant list. +"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `select INDEX`"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* Selects the participant at the specified `INDEX`."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* The index refers to the index number shown in the displayed participant list."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* `1, 2, 3, ...`"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* `list` has just been entered. +"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "shanseet"
        },
        "content": "`select 2` selects the participant at index 2 in your contact list."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* `find Betsy` has just been entered. +"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "shanseet"
        },
        "content": "`select 1` selects the participant at index 1 in the results of the `find` command."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "shanseet"
        },
        "content": "[[History]]"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing entered commands : `history`"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "shanseet"
        },
        "content": "****"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "shanseet"
        },
        "content": "****"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "shanseet"
        },
        "content": "[[Undo]]"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undoing previous command : `undo`"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Restores your contact list to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "shanseet"
        },
        "content": "****"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Undoable commands are commands that modify your contact list\u0027s content (`add`, `delete`, `edit` and `clear`)."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "shanseet"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Undoable commands are shown in the undo list."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "shanseet"
        },
        "content": "****"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* `delete 1` has just been entered. +"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "shanseet"
        },
        "content": "`undo` reverses the `delete 1` command"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* Only `select 1` has been entered. +"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "shanseet"
        },
        "content": "`undo` fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* `delete 1` and `clear` have been entered. +"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "shanseet"
        },
        "content": "`undo` reverses the `clear` command. +"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "shanseet"
        },
        "content": "`undo` reverses the `delete 1` command. +"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "shanseet"
        },
        "content": "[[Redo]]"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "shanseet"
        },
        "content": "\u003d\u003d\u003d Redoing previously undone command : `redo`"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "shanseet"
        },
        "content": "****"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "shanseet"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Redoable commands are shown in the redo list."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "shanseet"
        },
        "content": "****"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* `delete 1` has just been entered. +"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "shanseet"
        },
        "content": "`undo` reverses the `delete 1` command. +"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "shanseet"
        },
        "content": "`redo` reapplies the `delete 1` command. +"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* Only `delete 1` has been entered. +"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "shanseet"
        },
        "content": "`redo` fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* `delete 1` and `clear` have just been entered. +"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "shanseet"
        },
        "content": "`undo` reverses the `clear` command. +"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "shanseet"
        },
        "content": "`undo` reverses the `delete 1` command. +"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "shanseet"
        },
        "content": "`redo` reapplies the `delete 1` command. +"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "shanseet"
        },
        "content": "`redo` reapplies the `clear` command. +"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "// tag::randomize[]"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "[[Randomize]]"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "shanseet"
        },
        "content": "\u003d\u003d\u003d Randomizing groupings : `randomize`"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "Randomize group allocation of all registered participants. +"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "Format: `randomize`"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "shanseet"
        },
        "content": "****"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "Command will only work under the following conditions: +"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "- At least 2 groups created +"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "- Number of OGLs must be more than number of groups +"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "- At least 2 participants registered +"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "shanseet"
        },
        "content": "****"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "* `randomize` +"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "Successful Output:"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "image::randomize_success.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "* `randomize`. +"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "Error Output:"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "image::randomize_fail.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "// end::randomize[]"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "// tag::stat[]"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "[[Stat]]"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "\u003d\u003d\u003d Show camp participants\u0027 statistic: `stat`"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "Show the camp participants\u0027 statistic base on age, major and sex in the form of pie charts"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "Format: `stat`"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "****"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "This command will not work if there are no participant inside the application."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "****"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "* `add_o n/John Doe s/M b/27071999 p/98765432 e/johnd@example.com m/Information System g/` +"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "* `add_o n/Joh Doe s/F b/27071998 p/98765432 e/johnd@example.com m/ceg g/` +"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "* `add_o n/John s/M b/27071995 p/98765432 e/johnd@example.com m/Information System g/` +"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "* `add_o n/Doe s/M b/27071999 p/98765432 e/johnd@example.com m/cs g/` +"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "Add some sample data to the application"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "* `stat` +"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "The output is shown below:"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "image::StatCommandExample.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "// end::stat[]"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "// tag::save[]"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "[[Save]]"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "\u003d\u003d\u003d Save statistic pie charts to images: `save_c`"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "Save the pie charts generated by the `stat` command to image files"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "Format: `save_c [FILE NAME]`"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "****"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "This command will not work if there are no participant inside the application."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "****"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "****"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "This command only save the most recently generated charts. Use the `stat` command before this command to"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "avoid outdated or empty charts."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "****"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "* `stat`"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "* `save_c For NUS` +"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "Save the charts to image files with the name \"For NUS\""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "// end::save[]"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "// tag::export[]"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "\u003d\u003d\u003d Export Commands"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "[[ExportALL]]"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "\u003d\u003d\u003d\u003d Exporting the whole contact list : `export`"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "Exports all entries from your contact list to Excel Spreadsheet. +"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "Format: `export`"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "* Excel Spreadsheet name is *FOP_MANAGER_LIST.xls*."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "* Excel Spreadsheet will be saved in the current User Directory."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "Entering the `export` commands will result in an Excel Spreadsheet in the current User Directory. As shown below."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "image::ExportImage.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "The Excel Spreadsheet will look like this:"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "image::ExportResult.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "Save and close the Excel file before exporting."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "There are other export commands to produce a spreadsheet for Freshmen and OGL lists as shown in the next two sections. +"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "The name of the file will change accordingly, however, the location is the same."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "[[ExportF]]"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "\u003d\u003d\u003d\u003d Exporting only the Freshmen in the contact list : `export_f`"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "Exports all the Freshmen entries from your contact list to Excel Spreadsheet. +"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "Format: `export_f`"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "* Excel Spreadsheet name is *FOP_MANAGER_FRESHMEN_LIST.xls*. +"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "* Excel Spreadsheet will be saved in the current User Directory. +"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "Save and close the Excel file before exporting."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "[[ExportO]]"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "\u003d\u003d\u003d\u003d Exporting only the OGLs in the contact list : `export_o`"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "Exports all the OGL entries from your contact list to Excel Spreadsheet. +"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "Format: `export_o`"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "* Excel Spreadsheet name is *FOP_MANAGER_OGL_LIST.xls*. +"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "* Excel Spreadsheet will be saved in the current User Directory. +"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "Save and close the Excel file before exporting."
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "// end::export[]"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "// tag::import[]"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "[[Import]]"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "\u003d\u003d\u003d Importing contact list : `import`"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "Imports contact list from an Excel Spreadsheet into the FOP Manager. +"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "Format: `import`"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "****"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "* The Excel Spreadsheet should have the headings in the order NAME, SEX, BIRTHDAY, PHONE, EMAIL, MAJOR, GROUP and then TAG."
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "* Entries in the NAME, SEX, BIRTHDAY, PHONE, EMAIL, MAJOR and TAG columns have to be non-null."
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "* Only the non-duplicate contacts are added."
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "* If we want to edit the contacts found in the FOP Manager via excel, we should `clear` the FOP Manager and then `import`."
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "Spreadsheet name has to be *FOP_MANAGER_LIST.xls* and it has to be located at the current User Directory. +"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "The values entered under each respective columns, have to follow the format of the the `add` command. +"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "The TAG column cannot be empty. If you want it to be empty, put a white space. +"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "Save and close the Excel file before importing."
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "****"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "// end::import[]"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "shanseet"
        },
        "content": "[[Clear]]"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Clears all entries from your contact list. +"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "shanseet"
        },
        "content": "[[Exit]]"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Participants\u0027 data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Participants data will be auto-encrypted when the app closes, so that data files cannot be accessed when the app is not running. +"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Participant data will be decrypted when the app starts up."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "shanseet"
        },
        "content": "// end::features[]"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "shanseet"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous FOP Manager folder."
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Congratulations, you are now ready to start your journey with FOP Manager!"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Below is a summary of all commands available in FOP Manager:"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "shanseet"
        },
        "content": "// tag::commandsummary[]"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "shanseet"
        },
        "content": "[cols\u003d\"15%,\u003c30%,\u003c50%, \u003c20%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|Command |Purpose |Example |Reference"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|`help` |Views help |`help` |\u003c\u003cHelp,Viewing help\u003e\u003e"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|`add_f` |Adds a freshman |`add_f n/NAME s/SEX b/BIRTHDAY p/PHONE e/EMAIL m/MAJOR g/GROUP [t/TAG]...` |\u003c\u003cAddFresh,Adding a freshman\u003e\u003e"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "|`add_o` |Adds an OGL |`add_o n/NAME s/SEX b/BIRTHDAY p/PHONE e/EMAIL m/MAJOR g/GROUP [t/TAG]...` |\u003c\u003cAddOGL,Adding an OGL\u003e\u003e"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "|`add` |Adds a participant |`add n/NAME s/SEX b/BIRTHDAY p/PHONE e/EMAIL m/MAJOR g/GROUP [t/TAG]...` |\u003c\u003cAddOther,Adding a participant\u003e\u003e"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|`add_h` |Adds a house |`add_h HOUSENAME` |\u003c\u003cAddHouse,Adding a house\u003e\u003e"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|`add_g` |Adds a group |`add_g GROUPNAME HOUSENAME`|\u003c\u003cAddGroup,Adding a group\u003e\u003e"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|`edit` |Edits participant at `INDEX` |`edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [m/MAJOR] [g/GROUP] [t/TAG]...` |\u003c\u003cEditPart,Editing a Participant\u003e\u003e"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|`edit_h` |Edits an existing house\u0027s name |`edit_h OLDHOUSENAME NEWHOUSENAME` |\u003c\u003cEditHouse,Editing a house\u003e\u003e"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|`edit_g` |Edits an existing group\u0027s name |`edit_g OLDGROUPNAME NEWGROUPNAME` |\u003c\u003cEditGroup,Editing a group\u003e\u003e"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|`list` |Lists all participants in contact list |`list` |\u003c\u003cListALL,Listing all participants\u003e\u003e"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "|`list_f` |Lists all freshmen in contact list |`list_f` |\u003c\u003cListFresh,Listing all freshmen\u003e\u003e"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "|`list_o` |Lists all OGLs in contact list |`list_o` |\u003c\u003cListOGL,Listing all OGLs\u003e\u003e"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|`list_g` |Lists all participants in a particular group |`list_g GROUPNAME` |\u003c\u003cListGroup,Listing all group participants\u003e\u003e"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|`view_h` |Views all houses in house list |`view_h` |\u003c\u003cViewHouse,Viewing all houses\u003e\u003e"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|`view_g` |Views all groups in group list |`view_g` |\u003c\u003cViewGroup,Viewing all groups\u003e\u003e"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|`delete` |Deletes participant at `INDEX` |`delete INDEX` |\u003c\u003cDeletePart,Deleting a participant\u003e\u003e"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|`delete_g` |Deletes a group |`delete_g GROUPNAME` |\u003c\u003cDeleteGroup,Deleting a group\u003e\u003e"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|`delete_h` |Deletes a house |`delete_h HOUSENAME` |\u003c\u003cDeleteHouse,Deleting a participant\u003e\u003e"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|`size` |Displays the number of participants, OGLs, freshmen, houses and groups |`size` |\u003c\u003cSize, Displaying camp size\u003e\u003e"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|`find` |Finds participants by name |`find KEYWORD [MORE_KEYWORDS]` |\u003c\u003cFind,Finding participants by name\u003e\u003e"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|`select` |Selects participant at `INDEX` |`select INDEX` |\u003c\u003cSelect,Selecting a participant\u003e\u003e"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|`history` |Lists all previously entered commands |`history` |\u003c\u003cHistory,Listing entered comamnds\u003e\u003e"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|`undo` |Undoes previous command |`undo` |\u003c\u003cUndo,Undoing previous command\u003e\u003e"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|`redo` |Redoes previously undone command |`redo` |\u003c\u003cRedo, Redoing previously undone command\u003e\u003e"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|`randomize` |Randomizes group allocation |`randomize` |\u003c\u003cRandomize, Randomizing groupings\u003e\u003e"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "|`stat` |Show participants statistic |`stat` |\u003c\u003cStat, Show camp participants\u0027 statistic\u003e\u003e"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "|`save_c` | Save charts to images|`save_c [FILE NAME]` |\u003c\u003cSave,  Save statistic pie charts to images\u003e\u003e"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "|`export` |Exports contact list |`export` |\u003c\u003cExportALL, Exporting whole contact list\u003e\u003e"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "|`export_f` |Exports freshmen contact list |`export_f` |\u003c\u003cExportF, Exporting freshmen contact list\u003e\u003e"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "|`export_o` |Exports OGL contact list |`export_o` |\u003c\u003cExportO, Exporting OGL contact list\u003e\u003e"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "|`import` |Imports contacts |`import` |\u003c\u003cImport, Importing contact list from Excel Spreadsheet\u003e\u003e"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|`clear` |Clears contact list |`clear` |\u003c\u003cClear, Clearing all entries\u003e\u003e"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|`exit` |Exits program |`exit` |\u003c\u003cExit, Exiting the program\u003e\u003e"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "shanseet"
        },
        "content": "// end::commandsummary[]"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 62,
      "ssunil3232": 122,
      "shanseet": 426,
      "-": 155,
      "weizhang05": 29
    }
  },
  {
    "path": "docs/team/shanseet.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanseet"
        },
        "content": "\u003d Shanon Seet - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanseet"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanseet"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanseet"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanseet"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanseet"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanseet"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanseet"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Hello! I am a Year 2 Computer Engineering student studying in the National University of Singapore (NUS). As someone rather new to the industry, I am always excited to learn and experience new things. I have done both hardware and software projects in my last 2 years in university, and in this document I will be showing you a portfolio of my contributions to my team\u0027s Software Engineering project over this semester."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanseet"
        },
        "content": "\u003d\u003d PROJECT: _FOP Manager_"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanseet"
        },
        "content": "\u003d\u003d About The Project"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanseet"
        },
        "content": "My team and I decided to enhance an existing Command Line Interface address book application to manage camp participants\u0027 information, to be used by NUS Freshmen Orientation Camp Project Directors (PDs). This enhanced application allows PDs to view and modify participants\u0027 contact details with ease."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanseet"
        },
        "content": "In this project, I was in charge of creating the commands that support the addition and modification of groups and houses."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanseet"
        },
        "content": "\u003d\u003d About This Document"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanseet"
        },
        "content": "This document showcases the features I did, samples of my code, as well as relevant sections I added to the User and Developer Guides."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanseet"
        },
        "content": "In this document, the following styles and formatting have been used:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanseet"
        },
        "content": "****"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanseet"
        },
        "content": "NOTE: This symbol indicates important information."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanseet"
        },
        "content": "`add_g`: Grey highlight indicates that this is a command that can be inputted into the command line and executed by the application."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanseet"
        },
        "content": "`_Group_`: Italicised words in grey highlight indicate the name of a class or object used in the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanseet"
        },
        "content": "****"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanseet"
        },
        "content": "\u003d\u003d Summary of Contributions"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanseet"
        },
        "content": "This section shows a summary of my coding, documentation, and other helpful contributions. In this project, I was in charge of creating the logic to support our app\u0027s feature of `_Group_` and `_House_` management."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanseet"
        },
        "content": "*Major enhancement*:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanseet"
        },
        "content": "[options\u003d\"header\"]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|Feature |Description |Justification |Highlights"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|Adding, editing and deleting groups and houses |Allows the user to add, edit and delete `_House_` and `_Group_` objects, so that participants can be grouped according to their camp grouping. |Being tailored to manage participant details in Freshmen Orientation camps, having groups and houses are essential to organising participants as camp organisers normally do when planning camps. |These commands are a core component of the project that other features such as `randomize` build upon. It was challenging to implement as it required changes to basic commands like `add` and `edit`, as well as to the app\u0027s model."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shanseet"
        },
        "content": "*Minor enhancements*:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shanseet"
        },
        "content": "[options\u003d\"header\"]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|Feature |Description |Justification"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|Listing participants by houses and groups |Allows the user to list the participants in a specified house or group. |Listing the participants in the same group and same house is necessary for the user to filter through data quickly, especially when managing a large camp. It also allows the user to see the current size of a specific group or house."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|Viewing houses and groups |Allows the user to view the houses and groups they have added so far. | The exact house or group name must be specified to edit its name, delete it, or add to it. These commands help the user to know which houses and groups have been created so far, and can therefore be added to, modified or deleted."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|Size command| This command allows the user to view the sizing details of the camp. |This command allows the user to easily see the number of participants, OGLs, freshmen, groups and houses at one shot, providing a quick way to size the camp."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shanseet"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shanseet"
        },
        "content": "*Code contributed*:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* _Functional code sample_: [https://github.com/shanseet/T08-Fork/blob/master/src/main/java/seedu/address/logic/commands/AddGroupCommand.java[Add Group Command]], [https://github.com/shanseet/T08-Fork/blob/master/src/main/java/seedu/address/logic/commands/ListGroupCommand.java[List Group Command]]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* _Test code sample_: [https://github.com/shanseet/T08-Fork/blob/master/src/test/java/seedu/address/logic/commands/EditGroupCommandTest.java[Edit Group Commmand Test]]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* Check out more of my code on Project Code Dashboard https://nuscs2113-ay1819s2.github.io/dashboard-beta/#\u003dundefined\u0026search\u003dshanseet[here]."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shanseet"
        },
        "content": "*Other contributions*:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* _Project Management_:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shanseet"
        },
        "content": "** In charge of the issue tracker"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shanseet"
        },
        "content": "** Managed milestones v1.2 to v1.4"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* _Documentation_:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shanseet"
        },
        "content": "** Made major changes to reformat and update User Guide and Developer Guide to include new features, as well as make it more reader-friendly: [https://github.com/cs2113-ay1819s2-t08-4/main/pull/74[#74]], [https://github.com/cs2113-ay1819s2-t08-4/main/pull/102[#102]]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* _Community_:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shanseet"
        },
        "content": "** Gave consistent feedback to team members to improve their implemented features"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shanseet"
        },
        "content": "** Gave suggestions for other teams in the same tutorial group to improve their User Guide and Developer Guide"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Our team updated the original AB4 User Guide with instructions for the enhancements that we had added. In this document there are additional icons used, as shown below:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shanseet"
        },
        "content": "****"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shanseet"
        },
        "content": "TIP: This is a tip. Following these suggestions will make using FOP Manager much simpler."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shanseet"
        },
        "content": "WARNING: This is a warning and they need to be heeded for FOP Manager to work smoothly."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shanseet"
        },
        "content": "****"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shanseet"
        },
        "content": "The following is an excerpt from the User Guide showing the additions I made for editing `_House_` and `_Group_` objects:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shanseet"
        },
        "content": "\u003d\u003d\u003d Editing Houses and Groups"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shanseet"
        },
        "content": "include::../UserGuide.adoc[tag\u003deditgrouphouse]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Check out the full User Guide [https://github.com/shanseet/T08-Fork/blob/master/docs/UserGuide.adoc[here]]."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Shown below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shanseet"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dGroupHouseManagement]"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shanseet"
        },
        "content": "Check out the full Developer Guide [https://github.com/shanseet/T08-Fork/blob/master/docs/DeveloperGuide.adoc[here]]."
      }
    ],
    "authorContributionMap": {
      "shanseet": 81,
      "weizhang05": 21
    }
  },
  {
    "path": "docs/team/ssunil3232.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "\u003d Sonia Sunil - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "\u003d\u003d PROJECT: **__FOP Manager__**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "---"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "\u003d\u003d About the Project"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "For our Software Engineering module CS2113T, my team and I worked on morphing a given Command Line Interface (CLI) Address book for its **use by Faculty Orientation Program (FOP) Project Directors for easier management of participant data during camps**."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "\u003d\u003d\u003d Purpose of the Project"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "Often it gets messy during the facilitation and organisation of FOP camps as the FOP participant size is a lot larger than normal camps and there are various critical student data that need to be passed around among organizers. __FOP Manager__ will aid FOP Project Directors in viewing, sharing and changing the participant data more easily."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "\u003d\u003d\u003d My Role"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "**My role** was to design features that will enable the separate listing of Freshmen, Orientation Group Leaders (OGL) and other participants in the camp, such as Organisers, from the contact list stored on FOP Manager. I was also tasked to do an export feature to export the all participants\u0027, all Freshmen\u0027s and all OGLs\u0027 data from the contact list into an Excel spreadsheet. For more conveninet adding of multiple contacts, I was also tasked to do an import feature. Hence, I contributed the `add_f`, `add_o`, `list_f`, `list_o`, `export`, `export_f`, `export_o` and `import` features in the FOP Manager."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "This section shows a summary of my coding, documentation and other contributions to the team project."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "* *Major enhancements*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "** *Feature 1*: __Listing of Freshmen and Orientation Group Leaders (OGLs)__"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "*** *Format*: `list_f`, `list_o`"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "*** *Purpose*: To distinguish among the freshmen, the OGLs and other participants involved in the camp from the full contact list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "*** *Justification*: This command will help the FOP Project Directors to clearly see the participants in the list of freshmen involved, the list of OGLs involved and the list of other participants involved. It will also display the number of participants in each list to give the user an idea of the expected camp size and accordingly manage the logistics."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "*** *Highlights*: This enhancement is a good to have feature for future enhancements where we need to pull out separate lists. The implementation tactfully used the understanding and flow of the Addressbook commands, reducing need for extensive lines of code."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "*** *Code contributed*: [LINK of Pull Requests: https://github.com/cs2113-ay1819s2-t08-4/main/pull[#83], https://github.com/cs2113-ay1819s2-t08-4/main/pull[#81], https://github.com/cs2113-ay1819s2-t08-4/main/pull[#80], https://github.com/cs2113-ay1819s2-t08-4/main/pull[#55]]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "** *Feature 2*: __Exporting of data to an Excel file__"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "*** *Format*: `export`, `export_f`, `export_o`"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "*** *Purpose*: To export the data in the contact list to Excel spreadsheets, a form shareable with other organisers involved in the camp and others without access to FOP Manager. To also export the data of Freshmen and OGLs as separate lists as well."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "*** *Justification*: This command is necessary for other organizers and non-organisers to be able to view the contacts, without altering the data stored in the FOP Manager. It will also allow the FOP Project Directors to share the contact list information to others without access to the FOP Manager. The export function will work hand-in-hand with the import function, to ensure there are multiple saved copies of the full contact list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "*** *Highlights*: This enhancement required the integration of a third-party library. Basic understanding of the usage of the library was sufficient for the implementation of this feature."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "*** *Code contributed*: [LINK of Pull Requests: https://github.com/cs2113-ay1819s2-t08-4/main/pull[#97], https://github.com/cs2113-ay1819s2-t08-4/main/pull[#140], https://github.com/cs2113-ay1819s2-t08-4/main/pull[#144]]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "** *Feature 3*: __Importing of data from an Excel file__"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "*** *Format*: `import`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "*** *Purpose*: To import contacts from an Excel spreadsheet, an easier way to add multiple contacts into the FOP Manager without needing to enter the `add` command continuously. It also allows for saving and loading of the contact list, by working hand-in-hand with the `export` command."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "*** *Justification*: This command is necessary to reduce the manual keying the FOP Project Director has to do to add contacts into the FOP Manager. It will also allow the FOP Project Director to load previous data exported from the FOP Manager, in case the Project Director losses the contact details from the FOP Manager. Thus, it is also purposeful in acting as a Back-up method."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "*** *Highlights*: This enhancement required the integration of a third-party library. Basic understanding of the usage of the library was sufficient for the implementation of this feature."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "*** *Code contributed*: [LINK of Pull Requests: https://github.com/cs2113-ay1819s2-t08-4/main/pull[#143]]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "* *Minor enhancement*:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "** *Feature*: __Adding of freshmen and Orientation Group Leaders(OGLs)__"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "*** *Format*: `add_f`, `add_o`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "*** *Purpose*: To add a freshman and an OGL, respectively to the contact list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "*** *Justification*: This command will help the FOP Project Directors to add a tag to the freshmen and the OGLs respectively, without the need to type out the tag \"Freshman\" or \"OGL\". The feature will automatically save the Freshman and OGL added with their respective tags."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "*** *Highlights*: It was a necessary enhancement to implement for the various listing commands to work the way they were implemented."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "*** *Code contributed*: [LINK of Pull Requests: https://github.com/cs2113-ay1819s2-t08-4/main/pull[#89], https://github.com/cs2113-ay1819s2-t08-4/main/pull[#56]]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "* *Code contributed*:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "* _Functional code_: [https://github.com/CS2113-AY1819S2-T08-4/main/blob/master/src/main/java/seedu/address/logic/commands/AddFreshmanCommand.java[Add Freshman Command]],  [https://github.com/CS2113-AY1819S2-T08-4/main/blob/master/src/main/java/seedu/address/logic/commands/AddOglCommand.java[Add OGL Command]], [https://github.com/CS2113-AY1819S2-T08-4/main/blob/master/src/main/java/seedu/address/logic/commands/ListParticipantCommand.java[List Freshmen Command]], [https://github.com/CS2113-AY1819S2-T08-4/main/blob/master/src/main/java/seedu/address/logic/commands/ListOglCommand.java[List OGL Command]], [https://github.com/CS2113-AY1819S2-T08-4/main/blob/master/src/main/java/seedu/address/logic/commands/ExportCommand.java[Export Command]], [https://github.com/CS2113-AY1819S2-T08-4/main/blob/master/src/main/java/seedu/address/logic/commands/ExportFreshmenCommand.java[Export Freshmen Command]], [https://github.com/CS2113-AY1819S2-T08-4/main/blob/master/src/main/java/seedu/address/logic/commands/ExportOglCommand.java[Export OGL Command]], [https://github.com/CS2113-AY1819S2-T08-4/main/blob/master/src/main/java/seedu/address/logic/commands/ImportCommand.java[Import Command]]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "* _Test code_: [https://github.com/CS2113-AY1819S2-T08-4/main/blob/master/src/test/java/seedu/address/logic/commands/ListParticipantCommandTest.java[List Freshmen Command Test]], [https://github.com/CS2113-AY1819S2-T08-4/main/blob/master/src/test/java/seedu/address/logic/commands/ListOglCommandTest.java[List OGL Command Test]], [https://github.com/CS2113-AY1819S2-T08-4/main/blob/master/src/test/java/seedu/address/logic/commands/ExportCommandTest.java[Export Command Test]], [https://github.com/CS2113-AY1819S2-T08-4/main/blob/master/src/test/java/seedu/address/logic/commands/ExportFreshmenCommandTest.java[Export Freshmen Command Test]], [https://github.com/CS2113-AY1819S2-T08-4/main/blob/master/src/test/java/seedu/address/logic/commands/ExportOglCommandTest.java[Export OGL Command Test]],"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "* Check out more of my code on Project Code Dashboard https://nuscs2113-ay1819s2.github.io/dashboard-beta/#\u003dundefined\u0026search\u003dssunil3232[here]."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "** I contributed to the User Guide and Developer Guide to update it with features that were added by the team (Pull requests https://github.com/cs2113-ay1819s2-t08-4/main/pull[#100], https://github.com/cs2113-ay1819s2-t08-4/main/pull[#99], https://github.com/cs2113-ay1819s2-t08-4/main/pull[#98], https://github.com/cs2113-ay1819s2-t08-4/main/pull[#87], https://github.com/cs2113-ay1819s2-t08-4/main/pull[#63], https://github.com/cs2113-ay1819s2-t08-4/main/pull[#51])"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "** I approved of Pull Requests made by other members of the team (Pull requests https://github.com/cs2113-ay1819s2-t08-4/main/pull[#95], https://github.com/cs2113-ay1819s2-t08-4/main/pull[#64], https://github.com/cs2113-ay1819s2-t08-4/main/pull[#21])"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "** I integrated a third-party library (Apache) to the project (Pull requests https://github.com/cs2113-ay1819s2-t08-4/main/pull[#97])"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "|_We updated the given User Guide with instructions on how to use the features that we added to the morphed Address book. The following section will show the additions made to the FOP Manager User Guide for the features implemented by me. I made additions to the Add Commands, List Commands, Export Commands and the Import Command sections. This section will elaborate only on the Import Command and the Export Commands section. The rest of the commands can be found in the User Guide._"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "_Throughout this section, the following icons are used, as shown below:_"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "WARNING: This is a warning and they need to be heeded for FOP Manager to work smoothly."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "\u003d\u003d\u003d *Export Command*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "\u003d\u003d\u003d\u003d *Exporting the whole contact list* : `export`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "Exports all entries from your contact list to Excel Spreadsheet. +"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "Format: `export`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "* Excel Spreadsheet name is *FOP_MANAGER_LIST.xls*."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "* Excel Spreadsheet will be saved in the current User Directory."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "Entering the `export` commands will result in an Excel Spreadsheet in the current User Directory. As shown below."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "image::ExportImage.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "The Excel Spreadsheet will look like this:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "image::ExportResult.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "There are other export commands to produce a spreadsheet for Freshmen and OGL lists as shown in the next two sections. +"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "The name of the file will change accordingly, however, the location is the same."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "\u003d\u003d\u003d\u003d *Exporting only the Freshmen in the contact list* : `export_f`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "Exports all the Freshmen entries from your contact list to Excel Spreadsheet. +"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "Format: `export_f`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "* Excel Spreadsheet name is *FOP_MANAGER_FRESHMEN_LIST.xls*. +"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "* Excel Spreadsheet will be saved in the current User Directory. +"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "\u003d\u003d\u003d\u003d *Exporting only the OGLs in the contact list* : `export_o`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "Exports all the OGL entries from your contact list to Excel Spreadsheet. +"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "Format: `export_o`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "* Excel Spreadsheet name is *FOP_MANAGER_OGL_LIST.xls*. +"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "* Excel Spreadsheet will be saved in the current User Directory. +"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "\u003d\u003d\u003d *Import Command*"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "\u003d\u003d\u003d\u003d *Importing contact list* : `import`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "Imports contact list from an Excel Spreadsheet into the FOP Manager. +"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "Format: `import`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "****"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "* The Excel Spreadsheet should have the headings in the order NAME, SEX, BIRTHDAY, PHONE, EMAIL, MAJOR, GROUP and then TAG."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "* Entries in the NAME, SEX, BIRTHDAY, PHONE, EMAIL and MAJOR columns have to be non-null."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "* Only the non-duplicate contacts are added."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "* If we want to edit the contacts found in the FOP Manager via excel, we should `clear` the FOP Manager and then `import`."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "Spreadsheet name has to be *FOP_MANAGER_LIST.xls* and it has to be located at the current User Directory. +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "The values entered under each respective columns, have to follow the format of the the `add` command."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "****"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "Link to view the User Guide: [https://github.com/CS2113-AY1819S2-T08-4/main/blob/master/docs/UserGuide.adoc[User Guide]]"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "|_I added the sections on Participant Management, the Export Feature and the Import Feature to the FOP Manager Developer Guide. The following section is an example contribution of the Participant Management section I wrote on in the Developer Guide and sample of the Export Feature and Import Feature sections. You can view the Export Feature and the Import Feature in greater detail from the Developer Guide._"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "\u003d\u003d\u003d Participant Management"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "Participant management refers to how users manipulate and view the data of camp participants. Participants are categorised into 3 types: OGL, Freshman or other. This section describes how the 3 types of participants are managed."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "In *FOP Manager*, participants can be added, edited, deleted and listed."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "Add"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "* `add_o`: Adds an OGL type participant"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "* `add_f`: Adds a Freshman type participant"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "* `add`: Adds a participant who is neither OGL nor Freshman"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "Participant contact details can be viewed in different manners:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "* `list`: Lists all participants in the camp"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "* `list_o`: Lists all OGLs"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "* `list_f`: Lists all Freshmen"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "All participants are stored in the same contact list as a `UniqueParticipantList` in an AddressBook object. Participants created as OGLs or Freshmen differ only in the tags added to them. The different listing of the participants is very useful for Project Directors as it helps them to view the Freshmen and the OGL contacts separately, to specifically see who are in the respective lists and how many participants are there in each of the lists."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "The list commands, `list_o` and `list_f`, use the keywords/predicates \"Freshman\" and \"OGL\" to search through the tags of all participants in the contact list. All participants with matching tags of \"Freshman\" or \"OGL\" will be added into the filtered participant list, enabling the user to view all freshmen or OGLs in the contact list."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "The following Sequence diagram below will explain how the `list_f` command works in detail."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "image::ListParticipantCommandSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "_Sequence Diagram for listing Freshmen command_"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "An example usage of the `list_f` command is as follows:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "*Step 1:* The user launches the application. The `VersionedAddressBook` will be initialized with the initial address book state."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "*Step 2:* The user enters the `list_f` command . The `list_f` command calls the `FindingParticipantPredicate` class and searches all tags of each person for \"Freshman\"."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "*Step 3:* The `updateFilteredPersonList()` takes in this predicate and the `getFilteredPersonList()` is called to give the list of Freshmen in the contact list"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "The implementation is similar for the `list_o` command with the use of `FindingOglPredicate` instead where the searched tag is \"OGL\"."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "This section elaborates on the possible ways for implementation that were considered and explains the analysis process of finally choosing the method of implementation."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Separate management of freshmen and OGLs"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "[options\u003d\"header\"]"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "| \t\t\t\t\t\t\t\t\t\t\t\t\t|Pros \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t|Cons"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "|*Alternative 1*: Create 2 separate lists containing freshmen and OGLs separately, in addition to a full list containing all participants.\t|Less computationally expensive to obtain separate lists of freshmen and OGLs.    |Involves greater code complexity to update any contact details, with greater room for error, and requires more memory and storage."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "|*Alternative 2* __(current choice)__: Store all participants in the same list.\t|Smaller code base needed, and allows for participants who are neither OGLs nor Freshmen (such as camp directors or camp commandants) to be added.    |More computationally expensive to access lists of freshmen and lists of OGLs.  |"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "We decided to go ahead with *Alternative 1* as it was easier to implement. It would not require creation of switch cases for the UI to display the respective lists and would not require unnecessarily long codes to filter out freshmen and OGLs from the participant list. The pros of doing *Alternative 1* outweighs the pros of doing *Alternative 2* hence the decision to implement the latter."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "Link to view the Developer Guide: [https://github.com/CS2113-AY1819S2-T08-4/main/blob/master/docs/DeveloperGuide.adoc[Developer Guide]]"
      }
    ],
    "authorContributionMap": {
      "ssunil3232": 170,
      "weizhang05": 26
    }
  },
  {
    "path": "docs/team/tantantan277.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "\u003d Phan Duy Nhat Tan - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "Greetings. I am a second-year Computer Engineering student from National University of Singapore (NUS). This document showcases the features I did for my"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "Software Engineering Project, as well as the relevant sections I added to the User and Developer Guides."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "\u003d\u003d PROJECT: FOP Manager"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "---"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "\u003d\u003d\u003d About the Project"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "FOP Manager is a desktop Address Book application made for Project Directors organizing the NUS School of Computing Freshman Orientation Program (FOP). The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "\u003d\u003d\u003d My roles"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "I was in charge of the UI aspect of the application, and designed and implemented the Statistic and Save feature. The following section will describe these enhancements in more details, as well as showcasing all the relevant sections I have added to the user guide and developer guides in relation to these enhancements."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "Please take notes of the following icons and their meanings used in the document:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "#`command`# | Grey highlight indicates that this is a command that can be inputted into the command line and executed by the application."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "* *Major enhancement: implemented the `stat` and `save_c` command*"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "** What it does: The `stat` command will generate three pie charts of all of the camp\u0027s participants\u0027 age, major and sex and display them on the GUI as in Figure 1. The `save_c` command will save those charts into separate image files."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "** Justification: At the end of every FOP, the Project Directors usually have to make various reports for their university, their faculty or different sponsors that requires these information. These two features together"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "will let the user generate those data quickly and efficiently."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "** Highlights: This enhancement touched on the logic, model ,and UI components. A new `CustomPieChart` class was created to improve code readability."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "** Code contributed: Pull Request https://github.com/CS2113-AY1819S2-T08-4/main/pull/75[#75]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "** Credits: Some parts of the `stat` command was inspired by Part 6 of the excellent https://code.makery.ch/library/javafx-tutorial/part6/[Java FX Tutorial] by Marco Jakob."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ".Stat command result on the GUI"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "image::StatResult.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "*** Make a mock release for mid v1.3 to prepare for the real one"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "*** Review and merge various pull requests from team members"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "*** Help other teams with their UI component"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "*** Refactor the Person class\u0027s attributes (Pull request https://github.com/CS2113-AY1819S2-T08-4/main/pull/35[#35])"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "*** Show a list of commands that can be undo or redo on the GUI. (Pull request https://github.com/CS2113-AY1819S2-T08-4/main/pull/21[#21])"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ".Undo and redo list on the GUI"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "image::UndoRedoList.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "* *Code contributions*:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "** Functional code: [https://github.com/CS2113-AY1819S2-T08-4/main/blob/master/src/main/java/seedu/address/logic/commands/StatCommand.java[Stat Command]],"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "[https://github.com/CS2113-AY1819S2-T08-4/main/blob/master/src/main/java/seedu/address/logic/commands/SaveChartCommand.java[Save Chart Command]],"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "[https://github.com/CS2113-AY1819S2-T08-4/main/blob/master/src/main/java/seedu/address/ui/ChartPanel.java[Chart Panel]],"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "[https://github.com/CS2113-AY1819S2-T08-4/main/blob/master/src/main/java/seedu/address/ui/UndoListPanel.java[Undo List Panel]],"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "[https://github.com/CS2113-AY1819S2-T08-4/main/blob/master/src/main/java/seedu/address/ui/UndoCard.java[Undo Card]]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "** Test code:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "[https://github.com/CS2113-AY1819S2-T08-4/main/blob/master/src/test/java/seedu/address/logic/commands/StatCommandTest.java[Stat Command Test]],"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "[https://github.com/CS2113-AY1819S2-T08-4/main/blob/master/src/test/java/seedu/address/logic/commands/SaveChartCommandTest.java[Save Chart Command Test]],"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "[https://github.com/CS2113-AY1819S2-T08-4/main/blob/master/src/test/java/seedu/address/ui/UndoListPanelTest.java[Undo List Panel Test]],"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "[https://github.com/CS2113-AY1819S2-T08-4/main/blob/master/src/test/java/seedu/address/ui/UndoCardTest.java[Undo Card]]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "** Feel free to check out all of my code on the Project Code Dashboard https://nuscs2113-ay1819s2.github.io/dashboard-beta/#search\u003dtantantan277\u0026sort\u003ddisplayName\u0026since\u003d2019-02-10\u0026until\u003d2019-04-11\u0026timeframe\u003dday\u0026reverse\u003dfalse\u0026repoSort\u003dtrue[here]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "include::../UserGuide.adoc[tag\u003dstat]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "include::../UserGuide.adoc[tag\u003dsave]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dstatistic]"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dTan_test]"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 57,
      "weizhang05": 32
    }
  },
  {
    "path": "docs/team/weizhang05.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "\u003d Chan Wei Zhang (Clyde) - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d INTRODUCTION:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "Hello! My name is Wei Zhang but you may call me Clyde for short. I\u0027m currently a second year student in NUS School"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " of Computing, pursuing a Bachelor of Computing in Information Security. +"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " +"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "At the time when this document was created (over a period of Jan 2019 to April 2019),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " I took *CS2113T (Software Engineering \u0026 Object-Oriented Programming)* and *CCS2101 Effective Communication"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "  for Computing Professionals*, which requires me to develop a desktop application and write documentations for it"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "   as part of the curriculum. +"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "I held various roles in the development of this project which includes *designing the application architecture*,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " *developing core features*, *code integration* and *testing*. +"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " +"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "Aside from this project, I\u0027m also a self-taught *Cyber Security Practitioner* where my main interests are"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " *Penetration Testing* and *Digital Forensics*."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d ABOUT:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "---"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "The purpose of this document is to showcase the contribution of my work towards this"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " project as part of the learning in this module. +"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "The outline of this document will be listed as follows, mainly describing the work I have done in both technical"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " and non-technical aspect:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "* *Summary of Contributions*: Describes mainly the technical aspect of work I have contributing in the development"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " of the project. It also includes any other possible contributions I have done that may not be technical. +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "* *Contributions to User Guide*: Showcases my ability in writing a guide for user of"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " the application that was developed for. +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "* *Contributions to Developer Guide*: Showcases my ability in writing a guide for developers who may continue"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " to work on the development and maintenance of the application in the future."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: FOP Manager"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "---"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "FOP Manager is a desktop application developed for NUS undergraduate students who are Project Directors"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " of *Freshmen Orientation Programs* to manage both participants and committee members of the program."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "  The user interacts with it using a CLI, and it has a GUI created with JavaFX."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "   It is written in Java, and has about 10 kLoC. The development of this application is to teach"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    Principles of Software Engineering, which is part of the context of CS2113T."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "This segment showcase my contribution to both the development of the application and"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " the documentation of the project. +"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " +"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "[options\u003d\"header\"]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "|\t\t\t\t\t                    |Description      \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t|Justification \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                                                                  |Highlights"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "|Randomize Command\t                    |A command that allows the Project Director to automatically assign all participants to created groups.\t|This allows the Project Director to automatically assigns all participants to created group at a random distribution without doing it manually.\t|The challenge here is to come out with a suitable algorithm which ensure even distribution and no possible loop holes (e.g. all OGLs in 1 group)."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "|Redesign Model and Storage component   |Redesigning the way the application stores and manages data                                     \t|This enables the storing and managing of house and groups on top of the current participants. \t\t\t\t\t\t|The challenge here is figuring out how is the whole application designed as this modification requires knowing the code base very well."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "[options\u003d\"header\"]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "| \t\t\t\t\t\t\t\t\t\t\t\t\t|Description \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                                                                                                                    |Justification \t\t\t\t\t\t\t\t\t\t\t\t                                                                                                        |Highlights"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "|Input box is clear after every command execution \t|Simulate a Terminal/CMD (i.e. Command line Interface in Windows/Linux) interface which clears the input segment after every entering of commands (i.e. text is cleared when the user hits the \u0027enter\u0027 button).    |This improves the user friendliness of using the command line as the target users prefers using CLI (Command line Interface) over GUI (Graphical User Interface).  |The challenge here is to figure out the code for the UI component and ensuring which part of it is to be placed. This include ensuring the fix works as well."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "* *Code contributed*:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "*** Randomize Command"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "** Implementation (Pull requests https://github.com/CS2113-AY1819S2-T08-4/main/pull/4[#4], https://github.com/CS2113-AY1819S2-T08-4/main/pull/37[#37], https://github.com/CS2113-AY1819S2-T08-4/main/pull/94[#94])"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "** Enhancement (Pull requests https://github.com/CS2113-AY1819S2-T08-4/main/pull/148[#148], https://github.com/CS2113-AY1819S2-T08-4/main/pull/156[#156])"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "*** Redesign current Model and Storage (Pull requests https://github.com/CS2113-AY1819S2-T08-4/main/pull/2[#2], https://github.com/CS2113-AY1819S2-T08-4/main/pull/8[#8], https://github.com/CS2113-AY1819S2-T08-4/main/pull/12[#12], https://github.com/CS2113-AY1819S2-T08-4/main/pull/15[#15], https://github.com/CS2113-AY1819S2-T08-4/main/pull/43[#43], https://github.com/CS2113-AY1819S2-T08-4/main/pull/72[#72])"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "*** Code cleaning and refactoring (Pull requests https://github.com/CS2113-AY1819S2-T08-4/main/pull/147[#147])"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "*** Reviewing most of the codes before officially merging and integrating"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "*** Setting up of the main project repository (GitHub)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "*** Setting up continuous integration technology (TravisCI)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "*** Setting up of code contribution analysis tool (RepoSense)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "*** Managed release for v1.3 and v1.4 on GitHub"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "*** Updating of both UG and DG (Pull requests https://github.com/CS2113-AY1819S2-T08-4/main/pull/3[#3], https://github.com/CS2113-AY1819S2-T08-4/main/pull/41[#41], https://github.com/CS2113-AY1819S2-T08-4/main/pull/104[#104], https://github.com/CS2113-AY1819S2-T08-4/main/pull/105[#105], https://github.com/CS2113-AY1819S2-T08-4/main/pull/110[#110], https://github.com/CS2113-AY1819S2-T08-4/main/pull/159/files[#159], https://github.com/CS2113-AY1819S2-T08-4/main/pull/167/files[#167], https://github.com/CS2113-AY1819S2-T08-4/main/pull/169/files[#169], https://github.com/CS2113-AY1819S2-T08-4/main/pull/171[#171], https://github.com/CS2113-AY1819S2-T08-4/main/pull/176[#176])"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "https://nuscs2113-ay1819s2.github.io/dashboard-beta/#search\u003dweizhang05[Link to code contribution]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "|_This segment showcases my ability to write documents for end users based on the work that I have contributed._"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "include::../UserGuide.adoc[tag\u003drandomize]"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "|_This segment showcases my ability to write technical documents explaining the underlying technicalities for developers based on the work that I have contributed._"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003drandomize]"
      }
    ],
    "authorContributionMap": {
      "-": 10,
      "weizhang05": 98
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 4, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 1,
      "-": 186
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/Value.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "package seedu.address.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " * Stores all the common and key values pertaining to FOP Manager."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "public class Value {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    // Participant type identifier"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public static final String PARTICIPANT \u003d \"PARTICIPANT\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public static final String FRESHMAN \u003d \"FRESHMAN\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public static final String OGL \u003d \"OGL\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public static final String HOUSE_HEAD \u003d \"HOUSE_HEAD\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    // Values for constraint checking"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public static final int MAX_AGE \u003d 50;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weizhang05": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The participant index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    public static final String MESSAGE_EXCEL_FILE_WRITTEN_SUCCESSFULLY \u003d \"The Excel Sheet is written successfully\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    public static final String MESSAGE_EXPORT_COMMAND_ERRORS \u003d \"Excel Writing was unsuccessful\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    public static final String MESSAGE_UNSUCCESSFUL_IMPORT \u003d \"Excel import was unsuccessful.\\n Check that the name of \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            + \"the file is \u0027FOP_MANAGER_LIST.xls\u0027 and that the Headings are NAME, SEX, BIRTHDAY, PHONE, EMAIL, MAJOR, \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            + \"GROUP, TAG.\\n The file should also be in the same User Directory as the FOP Manager.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    public static final String MESSAGE_MISSING_VALUES_IMPORT \u003d \"Check that the NAME, SEX, BIRTHDAY, PHONE, EMAIL and \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            + \"MAJOR values are not empty.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ssunil3232": 7,
      "-": 11,
      "weizhang05": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/WriteToExcel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import org.apache.poi.hssf.usermodel.HSSFSheet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import org.apache.poi.hssf.usermodel.HSSFWorkbook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import org.apache.poi.ss.usermodel.Cell;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import org.apache.poi.ss.usermodel.Row;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.model.grouping.Group;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.model.participant.Birthday;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.model.participant.Email;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.model.participant.Major;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.model.participant.Name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Participant;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.model.participant.Phone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.model.participant.Sex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": " * Write the excel sheet."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "public class WriteToExcel {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    public static final String WORKING_DIRECTORY_STRING \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    private static final int FIRST_COLUMN \u003d 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    private static final int SECOND_COLUMN \u003d 1;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    private static final int THIRD_COLUMN \u003d 2;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    private static final int FOURTH_COLUMN \u003d 3;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    private static final int FIFTH_COLUMN \u003d 4;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    private static final int SIXTH_COLUMN \u003d 5;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    private static final int SEVENTH_COLUMN \u003d 6;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    private static final int EIGHTH_COLUMN \u003d 7;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    private static final int LEFT_OUT_CHARACTER \u003d 3;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    private static final int STARTING_INDEX \u003d 0;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    private static final int RECORD_EMPTY \u003d 0;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    private static final String NAME_TITLE \u003d \"NAME\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    private static final String SEX_TITLE \u003d \"SEX\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    private static final String BIRTHDAY_TITLE \u003d \"BIRTHDAY\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    private static final String PHONE_TITLE \u003d \"PHONE\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    private static final String EMAIL_TITLE \u003d \"EMAIL\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    private static final String MAJOR_TITLE \u003d \"MAJOR\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    private static final String GROUP_TITLE \u003d \"GROUP\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    private static final String TAG_TITLE \u003d \"TAGS\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    private static final String TAG_SEPARATOR \u003d \"---\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    * Write the excel sheet into Directory."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public static void writeExcelSheet(List\u003cParticipant\u003e participants) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            String excelFileName \u003d WORKING_DIRECTORY_STRING"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                    + System.getProperty(\"file.separator\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                    + \"FOP_MANAGER_LIST.xls\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            HSSFWorkbook wb \u003d new HSSFWorkbook();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            String sheetName \u003d \"FOP_CONTACTS\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            HSSFSheet sheet \u003d wb.createSheet(sheetName);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            writeDataIntoExcelSheet(participants, sheet);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            FileOutputStream out \u003d new FileOutputStream(excelFileName);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            wb.write(out);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            out.close();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "     * Write the excel sheet into Directory."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public static void writeExcelSheetFreshmen(List\u003cParticipant\u003e participants) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            String excelFileName \u003d WORKING_DIRECTORY_STRING"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                    + System.getProperty(\"file.separator\")"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                    + \"FOP_MANAGER_FRESHMEN_LIST.xls\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            HSSFWorkbook wb \u003d new HSSFWorkbook();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            String sheetName \u003d \"FOP_CONTACTS_FRESHMEN_ONLY\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            HSSFSheet sheet \u003d wb.createSheet(sheetName);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            writeDataIntoExcelSheet(participants, sheet);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            FileOutputStream out \u003d new FileOutputStream(excelFileName);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            wb.write(out);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            out.close();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "     * Write the excel sheet into Directory."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public static void writeExcelSheetOgl(List\u003cParticipant\u003e participants) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            String excelFileName \u003d WORKING_DIRECTORY_STRING"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                    + System.getProperty(\"file.separator\")"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                    + \"FOP_MANAGER_OGL_LIST.xls\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            HSSFWorkbook wb \u003d new HSSFWorkbook();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            String sheetName \u003d \"FOP_CONTACTS_OGL_ONLY\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            HSSFSheet sheet \u003d wb.createSheet(sheetName);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            writeDataIntoExcelSheet(participants, sheet);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            FileOutputStream out \u003d new FileOutputStream(excelFileName);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            wb.write(out);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            out.close();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    *Write data into ExcelSheet."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    private static void writeDataIntoExcelSheet(List\u003cParticipant\u003e participants, HSSFSheet sheet) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        int rowNum \u003d STARTING_INDEX;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        Row startingRow \u003d sheet.createRow(rowNum);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        writeDataIntoCell(startingRow, FIRST_COLUMN, NAME_TITLE);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        writeDataIntoCell(startingRow, SECOND_COLUMN, SEX_TITLE);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        writeDataIntoCell(startingRow, THIRD_COLUMN, BIRTHDAY_TITLE);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        writeDataIntoCell(startingRow, FOURTH_COLUMN, PHONE_TITLE);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        writeDataIntoCell(startingRow, FIFTH_COLUMN, EMAIL_TITLE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        writeDataIntoCell(startingRow, SIXTH_COLUMN, MAJOR_TITLE);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        writeDataIntoCell(startingRow, SEVENTH_COLUMN, GROUP_TITLE);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        writeDataIntoCell(startingRow, EIGHTH_COLUMN, TAG_TITLE);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        for (Participant participant : participants) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            Row row \u003d sheet.createRow(++rowNum);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            writeDataIntoCell(row, FIRST_COLUMN, participant.getName().fullName);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            writeDataIntoCell(row, SECOND_COLUMN, participant.getSex().value);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            writeDataIntoCell(row, THIRD_COLUMN, Double.parseDouble(participant.getBirthday().value));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            writeDataIntoCell(row, FOURTH_COLUMN, Double.parseDouble(participant.getPhone().value));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            writeDataIntoCell(row, FIFTH_COLUMN, participant.getEmail().value);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            writeDataIntoCell(row, SIXTH_COLUMN, participant.getMajor().value);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            writeDataIntoCell(row, SEVENTH_COLUMN, participant.getGroup().getGroupName());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            if (participant.getTags().size() \u003e RECORD_EMPTY) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                for (Tag tag : participant.getTags()) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                    stringBuilder.append(tag.tagName + TAG_SEPARATOR);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                writeDataIntoCell(row, EIGHTH_COLUMN, stringBuilder.toString()"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                        .substring(STARTING_INDEX, stringBuilder.toString().length() - LEFT_OUT_CHARACTER));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    * Write data into cell."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    private static void writeDataIntoCell(Row row, int colNum, Object object) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        if (object instanceof String) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            row.createCell(colNum).setCellValue((String) object);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            row.createCell(colNum).setCellValue((Double) object);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    //////////////////////////////////////////////////////////////////////////////////////////////////////"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "     * Reading Data."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public static List\u003cParticipant\u003e readFromExcel() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        String excelFileName \u003d WORKING_DIRECTORY_STRING"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                + System.getProperty(\"file.separator\")"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                + \"FOP_MANAGER_LIST.xls\";"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        List\u003cParticipant\u003e participants \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            FileInputStream file \u003d new FileInputStream(new File(excelFileName));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            HSSFWorkbook wb \u003d new HSSFWorkbook(file);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            HSSFSheet sheet \u003d wb.getSheetAt(0);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            //check if the cell headings match"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            Row row \u003d sheet.getRow(0);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            int titleCheck \u003d 1;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            if ((row.getCell(0).getStringCellValue() \u003d\u003d NAME_TITLE)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                    \u0026\u0026 (row.getCell(1).getStringCellValue() \u003d\u003d SEX_TITLE)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                    \u0026\u0026 (row.getCell(2).getStringCellValue() \u003d\u003d BIRTHDAY_TITLE)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                    \u0026\u0026 (row.getCell(3).getStringCellValue() \u003d\u003d PHONE_TITLE)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                    \u0026\u0026 (row.getCell(4).getStringCellValue() \u003d\u003d EMAIL_TITLE)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                    \u0026\u0026 (row.getCell(5).getStringCellValue() \u003d\u003d MAJOR_TITLE)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                    \u0026\u0026 (row.getCell(6).getStringCellValue() \u003d\u003d GROUP_TITLE)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                    \u0026\u0026 (row.getCell(7).getStringCellValue() \u003d\u003d TAG_TITLE)) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                titleCheck \u003d 1;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            String nameString;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            String sexString;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            String birthdayString;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            String phoneString;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            String emailString;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            String majorString;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            String groupString;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            String tagString;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            //System.out.println(titleCheck);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            if (titleCheck \u003d\u003d 1) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                //continue"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                for (int i \u003d 1; i \u003c\u003d sheet.getLastRowNum(); i++) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                    Row rowStart \u003d sheet.getRow(i);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                    int colNum \u003d 0;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                    Cell cell \u003d rowStart.getCell(0);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                    nameString \u003d cell.getStringCellValue();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                    System.out.println(nameString);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                    cell \u003d rowStart.getCell(1);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                    sexString \u003d cell.getStringCellValue();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                    System.out.println(sexString);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                    cell \u003d rowStart.getCell(2);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                    // int birthdayInt \u003d (int)cell.getNumericCellValue();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                    birthdayString \u003d String.valueOf((int) cell.getNumericCellValue());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                    if (birthdayString.length() \u003c 8) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                        birthdayString \u003d \u00270\u0027 + birthdayString;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                    System.out.println(birthdayString);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                    cell \u003d rowStart.getCell(3);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                    //int phoneInt \u003d (int)cell.getNumericCellValue();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                    //phoneString \u003d String.valueOf(phoneInt);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                    phoneString \u003d String.valueOf((int) cell.getNumericCellValue());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                    System.out.println(phoneString);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                    cell \u003d rowStart.getCell(4);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                    emailString \u003d cell.getStringCellValue();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                    System.out.println(emailString);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                    cell \u003d rowStart.getCell(5);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                    majorString \u003d cell.getStringCellValue();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                    System.out.println(majorString);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                    cell \u003d rowStart.getCell(6);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                    if (cell \u003d\u003d null) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                        groupString \u003d \" \";"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                        groupString \u003d cell.getStringCellValue();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                    System.out.println(groupString);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                    cell \u003d rowStart.getCell(7);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                    if (cell \u003d\u003d null) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                        tagString \u003d \" \";"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                        tagString \u003d cell.getStringCellValue();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                    System.out.println(tagString);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                    if (nameString \u003d\u003d null || sexString \u003d\u003d null || birthdayString \u003d\u003d null || phoneString \u003d\u003d null"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                            || emailString \u003d\u003d null || majorString \u003d\u003d null) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                        throw new ParseException(Messages.MESSAGE_MISSING_VALUES_IMPORT);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                        participants.add(createPerson(nameString, sexString, birthdayString, phoneString, emailString,"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                                majorString, groupString, tagString));"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        System.out.println(participants.size());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        return participants;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Creates a participant."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    private static Participant createPerson(String nameString, String sexString, String birthdayString,"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                                            String phoneString, String emailString, String majorString,"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                                            String groupString, String tagString)"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        requireNonNull(nameString);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        Name nameParse \u003d ParserUtil.parseName(nameString);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        Sex sexParse \u003d ParserUtil.parseSex(sexString);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        Birthday birthdayParse \u003d ParserUtil.parseBirthday(birthdayString);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        Phone phoneParse \u003d ParserUtil.parsePhone(phoneString);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        Email emailParse \u003d ParserUtil.parseEmail(emailString);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        Major majorParse \u003d ParserUtil.parseMajor(majorString);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        Group groupParse \u003d ParserUtil.parseGroup(groupString);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        String processedTags \u003d tagString.replace(TAG_SEPARATOR, \" \" + PREFIX_TAG);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize("
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                \" \" + PREFIX_TAG + processedTags, PREFIX_TAG);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        return new Participant(nameParse, sexParse, birthdayParse, phoneParse,"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                emailParse, majorParse, groupParse, tagList);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ssunil3232": 271,
      "weizhang05": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import javafx.collections.ObservableMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Participant;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    ObservableList\u003cParticipant\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    /** Returns an unmodifiable view of the list of undoable commands */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    ObservableList\u003cString\u003e getUndoList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    /** Returns an unmodifiable view of the list of redoable commands */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    ObservableList\u003cString\u003e getRedoList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of commands entered by the user."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * The list is ordered from the least recent command to the most recent command."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cString\u003e getHistory();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * Returns the user prefs\u0027 chart storage path."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    Path getChartStoragePath();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Selected participant in the filtered participant list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * null if no participant is selected."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * @see seedu.address.model.Model#selectedParticipantProperty()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    ReadOnlyProperty\u003cParticipant\u003e selectedPersonProperty();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Sets the selected participant in the filtered participant list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * @see seedu.address.model.Model#setSelectedParticipant(Participant)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    void setSelectedPerson(Participant participant);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * Returns the number of persons by age"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    ObservableMap\u003cString, Integer\u003e getAgeData();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * Returns the number of persons by sex"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    ObservableMap\u003cString, Integer\u003e getSexData();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * Returns the number of persons by major"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    ObservableMap\u003cString, Integer\u003e getMajorData();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * Returns the image files name"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    String getFileName();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 30,
      "-": 65,
      "weizhang05": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import javafx.collections.ObservableMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Participant;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean addressBookModified;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set addressBookModified to true whenever the models\u0027 address book is modified."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        model.getAddressBook().addListener(observable -\u003e addressBookModified \u003d true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookModified \u003d false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            commandResult \u003d command.execute(model, history);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (addressBookModified) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Address book modified, saving to file.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public ObservableList\u003cParticipant\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        return model.getFilteredParticipantList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public ObservableList\u003cString\u003e getUndoList() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        return model.getUndoList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public ObservableList\u003cString\u003e getRedoList() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        return model.getRedoList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return history.getHistory();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public Path getChartStoragePath() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        return model.getChartStoragePath();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public ReadOnlyProperty\u003cParticipant\u003e selectedPersonProperty() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        return model.selectedParticipantProperty();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public void setSelectedPerson(Participant participant) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        model.setSelectedParticipant(participant);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public ObservableMap\u003cString, Integer\u003e getAgeData() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        return model.getAgeData();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public ObservableMap\u003cString, Integer\u003e getMajorData() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        return model.getMajorData();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public ObservableMap\u003cString, Integer\u003e getSexData() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        return model.getSexData();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public String getFileName() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        return model.getFileName();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 29,
      "-": 108,
      "weizhang05": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MAJOR;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SEX;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.model.grouping.Group;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Participant;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " * Adds a participant to the address book."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a participant to the address book. \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            + PREFIX_SEX + \"SEX \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            + PREFIX_BIRTHDAY + \"BIRTHDAY \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            + PREFIX_MAJOR + \"MAJOR \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            + PREFIX_GROUP + \"GROUP\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            + PREFIX_SEX + \"M \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            + PREFIX_BIRTHDAY + \"27071999 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            + PREFIX_MAJOR + \"Information System \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            + PREFIX_GROUP + \"G1 \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New participant added: %1$s\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This participant already exists in the address book\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public static final String MESSAGE_NONEXISTENT_GROUP \u003d \"This group does not exist. \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            + \"A participant must be added to an existent group!\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    private final Participant toAdd;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Participant}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public AddCommand(Participant participant) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        requireNonNull(participant);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        toAdd \u003d participant;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        if (model.hasParticipant(toAdd)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        if (toAdd.getGroup().getGroupName().equals(\"\")) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            model.addParticipant(toAdd);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            model.commitAddressBook();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        if (!model.hasGroup(toAdd.getGroup())) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            throw new CommandException(MESSAGE_NONEXISTENT_GROUP);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        Group updatedGroup \u003d model.getGroup(toAdd.getGroup());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        Participant toAddUpdated \u003d getParticipantUpdatedGroup(toAdd, updatedGroup);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        model.addParticipant(toAddUpdated);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAddUpdated));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shanseet"
        },
        "content": "     * Creates and returns a {@code Participant} with the updated {@code group}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shanseet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public static Participant getParticipantUpdatedGroup(Participant participantToEdit, Group group) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        return new Participant(participantToEdit.getName(), participantToEdit.getSex(),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                participantToEdit.getBirthday(), participantToEdit.getPhone(), participantToEdit.getEmail(),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                participantToEdit.getMajor(), group, participantToEdit.getTags());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 12,
      "shanseet": 23,
      "-": 53,
      "weizhang05": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddFreshmanCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MAJOR;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SEX;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.model.grouping.Group;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Participant;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": " * Adds a freshman to the address book."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "public class AddFreshmanCommand extends AddCommand {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add_f\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a freshman to the address book. \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            + PREFIX_SEX + \"SEX \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            + PREFIX_BIRTHDAY + \"BIRTHDAY \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            + PREFIX_MAJOR + \"MAJOR \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            + PREFIX_GROUP + \"GROUP\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            + PREFIX_SEX + \"M \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            + PREFIX_BIRTHDAY + \"27071999 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            + PREFIX_MAJOR + \"Information System \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            + PREFIX_GROUP + \"G1 \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New freshman added: %1$s\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    private static final String MESSAGE_DUPLICATE_PARTICIPANT \u003d \"This freshman already exists in the address book\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    private final Participant toAdd;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Creates an AddFreshmanCommand to add the specified {@code Participant}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public AddFreshmanCommand(Participant participant) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        super(participant);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        toAdd \u003d participant;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        if (model.hasParticipant(toAdd)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PARTICIPANT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        if (toAdd.getGroup().getGroupName().equals(\"\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            model.addParticipant(toAdd);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            model.commitAddressBook();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        if (!model.hasGroup(toAdd.getGroup())) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            throw new CommandException(MESSAGE_NONEXISTENT_GROUP);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        Group updatedGroup \u003d model.getGroup(toAdd.getGroup());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        Participant toAddUpdated \u003d getParticipantUpdatedGroup(toAdd, updatedGroup);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        model.addParticipant(toAddUpdated);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAddUpdated));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ssunil3232": 56,
      "shanseet": 13,
      "weizhang05": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddGroupCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanseet"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.model.grouping.Group;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.model.grouping.House;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanseet"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanseet"
        },
        "content": " * Adds a group to an existing house in the address book."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanseet"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanseet"
        },
        "content": "public class AddGroupCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add_g\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a group into a House. Parameters: \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            + \"groupName + houseName\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New group added: %1$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public static final String MESSAGE_NONEXISTENT_HOUSE \u003d \"This House does not exist. Create House first!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_GROUP \u003d \"This group already exists\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    private static String groupName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    private static String houseName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public AddGroupCommand(String groupName, String houseName) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        requireNonNull(groupName);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        requireNonNull(houseName);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        this.groupName \u003d groupName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        this.houseName \u003d houseName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public String getGroupName() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        return groupName;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public String getHouseName() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        return houseName;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        Group toAddGroup \u003d new Group(groupName, houseName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        if (!model.hasHouse(new House(houseName))) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            throw new CommandException(MESSAGE_NONEXISTENT_HOUSE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        if (model.hasGroup(toAddGroup)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_GROUP);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        model.addGroup(toAddGroup);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, groupName));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                || (other instanceof AddGroupCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                \u0026\u0026 this.getGroupName().equals(((AddGroupCommand) other).getGroupName())"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                \u0026\u0026 this.getHouseName().equals(((AddGroupCommand) other).getHouseName())); // state check"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shanseet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanseet": 69,
      "weizhang05": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddHouseCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanseet"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.grouping.House;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanseet"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanseet"
        },
        "content": " * Adds a House in the address book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanseet"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanseet"
        },
        "content": "public class AddHouseCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add_h\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a new house. Parameters: houseName. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            + \"Note: houseName must be one word\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New house added: %1$s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_HOUSE \u003d \"This house already exists\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    private String houseName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public AddHouseCommand(String houseName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        requireNonNull(houseName);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        this.houseName \u003d houseName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public String getHouseName() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        return houseName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        if (model.hasHouse(new House(houseName))) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_HOUSE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        model.addHouse(new House(houseName));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, houseName));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                || (other instanceof AddHouseCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                \u0026\u0026 this.getHouseName().equals(((AddHouseCommand) other).getHouseName())); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shanseet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanseet": 51,
      "weizhang05": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddOglCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MAJOR;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SEX;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.model.grouping.Group;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.ogl.Ogl;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Participant;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": " * Adds an OGL to the address book."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "public class AddOglCommand extends AddCommand {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add_o\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an OGL to the address book. \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            + PREFIX_SEX + \"SEX \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            + PREFIX_BIRTHDAY + \"BIRTHDAY \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            + PREFIX_MAJOR + \"MAJOR \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            + PREFIX_GROUP + \"GROUP\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            + PREFIX_SEX + \"M \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            + PREFIX_BIRTHDAY + \"27071999 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            + PREFIX_MAJOR + \"Information System \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            + PREFIX_GROUP + \"G1 \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New ogl added: %1$s\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    private static final String MESSAGE_DUPLICATE_OGL \u003d \"This ogl already exists in the address book\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    private final Ogl toAdd;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "     * Creates an AddOglCommand to add the specified {@code Participant}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    public AddOglCommand(Ogl person) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        super(person);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        if (model.hasParticipant(toAdd)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_OGL);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        if (toAdd.getGroup().getGroupName().equals(\"\")) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            model.addParticipant(toAdd);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            model.commitAddressBook();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        if (!model.hasGroup(toAdd.getGroup())) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            throw new CommandException(MESSAGE_NONEXISTENT_GROUP);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        Group updatedGroup \u003d model.getGroup(toAdd.getGroup());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        Participant toAddUpdated \u003d getParticipantUpdatedGroup(toAdd, updatedGroup);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        model.addParticipant(toAddUpdated);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAddUpdated));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ssunil3232": 67,
      "shanseet": 13,
      "weizhang05": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    /** Pie charts should be shown to the user. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private final boolean showChart;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    /** Save pie charts to image files. */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private final boolean saveChart;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, boolean showChart, boolean saveChart) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        this.showChart \u003d showChart;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        this.saveChart \u003d saveChart;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        this(feedbackToUser, false, false, false, false);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public boolean isShowChart() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        return showChart;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public boolean isSaveChart() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        return saveChart;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                \u0026\u0026 showChart \u003d\u003d otherCommandResult.showChart"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                \u0026\u0026 saveChart \u003d\u003d otherCommandResult.saveChart;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit, showChart, saveChart);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 22,
      "-": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Participant;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " * Deletes a participant identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            + \": Deletes the participant identified by the index number used in the displayed participant list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Participant: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        List\u003cParticipant\u003e lastShownList \u003d model.getFilteredParticipantList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Participant participantToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        model.deleteParticipant(participantToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, participantToDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 47,
      "weizhang05": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteGroupCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanseet"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.model.grouping.Group;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Participant;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanseet"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanseet"
        },
        "content": " * Deletes a group identified by the group name."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanseet"
        },
        "content": " * Does not allow groups with participants in it to be deleted."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanseet"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanseet"
        },
        "content": "public class DeleteGroupCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete_g\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            + \": Deletes a group by group name.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            + \"Parameters: groupName\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public static final String MESSAGE_DELETE_GROUP_SUCCESS \u003d \"Deleted Group: %1$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public static final String MESSAGE_NONEXISTENT_GROUP \u003d \"Group does not exist.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public static final String MESSAGE_NOT_EMPTY_GROUP \u003d \"Group is not empty. \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            + \"Remove all participants from the group before deleting the group!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    private final String groupName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public DeleteGroupCommand(String groupName) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        requireNonNull(groupName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        this.groupName \u003d groupName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public String getGroupName() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        return groupName;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        ObservableList\u003cGroup\u003e groupList \u003d model.getFilteredGroupList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        ObservableList\u003cParticipant\u003e participantList \u003d model.getFilteredParticipantList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        Group toDelete \u003d new Group (groupName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        boolean groupExists \u003d false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        for (Group group : groupList) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            if (group.getGroupName().equals(groupName)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                groupExists \u003d true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                toDelete.setHouseName(group.getHouseName());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        if (!groupExists) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            throw new CommandException(MESSAGE_NONEXISTENT_GROUP);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        for (Participant participant : participantList) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            if (participant.getGroup().getGroupName().equals(groupName)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                throw new CommandException(MESSAGE_NOT_EMPTY_GROUP);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        model.deleteGroup(toDelete);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_GROUP_SUCCESS, groupName));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                || (other instanceof DeleteGroupCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                \u0026\u0026 this.getGroupName().equals(((DeleteGroupCommand) other).getGroupName()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shanseet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanseet": 75,
      "weizhang05": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteHouseCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanseet"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.model.grouping.Group;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.model.grouping.House;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanseet"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanseet"
        },
        "content": " * Deletes a house identified by the house name."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanseet"
        },
        "content": " * Does not allow houses with groups in it to be deleted."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanseet"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanseet"
        },
        "content": "public class DeleteHouseCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete_h\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            + \": Deletes a house by house name.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            + \"Parameters: houseName\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public static final String MESSAGE_DELETE_HOUSE_SUCCESS \u003d \"Deleted House: %1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public static final String MESSAGE_NONEXISTENT_HOUSE \u003d \"House does not exist.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public static final String MESSAGE_NOT_EMPTY_HOUSE \u003d \"House is not empty. \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            + \"Remove all groups from the house before deleting the house!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    private final String houseName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public DeleteHouseCommand(String houseName) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        requireNonNull(houseName);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        this.houseName \u003d houseName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public String getHouseName() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        return houseName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        ObservableList\u003cGroup\u003e groupList \u003d model.getFilteredGroupList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        ObservableList\u003cHouse\u003e houseList \u003d model.getFilteredHouseList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        boolean houseExists \u003d false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        for (House house : houseList) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            if (house.getHouseName().equals(houseName)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                houseExists \u003d true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        if (!houseExists) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            throw new CommandException(MESSAGE_NONEXISTENT_HOUSE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        for (Group group : groupList) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            if (group.getHouseName().equals(houseName)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                throw new CommandException(MESSAGE_NOT_EMPTY_HOUSE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        model.deleteHouse(new House(houseName));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_HOUSE_SUCCESS, houseName));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                || (other instanceof DeleteHouseCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                \u0026\u0026 this.getHouseName().equals(((DeleteHouseCommand) other).getHouseName())); // state check"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shanseet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanseet": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MAJOR;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SEX;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PARTICIPANTS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import seedu.address.model.grouping.Group;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Birthday;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Email;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Major;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Participant;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Phone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Sex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " * Edits the details of an existing participant in the address book."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the participant identified \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            + \"by the index number used in the displayed participant list. \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            + \"[\" + PREFIX_SEX + \"SEX] \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            + \"[\" + PREFIX_BIRTHDAY + \"BIRTHDAY] \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            + \"[\" + PREFIX_MAJOR + \"ADDRESS] \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            + \"[\" + PREFIX_GROUP + \"GROUP] \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Participant: %1$s\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This participant already exists in the address book.\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public static final String MESSAGE_NONEXISTENT_GROUP \u003d \"This group does not exist. \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            + \"A participant must be added to an existent group!\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * @param index of the participant in the filtered participant list to edit"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * @param editPersonDescriptor details to edit the participant with"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        List\u003cParticipant\u003e lastShownList \u003d model.getFilteredParticipantList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Participant participantToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Participant editedParticipant \u003d createEditedPerson(participantToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        if (!participantToEdit.isSameParticipant(editedParticipant) \u0026\u0026 model.hasParticipant(editedParticipant)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        if (!editedParticipant.getGroup().getGroupName().equals(\"\") \u0026\u0026 !model.hasGroup(editedParticipant.getGroup())) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            throw new CommandException(MESSAGE_NONEXISTENT_GROUP);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        if (!editedParticipant.getGroup().getGroupName().isEmpty()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            Group updatedGroup \u003d model.getGroup(editedParticipant.getGroup());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            editedParticipant \u003d new Participant(editedParticipant.getName(), editedParticipant.getSex(),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                    editedParticipant.getBirthday(), editedParticipant.getPhone(), editedParticipant.getEmail(),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                    editedParticipant.getMajor(), updatedGroup, editedParticipant.getTags());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        model.setParticipant(participantToEdit, editedParticipant);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        model.updateFilteredParticipantList(PREDICATE_SHOW_ALL_PARTICIPANTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedParticipant));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Creates and returns a {@code Participant} with the details of {@code participantToEdit}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    private static Participant createEditedPerson(Participant participantToEdit,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                                                  EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assert participantToEdit !\u003d null;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(participantToEdit.getName());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Sex updatedSex \u003d editPersonDescriptor.getSex().orElse(participantToEdit.getSex());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Birthday updatedBirthday \u003d editPersonDescriptor.getBirthday().orElse(participantToEdit.getBirthday());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(participantToEdit.getPhone());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(participantToEdit.getEmail());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Major updatedMajor \u003d editPersonDescriptor.getMajor().orElse(participantToEdit.getMajor());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Group updatedGroup \u003d editPersonDescriptor.getGroup().orElse(participantToEdit.getGroup());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(participantToEdit.getTags());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        return new Participant(updatedName, updatedSex, updatedBirthday, updatedPhone, updatedEmail,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                updatedMajor, updatedGroup, updatedTags);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Stores the details to edit the participant with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * corresponding field value of the participant."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        private Sex sex;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        private Birthday birthday;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        private Major major;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        private Group group;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            setSex(toCopy.sex);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            setBirthday(toCopy.birthday);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            setMajor(toCopy.major);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            setGroup(toCopy.group);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, sex, phone, birthday, email, major, group, tags);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        public void setSex(Sex sex) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            this.sex \u003d sex;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        public Optional\u003cSex\u003e getSex() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            return Optional.ofNullable(sex);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        public void setBirthday(Birthday birthday) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            this.birthday \u003d birthday;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        public Optional\u003cBirthday\u003e getBirthday() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            return Optional.ofNullable(birthday);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        public void setMajor(Major major) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            this.major \u003d major;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        public Optional\u003cMajor\u003e getMajor() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            return Optional.ofNullable(major);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        public void setGroup(Group group) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            this.group \u003d group;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        public Optional\u003cGroup\u003e getGroup() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            return Optional.ofNullable(group);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                    \u0026\u0026 getSex().equals((e.getSex()))"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                    \u0026\u0026 getBirthday().equals((e.getBirthday()))"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                    \u0026\u0026 getMajor().equals(e.getMajor())"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                    \u0026\u0026 getGroup().equals(e.getGroup())"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 48,
      "shanseet": 7,
      "-": 189,
      "weizhang05": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditGroupCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanseet"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.model.grouping.Group;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Participant;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanseet"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanseet"
        },
        "content": " * Edits the name of a group."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanseet"
        },
        "content": " * Old group must exist, new group must not, the old and new group must not have the same name."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " * Updates each participant in the address book in the old group to the new group."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanseet"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanseet"
        },
        "content": "public class EditGroupCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit_g\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits an existing group name. Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            + \"oldGroupName + newGroupName\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Group edited: from %1$s to %2$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public static final String MESSAGE_NONEXISTENT_OLD_GROUP \u003d \"Old group does not exist.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public static final String MESSAGE_REPEAT_GROUP \u003d \"Enter a group name that is different!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public static final String MESSAGE_EXISTENT_NEW_GROUP \u003d \"This group name already exists! Choose a unique name\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    private static String oldGroupName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    private static String newGroupName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public EditGroupCommand(String oldGroupName, String newGroupName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        requireNonNull(oldGroupName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        requireNonNull(newGroupName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        this.oldGroupName \u003d oldGroupName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        this.newGroupName \u003d newGroupName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public String getNewGroupName() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        return newGroupName;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public String getOldGroupName() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        return oldGroupName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        if (newGroupName.equals(oldGroupName)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            throw new CommandException(MESSAGE_REPEAT_GROUP);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        ObservableList\u003cGroup\u003e groupList \u003d model.getAddressBook().getGroupList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        Group oldGroup \u003d new Group(oldGroupName);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        Group newGroup \u003d new Group(newGroupName);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        boolean nonexistent \u003d true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        boolean existentNew \u003d false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        for (Group toList : groupList) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            if (toList.getGroupName().equals(oldGroupName)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                oldGroup.setHouseName(toList.getHouseName());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                newGroup.setHouseName(toList.getHouseName());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                nonexistent \u003d false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            if (toList.getGroupName().equals(newGroupName)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                existentNew \u003d true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        if (nonexistent) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            throw new CommandException(MESSAGE_NONEXISTENT_OLD_GROUP);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        if (existentNew) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            throw new CommandException(MESSAGE_EXISTENT_NEW_GROUP);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        //updates persons with old group to new group"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        List\u003cParticipant\u003e participantList \u003d model.getAddressBook().getParticipantList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        for (Participant participant : participantList) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            if (participant.getGroup().equals(oldGroup)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                Participant editedParticipant \u003d getParticipantUpdatedGroup(participant, newGroup);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                model.setParticipant(participant, editedParticipant);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        model.setGroup(oldGroup, newGroup);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, oldGroupName, newGroupName));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                || (other instanceof EditGroupCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                \u0026\u0026 this.getOldGroupName().equals(((EditGroupCommand) other).getOldGroupName())"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                \u0026\u0026 this.getNewGroupName().equals(((EditGroupCommand) other).getNewGroupName())); // state check"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shanseet"
        },
        "content": "     * Creates and returns a {@code Participant} with the updated {@code group}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shanseet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    private static Participant getParticipantUpdatedGroup(Participant participantToEdit, Group group) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        return new Participant(participantToEdit.getName(), participantToEdit.getSex(),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                participantToEdit.getBirthday(), participantToEdit.getPhone(), participantToEdit.getEmail(),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                participantToEdit.getMajor(), group, participantToEdit.getTags());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shanseet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanseet": 107,
      "weizhang05": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditHouseCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanseet"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.model.grouping.Group;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.model.grouping.House;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Participant;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanseet"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanseet"
        },
        "content": " * Edits the name of a House."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanseet"
        },
        "content": " * Old House must exist, new House must not, the old and new House must not have the same name."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanseet"
        },
        "content": " * Updates the groups in that house in the group list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanseet"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanseet"
        },
        "content": "public class EditHouseCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit_h\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits an existing House name. Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            + \"oldHouseName + newHouseName\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"House edited: from %1$s to %2$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public static final String MESSAGE_NONEXISTENT_OLD_HOUSE \u003d \"Old House does not exist.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public static final String MESSAGE_REPEAT_HOUSE \u003d \"Enter a House name that is different!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public static final String MESSAGE_EXISTENT_NEW_HOUSE \u003d \"This House name already exists! Choose a unique name\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    private static String oldHouseName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    private static String newHouseName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public EditHouseCommand(String oldHouseName, String newHouseName) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        requireNonNull(oldHouseName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        requireNonNull(newHouseName);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        this.oldHouseName \u003d oldHouseName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        this.newHouseName \u003d newHouseName;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public String getNewHouseName() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        return newHouseName;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public String getOldHouseName() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        return oldHouseName;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        if (newHouseName.equals(oldHouseName)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            throw new CommandException(MESSAGE_REPEAT_HOUSE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        ObservableList\u003cHouse\u003e houseList \u003d model.getFilteredHouseList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        House oldHouse \u003d new House(oldHouseName);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        House newHouse \u003d new House(newHouseName);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        boolean nonexistent \u003d true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        boolean existentNew \u003d false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        //check for existing houses"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        for (House toList : houseList) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            if (toList.getHouseName().equals(oldHouseName)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                nonexistent \u003d false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            if (toList.getHouseName().equals(newHouseName)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                existentNew \u003d true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        if (nonexistent) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            throw new CommandException(MESSAGE_NONEXISTENT_OLD_HOUSE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        if (existentNew) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            throw new CommandException(MESSAGE_EXISTENT_NEW_HOUSE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        //updates groups in old House to new houseName"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        ObservableList\u003cGroup\u003e groupList \u003d model.getFilteredGroupList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        for (Group group : groupList) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            if (group.getHouseName().equals(oldHouseName)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                Group newGroup \u003d new Group(group.getGroupName(), newHouseName);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                model.setGroup(group, newGroup);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        //updates participants with old house name to new house name"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        List\u003cParticipant\u003e participantList \u003d model.getAddressBook().getParticipantList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        for (Participant participant : participantList) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            if (participant.getGroup().getGroupName().isEmpty()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            if (participant.getGroup().getHouseName().equals(oldHouseName)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                Participant editedParticipant \u003d new Participant(participant.getName(), participant.getSex(),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                        participant.getBirthday(), participant.getPhone(), participant.getEmail(),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                        participant.getMajor(), new Group(participant.getGroup().getGroupName(), newHouseName),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                        participant.getTags());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                model.setParticipant(participant, editedParticipant);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        model.setHouse(oldHouse, newHouse);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, oldHouseName, newHouseName));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                || (other instanceof EditHouseCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                \u0026\u0026 this.getNewHouseName().equals(((EditHouseCommand) other).getNewHouseName())"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                \u0026\u0026 this.getOldHouseName().equals(((EditHouseCommand) other).getOldHouseName())); // state check"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shanseet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanseet": 107,
      "weizhang05": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting address book as requested ...\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 2,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExportCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PARTICIPANTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.commons.util.WriteToExcel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Participant;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": " * Export the data of the FOP Manager into ExcelSheets."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "public class ExportCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"export\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Exports all the contacts into Excel file.\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        model.updateFilteredParticipantList(PREDICATE_SHOW_ALL_PARTICIPANTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        List\u003cParticipant\u003e participantList \u003d model.getFilteredParticipantList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        String message;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        if (exportData(participantList)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            message \u003d String.format(Messages.MESSAGE_EXCEL_FILE_WRITTEN_SUCCESSFULLY);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            message \u003d Messages.MESSAGE_EXPORT_COMMAND_ERRORS;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        return new CommandResult(message);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "     * Export the contacts into Excel File."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    private static Boolean exportData(List\u003cParticipant\u003e participantList) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        if (participantList.size() \u003e\u003d 0) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            WriteToExcel.writeExcelSheet(participantList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ssunil3232": 41,
      "weizhang05": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExportFreshmenCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.commons.util.WriteToExcel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.FindingParticipantPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Participant;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": " * Export the data of the Freshmen FOP Manager into ExcelSheets."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "public class ExportFreshmenCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"export_f\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            + \": Exports all the freshmen in the contacts into Excel file.\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    private FindingParticipantPredicate preparePredicate() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        return new FindingParticipantPredicate(Arrays.asList(\"Freshman\".split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        FindingParticipantPredicate predicate \u003d preparePredicate();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        model.updateFilteredParticipantList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        List\u003cParticipant\u003e participantList \u003d model.getFilteredParticipantList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        String message;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        if (exportData(participantList)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            message \u003d String.format(Messages.MESSAGE_EXCEL_FILE_WRITTEN_SUCCESSFULLY);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            message \u003d Messages.MESSAGE_EXPORT_COMMAND_ERRORS;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        return new CommandResult(message);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "     * Export the contacts into Excel File."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    private static Boolean exportData(List\u003cParticipant\u003e participantList) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        if (participantList.size() \u003e\u003d 0) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            WriteToExcel.writeExcelSheetFreshmen(participantList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ssunil3232": 47,
      "weizhang05": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExportOglCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.commons.util.WriteToExcel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.ogl.FindingOglPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Participant;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": " * Export the data of the OGL FOP Manager into ExcelSheets."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "public class ExportOglCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"export_o\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            + \": Exports all the ogl in the contacts into Excel file.\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    private FindingOglPredicate preparePredicate() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        return new FindingOglPredicate(Arrays.asList(\"Ogl\".split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        FindingOglPredicate predicate \u003d preparePredicate();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        model.updateFilteredParticipantList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        List\u003cParticipant\u003e participantList \u003d model.getFilteredParticipantList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        String message;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        if (exportData(participantList)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            message \u003d String.format(Messages.MESSAGE_EXCEL_FILE_WRITTEN_SUCCESSFULLY);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            message \u003d Messages.MESSAGE_EXPORT_COMMAND_ERRORS;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        return new CommandResult(message);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "     * Export the contacts into Excel File."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    private static Boolean exportData(List\u003cParticipant\u003e participantList) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        if (participantList.size() \u003e\u003d 0) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            WriteToExcel.writeExcelSheetOgl(participantList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ssunil3232": 46,
      "weizhang05": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        model.updateFilteredParticipantList(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredParticipantList().size()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 40,
      "weizhang05": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false, false, false);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 1,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ImportCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.commons.util.WriteToExcel;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Participant;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": " * Import different data."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "public class ImportCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"import\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            + \": Imports contacts from an Excel file.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            + \"It imports only non-duplicate participants.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            + \"NOTE: \u0027FOP_MANAGER_LIST.xls\u0027 file name and location and sheet name and headers should NOT be altered.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            + \"The Headings are NAME, SEX, BIRTHDAY, PHONE, EMAIL, MAJOR, GROUP, TAG.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            + \"If you want to update the whole FOP Manager, enter clear and then import.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            + \"To keep data safe in case of accidental overwrite, export the data and copy somewhere else.\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"The new names in the excel file have been imported.\\n Should you \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            + \"wish to update all the participants\u0027 particulars in the FOP Manager, enter the clear command followed \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            + \"by import command.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    public CommandResult execute (Model model, CommandHistory commandHistory) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        String message \u003d null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            List\u003cParticipant\u003e participants \u003d WriteToExcel.readFromExcel();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            if (participants.size() \u003e\u003d 0) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                for (Participant participant : participants) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                    if (model.hasParticipant(participant)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                        continue;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                    model.addParticipant(participant);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                model.commitAddressBook();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                message \u003d String.format(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                message \u003d Messages.MESSAGE_UNSUCCESSFUL_IMPORT;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        return new CommandResult(message);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ssunil3232": 49,
      "weizhang05": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PARTICIPANTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        model.updateFilteredParticipantList(PREDICATE_SHOW_ALL_PARTICIPANTS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 23,
      "weizhang05": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListGroupCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanseet"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.model.grouping.FindGroupPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.model.grouping.Group;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanseet"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanseet"
        },
        "content": " * Lists all participants belonging to a group to the user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanseet"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanseet"
        },
        "content": "public class ListGroupCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list_g\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Lists all participants in group. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            + \"Parameters: groupName\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all participants in group $1%s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public static final String MESSAGE_NONEXISTENT_GROUP \u003d \"Group does not exist.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    private final String groupName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    private final FindGroupPredicate predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public ListGroupCommand(FindGroupPredicate predicate, String groupName) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        this.groupName \u003d groupName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        ObservableList\u003cGroup\u003e groupList \u003d model.getFilteredGroupList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        boolean contains \u003d false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        for (Group group : groupList) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            if (group.getGroupName().equals(groupName)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                contains \u003d true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        if (!groupName.equals(\"EMPTY\") \u0026\u0026 !contains) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            throw new CommandException(MESSAGE_NONEXISTENT_GROUP);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        model.updateFilteredParticipantList(predicate);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredParticipantList().size()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                || (other instanceof ListGroupCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                \u0026\u0026 predicate.equals(((ListGroupCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shanseet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanseet": 59,
      "weizhang05": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListHouseCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanseet"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.model.grouping.FindHousePredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.model.grouping.House;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanseet"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanseet"
        },
        "content": " * Lists all participants belonging to a house to the user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanseet"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanseet"
        },
        "content": "public class ListHouseCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list_h\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Lists all participants in house. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            + \"Parameters: houseName\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all participants in house $1%s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public static final String MESSAGE_NONEXISTENT_HOUSE \u003d \"House does not exist.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    private final String houseName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    private final FindHousePredicate predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public ListHouseCommand(FindHousePredicate predicate, String houseName) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        this.houseName \u003d houseName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        ObservableList\u003cHouse\u003e houseList \u003d model.getFilteredHouseList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        boolean contains \u003d false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        for (House house: houseList) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            if (house.getHouseName().equals(houseName)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                contains \u003d true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        if (!contains) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            throw new CommandException(MESSAGE_NONEXISTENT_HOUSE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        model.updateFilteredParticipantList(predicate);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredParticipantList().size()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                || (other instanceof ListHouseCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                \u0026\u0026 predicate.equals(((ListHouseCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shanseet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanseet": 59,
      "weizhang05": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListOglCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.ogl.FindingOglPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": " * Lists all ogl in the address book to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "public class ListOglCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list_o\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Lists all OGLs \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all orientation group leaders\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    private final FindingOglPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    public ListOglCommand(FindingOglPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        model.updateFilteredParticipantList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredParticipantList().size()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                || (other instanceof ListOglCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                \u0026\u0026 predicate.equals(((ListOglCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ssunil3232": 40,
      "weizhang05": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListParticipantCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.FindingParticipantPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": " * Lists all freshmen in the address book to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "public class ListParticipantCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list_f\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Lists all freshmen\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all freshmen\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    private final FindingParticipantPredicate predicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    public ListParticipantCommand(FindingParticipantPredicate predicate) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        model.updateFilteredParticipantList(predicate);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredParticipantList().size()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                || (other instanceof ListParticipantCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                \u0026\u0026 predicate.equals(((ListParticipantCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ssunil3232": 37,
      "weizhang05": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RandomizeCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import java.security.SecureRandom;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.commons.Value;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.grouping.Group;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Participant;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " * Randomly assigns all participants to all available groups."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " * Evenly distributes the participants (number differs from either 1 or 2)."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "public class RandomizeCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"randomize\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            + \": Evenly distribute all participants across all groups.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Participants are evenly distributed\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"Unable to distribute participants\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public static final String MESSAGE_INSUFFICIENT_PARTICIPANTS \u003d MESSAGE_FAILURE + \": Insufficient participants\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public static final String MESSAGE_INSUFFICIENT_OGLS \u003d MESSAGE_FAILURE + \": Insufficient OGLs\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public static final String MESSAGE_INSUFFICIENT_GROUPS \u003d MESSAGE_FAILURE + \": Insufficient groups\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        List\u003cGroup\u003e groups \u003d model.getFilteredGroupList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        if (groups.size() \u003c 2) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            throw new CommandException(MESSAGE_INSUFFICIENT_GROUPS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        List\u003cParticipant\u003e participants \u003d model.getFilteredParticipantList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        List\u003cParticipant\u003e freshmen \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        List\u003cParticipant\u003e ogls \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        for (int i \u003d 0; i \u003c participants.size(); i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            Participant p \u003d participants.get(i);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            if (p.getTags().contains(new Tag(Value.FRESHMAN))) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                freshmen.add(p);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            } else if (p.getTags().contains(new Tag(Value.OGL))) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                ogls.add(p);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        if (freshmen.size() \u003c 2) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            throw new CommandException(MESSAGE_INSUFFICIENT_PARTICIPANTS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        } else if (ogls.size() \u003c groups.size()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            throw new CommandException(MESSAGE_INSUFFICIENT_OGLS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        // SecureRandom is used as a seed for better randomness"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Collections.shuffle(freshmen, new SecureRandom());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Collections.shuffle(ogls, new SecureRandom());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        // Required for retrieving group information"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        int counter \u003d 0;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Participant originalParticipant;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Participant editedParticipant;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        for (Participant freshman : freshmen) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            originalParticipant \u003d freshman;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            editedParticipant \u003d getParticipantUpdatedGroup(originalParticipant,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                    groups.get(counter % groups.size()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            model.setParticipant(originalParticipant, editedParticipant);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            ++counter;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        for (Participant ogl : ogls) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            originalParticipant \u003d ogl;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            editedParticipant \u003d getParticipantUpdatedGroup(originalParticipant,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                    groups.get(counter % groups.size()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            model.setParticipant(originalParticipant, editedParticipant);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            ++counter;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Creates and returns a {@code Participant} with the updated {@code group}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    private static Participant getParticipantUpdatedGroup(Participant participantToEdit, Group group) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        return new Participant(participantToEdit.getName(), participantToEdit.getSex(),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                participantToEdit.getBirthday(), participantToEdit.getPhone(), participantToEdit.getEmail(),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                participantToEdit.getMajor(), group, participantToEdit.getTags());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weizhang05": 103
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RedoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PARTICIPANTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!model.canRedoAddressBook()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        model.redoAddressBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        model.updateFilteredParticipantList(PREDICATE_SHOW_ALL_PARTICIPANTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 29,
      "weizhang05": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SaveChartCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tantantan277"
        },
        "content": " * Save the pie charts to image files with specified name"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tantantan277"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "public class SaveChartCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"save_c\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Save the pie charts to image files. Parameters: \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            + \"File Name\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Saved images\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public static final String MESSAGE_NO_PERSON \u003d \"There is no information in the app.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private static String fileName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public SaveChartCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        this.fileName \u003d \"\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public SaveChartCommand(String fileName) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        this.fileName \u003d fileName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public String getFileName() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        return fileName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        if (model.isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            throw new CommandException(MESSAGE_NO_PERSON);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        model.setFileName(fileName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, false, false, false, true);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SelectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Participant;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " * Selects a participant identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            + \": Selects the participant identified by the index number used in the displayed participant list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected Participant: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        List\u003cParticipant\u003e filteredParticipantList \u003d model.getFilteredParticipantList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredParticipantList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        model.setSelectedParticipant(filteredParticipantList.get(targetIndex.getZeroBased()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof SelectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 48,
      "weizhang05": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SizeCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanseet"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Participant;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanseet"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanseet"
        },
        "content": " * Displays the size of all lists (Participant, OGL, Freshman, Group and House) in the Command result box."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanseet"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanseet"
        },
        "content": "public class SizeCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"size\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Total Participants: %1$s\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            + \"OGLs: %2$s            Freshmen: %3$s\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            + \"Groups: %4$s         Houses: %5$s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        List\u003cParticipant\u003e participantList \u003d model.getFilteredParticipantList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        int numOgl \u003d 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        int numFreshman \u003d 0;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        for (Participant participant : participantList) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            if (participant.getStringTags().contains(\"OGL\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                numOgl++;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            } else if (participant.getStringTags().contains(\"Freshman\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                numFreshman++;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        int groupSize \u003d model.sizeGroupList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        int houseSize \u003d model.sizeHouseList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, Integer.toString(participantList.size()),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                Integer.toString(numOgl), Integer.toString(numFreshman), Integer.toString(groupSize),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                Integer.toString(houseSize)));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanseet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanseet": 38,
      "weizhang05": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/StatCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tantantan277"
        },
        "content": " * Shows pie charts presenting the percentage of camp\u0027s participant by age, sex and major."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tantantan277"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "public class StatCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"stat\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"The percentage of camp\u0027s participant by age, sex and major.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public static final String MESSAGE_NO_PERSON \u003d \"There is no information in the app.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory commandHistory) throws CommandException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        if (model.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            throw new CommandException(MESSAGE_NO_PERSON);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, false, false, true, false);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PARTICIPANTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previous state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!model.canUndoAddressBook()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        model.updateFilteredParticipantList(PREDICATE_SHOW_ALL_PARTICIPANTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 29,
      "weizhang05": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ViewGroupsCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanseet"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.model.grouping.Group;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanseet"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanseet"
        },
        "content": " * Views all Groups added to the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanseet"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanseet"
        },
        "content": "public class ViewGroupsCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"view_g\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Groups: \\n%1$s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        ObservableList\u003cGroup\u003e groupList \u003d model.getFilteredGroupList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        ArrayList\u003cString\u003e groupArrayList \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        for (Group toList : groupList) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            String groupHouse \u003d \"(\" + toList.getGroupName() + \", \" + toList.getHouseName() + \")\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            groupArrayList.add(groupHouse);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, groupArrayList));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanseet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanseet": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ViewHousesCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanseet"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.model.grouping.House;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanseet"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanseet"
        },
        "content": " * Views all Houses added to the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanseet"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanseet"
        },
        "content": "public class ViewHousesCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"view_h\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Houses: \\n%1$s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        ObservableList\u003cHouse\u003e houseList \u003d model.getFilteredHouseList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        ArrayList\u003cString\u003e houseArrayList \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        for (House toList : houseList) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            String house \u003d toList.getHouseName();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            houseArrayList.add(house);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, houseArrayList));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanseet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanseet": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MAJOR;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SEX;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import seedu.address.model.grouping.Group;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Birthday;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Major;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Participant;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Sex;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_SEX, PREFIX_BIRTHDAY, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                        PREFIX_MAJOR, PREFIX_GROUP, PREFIX_TAG);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_SEX, PREFIX_BIRTHDAY, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                PREFIX_MAJOR, PREFIX_GROUP) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        Sex sex \u003d ParserUtil.parseSex(argMultimap.getValue(PREFIX_SEX).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        Birthday birthday \u003d ParserUtil.parseBirthday(argMultimap.getValue(PREFIX_BIRTHDAY).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        Major major \u003d ParserUtil.parseMajor(argMultimap.getValue(PREFIX_MAJOR).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        Group group \u003d ParserUtil.parseGroup(argMultimap.getValue(PREFIX_GROUP).get());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Participant participant \u003d new Participant(name, sex, birthday, phone, email, major, group, tagList);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        return new AddCommand(participant);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 14,
      "-": 48,
      "weizhang05": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddFreshmanCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MAJOR;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SEX;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.logic.commands.AddFreshmanCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.model.grouping.Group;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Birthday;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Major;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Participant;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Sex;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " * Parses input arguments and creates a new AddFreshmanCommand object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "public class AddFreshmanCommandParser extends AddCommandParser {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddFreshmanCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * and returns an AddFreshmanCommand object for execution."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public AddFreshmanCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_SEX, PREFIX_BIRTHDAY, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                        PREFIX_MAJOR, PREFIX_GROUP, PREFIX_TAG);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_SEX, PREFIX_BIRTHDAY, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                PREFIX_MAJOR, PREFIX_GROUP) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                    AddFreshmanCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        Sex sex \u003d ParserUtil.parseSex(argMultimap.getValue(PREFIX_SEX).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        Birthday birthday \u003d ParserUtil.parseBirthday(argMultimap.getValue(PREFIX_BIRTHDAY).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        Major major \u003d ParserUtil.parseMajor(argMultimap.getValue(PREFIX_MAJOR).get());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        Group group \u003d ParserUtil.parseGroup(argMultimap.getValue(PREFIX_GROUP).get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTagsFreshman(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Participant participant \u003d new Participant(name, sex, birthday, phone, email, major, group, tagList);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        return new AddFreshmanCommand(participant);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ssunil3232": 50,
      "weizhang05": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddGroupCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanseet"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.logic.commands.AddGroupCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanseet"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanseet"
        },
        "content": " * Parses input arguments and creates a new AddGroupCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanseet"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanseet"
        },
        "content": "public class AddGroupCommandParser implements Parser\u003cAddGroupCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanseet"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddGroupCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanseet"
        },
        "content": "     * and returns an AddGroupCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanseet"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanseet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public AddGroupCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        String[] splitArg \u003d args.trim().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        if (splitArg.length !\u003d 2) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddGroupCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        String groupName \u003d splitArg[0].toUpperCase();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        String houseName \u003d splitArg[1];"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        houseName \u003d houseName.substring(0, 1).toUpperCase() + houseName.substring(1).toLowerCase();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        return new AddGroupCommand(groupName, houseName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    };"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanseet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanseet": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddHouseCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanseet"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.logic.commands.AddHouseCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanseet"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanseet"
        },
        "content": " * Parses input argument and creates a new AddHouseCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanseet"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanseet"
        },
        "content": "public class AddHouseCommandParser implements Parser\u003cAddHouseCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanseet"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddGroupCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanseet"
        },
        "content": "     * and returns an AddGroupCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanseet"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanseet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public AddHouseCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        if (args.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddHouseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        String[] splitArg \u003d args.trim().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        if (splitArg.length !\u003d 1) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddHouseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        String houseName \u003d splitArg[0].trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        houseName \u003d houseName.substring(0, 1).toUpperCase() + houseName.substring(1).toLowerCase();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        return new AddHouseCommand(houseName);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanseet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanseet": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddOglCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MAJOR;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SEX;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.logic.commands.AddOglCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.model.grouping.Group;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.ogl.Ogl;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Birthday;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Email;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Major;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Sex;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " * Parses input arguments and creates a new AddOglCommand object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "public class AddOglCommandParser extends AddCommandParser {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddOglCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "     * and returns an AddOglCommand object for execution."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    public AddOglCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_SEX, PREFIX_BIRTHDAY, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                        PREFIX_MAJOR, PREFIX_GROUP, PREFIX_TAG);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_SEX, PREFIX_BIRTHDAY, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                PREFIX_MAJOR, PREFIX_GROUP) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddOglCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        Sex sex \u003d ParserUtil.parseSex(argMultimap.getValue(PREFIX_SEX).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        Birthday birthday \u003d ParserUtil.parseBirthday(argMultimap.getValue(PREFIX_BIRTHDAY).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        Major major \u003d ParserUtil.parseMajor(argMultimap.getValue(PREFIX_MAJOR).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        Group group \u003d ParserUtil.parseGroup(argMultimap.getValue(PREFIX_GROUP).get());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTagsOgl(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        Ogl person \u003d new Ogl(name, sex, birthday, phone, email, major, group, tagList);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        return new AddOglCommand(person);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ssunil3232": 57,
      "weizhang05": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.logic.commands.AddFreshmanCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.logic.commands.AddGroupCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.logic.commands.AddHouseCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.logic.commands.AddOglCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.logic.commands.DeleteGroupCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.logic.commands.DeleteHouseCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.logic.commands.EditGroupCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.logic.commands.EditHouseCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.logic.commands.ExportFreshmenCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.logic.commands.ExportOglCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.logic.commands.ListGroupCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.logic.commands.ListHouseCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.logic.commands.ListOglCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.logic.commands.ListParticipantCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.logic.commands.RandomizeCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.logic.commands.SaveChartCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.logic.commands.SizeCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.logic.commands.StatCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.logic.commands.ViewGroupsCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.logic.commands.ViewHousesCommand;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        case AddGroupCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            return new AddGroupCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        case AddHouseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            return new AddHouseCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        case AddOglCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            return new AddOglCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        case AddFreshmanCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            return new AddFreshmanCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        case EditGroupCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            return new EditGroupCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        case EditHouseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            return new EditHouseCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        case ExportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            return new ExportCommand();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        case ExportFreshmenCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            return new ExportFreshmenCommand();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        case ExportOglCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            return new ExportOglCommand();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        case ImportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            return new ImportCommand();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        case DeleteGroupCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            return new DeleteGroupCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        case DeleteHouseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            return new DeleteHouseCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        case ListOglCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            return new ListOglCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        case ListParticipantCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            return new ListParticipantCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        case ListGroupCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            return new ListGroupCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        case ListHouseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            return new ListHouseCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        case RandomizeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            return new RandomizeCommand();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        case SizeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            return new SizeCommand();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        case ViewGroupsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            return new ViewGroupsCommand();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        case ViewHousesCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            return new ViewHousesCommand();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        case StatCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            return new StatCommand();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        case SaveChartCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            return new SaveChartCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ssunil3232": 43,
      "tantantan277": 6,
      "shanseet": 34,
      "-": 92,
      "weizhang05": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public static final Prefix PREFIX_SEX \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public static final Prefix PREFIX_BIRTHDAY \u003d new Prefix(\"b/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public static final Prefix PREFIX_MAJOR \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public static final Prefix PREFIX_GROUP \u003d new Prefix(\"g/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 4,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteGroupCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanseet"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.logic.commands.DeleteGroupCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanseet"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanseet"
        },
        "content": " * Parses input arguments and creates a new DeleteGroupCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanseet"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanseet"
        },
        "content": "public class DeleteGroupCommandParser implements Parser\u003cDeleteGroupCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanseet"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteGroupCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanseet"
        },
        "content": "     * and returns an DeleteGroupCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanseet"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanseet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public DeleteGroupCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        if (args.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteGroupCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        String[] splitArg \u003d args.trim().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        if (splitArg.length !\u003d 1) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteGroupCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        String groupName \u003d splitArg[0].trim().toUpperCase();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        return new DeleteGroupCommand(groupName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    };"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanseet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanseet": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteHouseCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanseet"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.logic.commands.DeleteHouseCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanseet"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanseet"
        },
        "content": " * Parses input arguments and creates a new DeleteHouseCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanseet"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanseet"
        },
        "content": "public class DeleteHouseCommandParser implements Parser\u003cDeleteHouseCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanseet"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteHouseCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanseet"
        },
        "content": "     * and returns an DeleteHouseCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanseet"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanseet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public DeleteHouseCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        if (args.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteHouseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        String[] splitArg \u003d args.trim().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        if (splitArg.length !\u003d 1) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteHouseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        String houseName \u003d splitArg[0].trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        houseName \u003d houseName.substring(0, 1).toUpperCase() + houseName.substring(1).toLowerCase();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        return new DeleteHouseCommand(houseName);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    };"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanseet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanseet": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MAJOR;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SEX;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_SEX, PREFIX_BIRTHDAY, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                        PREFIX_MAJOR, PREFIX_GROUP, PREFIX_TAG);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        if (argMultimap.getValue(PREFIX_SEX).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            editPersonDescriptor.setSex(ParserUtil.parseSex(argMultimap.getValue(PREFIX_SEX).get()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        if (argMultimap.getValue(PREFIX_BIRTHDAY).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            editPersonDescriptor.setBirthday(ParserUtil.parseBirthday(argMultimap.getValue(PREFIX_BIRTHDAY).get()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MAJOR).isPresent()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            editPersonDescriptor.setMajor(ParserUtil.parseMajor(argMultimap.getValue(PREFIX_MAJOR).get()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        if (argMultimap.getValue(PREFIX_GROUP).isPresent()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            editPersonDescriptor.setGroup(ParserUtil.parseGroup(argMultimap.getValue(PREFIX_GROUP).get()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 17,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditGroupCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanseet"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.logic.commands.EditGroupCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanseet"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanseet"
        },
        "content": " * Parses input arguments and creates a new EditGroupCommand object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanseet"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanseet"
        },
        "content": "public class EditGroupCommandParser implements Parser\u003cEditGroupCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanseet"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditGroupCommand"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanseet"
        },
        "content": "     * and returns an EditGroupCommand object for execution."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanseet"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanseet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public EditGroupCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        String[] splitArg \u003d args.trim().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        if (splitArg.length !\u003d 2) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditGroupCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        String oldGroup \u003d splitArg[0].toUpperCase();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        String newGroup \u003d splitArg[1].toUpperCase();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        return new EditGroupCommand(oldGroup, newGroup);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    };"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanseet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanseet": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditHouseCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanseet"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.logic.commands.EditHouseCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanseet"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanseet"
        },
        "content": " * Parses input arguments and creates a new EditHouseCommand object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanseet"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanseet"
        },
        "content": "public class EditHouseCommandParser implements Parser\u003cEditHouseCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanseet"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditHouseCommand"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanseet"
        },
        "content": "     * and returns an EditHouseCommand object for execution."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanseet"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanseet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public EditHouseCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        String[] splitArg \u003d args.trim().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        if (splitArg.length !\u003d 2) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditHouseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        String oldHouse \u003d splitArg[0];"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        oldHouse \u003d oldHouse.substring(0, 1).toUpperCase() + oldHouse.substring(1).toLowerCase();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        String newHouse \u003d splitArg[1];"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        newHouse \u003d newHouse.substring(0, 1).toUpperCase() + newHouse.substring(1).toLowerCase();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        return new EditHouseCommand(oldHouse, newHouse);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    };"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanseet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanseet": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 32,
      "weizhang05": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ListGroupCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanseet"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.logic.commands.ListGroupCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.model.grouping.FindGroupPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanseet"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanseet"
        },
        "content": " * Parses input arguments and creates a new ListGroupCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanseet"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanseet"
        },
        "content": "public class ListGroupCommandParser implements Parser\u003cListGroupCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanseet"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ListGroupCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanseet"
        },
        "content": "     * and returns an ListGroupCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanseet"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanseet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public ListGroupCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        String[] splitArgs \u003d args.trim().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        if (splitArgs.length !\u003d 1 || args.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListGroupCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        splitArgs[0] \u003d splitArgs[0].toUpperCase();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        return new ListGroupCommand(new FindGroupPredicate(Arrays.asList(splitArgs[0])), splitArgs[0]);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanseet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanseet": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ListHouseCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanseet"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.logic.commands.ListHouseCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.model.grouping.FindHousePredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanseet"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanseet"
        },
        "content": " * Parses input arguments and creates a new ListHouseCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanseet"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanseet"
        },
        "content": "public class ListHouseCommandParser implements Parser\u003cListHouseCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanseet"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ListGroupCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanseet"
        },
        "content": "     * and returns an ListGroupCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanseet"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanseet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public ListHouseCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        String[] splitArgs \u003d args.trim().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        if (splitArgs.length !\u003d 1 || args.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListHouseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        splitArgs[0] \u003d splitArgs[0].substring(0, 1).toUpperCase() + splitArgs[0].substring(1).toLowerCase();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        return new ListHouseCommand(new FindHousePredicate(Arrays.asList(splitArgs[0])), splitArgs[0]);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanseet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanseet": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ListOglCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.logic.commands.ListOglCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.ogl.FindingOglPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": " * Parses input arguments and creates a new ListOglCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "public class ListOglCommandParser implements Parser\u003cListOglCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ListOglCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "     * and returns an ListOglCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    public ListOglCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        String trimmedArgs \u003d \"OGL\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListOglCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        return new ListOglCommand(new FindingOglPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ssunil3232": 33,
      "weizhang05": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ListParticipantCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.logic.commands.ListParticipantCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.FindingParticipantPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": " * Parses input arguments and creates a new ListParticipantCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "public class ListParticipantCommandParser implements Parser\u003cListParticipantCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ListParticipantCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "     * and returns an ListParticipantCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    public ListParticipantCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        String trimmedArgs \u003d \"Freshman\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListParticipantCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        return new ListParticipantCommand(new FindingParticipantPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ssunil3232": 33,
      "weizhang05": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.commons.Value;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import seedu.address.model.grouping.Group;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Birthday;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Major;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Sex;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * Parses a {@code String sex} into a {@code Sex}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * @throws ParseException if the given {@code sex} is invalid."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public static Sex parseSex(String sex) throws ParseException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        requireNonNull(sex);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        String trimmedSex \u003d sex.trim();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        if (!Sex.isValidSex(trimmedSex)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            throw new ParseException(Sex.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        return new Sex(trimmedSex);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * Parses a {@code String birthday} into a {@code Birthday}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * @throws ParseException if the given {@code birthday} is invalid."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public static Birthday parseBirthday(String birthday) throws ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        requireNonNull(birthday);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        String trimmedBirthday \u003d birthday.trim();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        if (!Birthday.isValidBirthday(trimmedBirthday)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            throw new ParseException(Birthday.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        return new Birthday(trimmedBirthday);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * Parses a {@code String address} into an {@code Major}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public static Major parseMajor(String major) throws ParseException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        requireNonNull(major);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        String trimmedMajor \u003d major.trim();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        if (!Major.isValidMajor(trimmedMajor)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            throw new ParseException(Major.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        return new Major(trimmedMajor);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * Parses a {@code String group} into an {@code Group}."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * @throws ParseException if the given {@code group} is invalid."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public static Group parseGroup(String group) throws ParseException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        requireNonNull(group);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        String trimmedGroup \u003d group.trim().toUpperCase();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        if (!Group.isValidGroup(trimmedGroup)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            throw new ParseException(Group.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        return new Group(trimmedGroup);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public static Set\u003cTag\u003e parseTagsFreshman(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        tagSet.add(parseTag(Value.FRESHMAN));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    public static Set\u003cTag\u003e parseTagsOgl(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        tagSet.add(parseTag(Value.OGL));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 53,
      "ssunil3232": 21,
      "shanseet": 1,
      "-": 113,
      "weizhang05": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SaveChartCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import seedu.address.logic.commands.SaveChartCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tantantan277"
        },
        "content": " * Parses input arguments and creates a new AddGroupCommand object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tantantan277"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "public class SaveChartCommandParser implements Parser\u003cSaveChartCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SaveChartCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * and returns an SaveChartCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public SaveChartCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        String fileName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        if (args.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            fileName \u003d \"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            String[] splitArg \u003d args.trim().split(\" \", 1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            fileName \u003d splitArg[0];"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        return new SaveChartCommand(fileName);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import javafx.collections.ObservableMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.InvalidationListenerManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.grouping.Group;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.grouping.House;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.grouping.UniqueGroupList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.grouping.UniqueHouseList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Participant;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.UniqueParticipantList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " * Duplicates are not allowed (by .isSameParticipant comparison)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private final ObservableMap\u003cString, Integer\u003e ageData \u003d FXCollections.observableHashMap();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private final ObservableMap\u003cString, Integer\u003e majorData \u003d FXCollections.observableHashMap();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private final ObservableMap\u003cString, Integer\u003e sexData \u003d FXCollections.observableHashMap();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    private final UniqueParticipantList participants;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    private final UniqueGroupList groups;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    private final UniqueHouseList houses;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final InvalidationListenerManager invalidationListenerManager \u003d new InvalidationListenerManager();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    *   among constructors."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    */ {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        participants \u003d new UniqueParticipantList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        groups \u003d new UniqueGroupList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        houses \u003d new UniqueHouseList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public AddressBook() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Replaces the contents of the participant list with {@code participants}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * {@code participants} must not contain duplicate participants."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public void setParticipants(List\u003cParticipant\u003e participants) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        this.participants.setParticipants(participants);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Add data of a new participant"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * @param toAdd"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public void addData (Participant toAdd) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        ageData.put(toAdd.getBirthday().getAge(), (!ageData.containsKey(toAdd.getBirthday().getAge())) ? 1"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                : ageData.get(toAdd.getBirthday().getAge()) + 1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        majorData.put(toAdd.getMajor().value, (!majorData.containsKey(toAdd.getMajor().value)) ? 1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                : majorData.get(toAdd.getMajor().value) + 1);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        sexData.put(toAdd.getSex().value, (!sexData.containsKey(toAdd.getSex().value)) ? 1"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                : sexData.get(toAdd.getSex().value) + 1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Delete data of a participant"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public void deleteData (Participant toDelete) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        ageData.put(toDelete.getBirthday().getAge(), ageData.get(toDelete.getBirthday().getAge()) - 1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        majorData.put(toDelete.getMajor().value, majorData.get(toDelete.getMajor().value) - 1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        sexData.put(toDelete.getSex().value, sexData.get(toDelete.getSex().value) - 1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        setParticipants(newData.getParticipantList());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        setGroups(newData.getGroupList());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        setHouses(newData.getHouseList());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        ageData.putAll(newData.getAgeData());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        majorData.putAll(newData.getMajorData());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        sexData.putAll(newData.getSexData());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Replaces the contents of the participant list with {@code participants}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * {@code participants} must not contain duplicate participants."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public void setGroups(List\u003cGroup\u003e groups) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        this.groups.setGroups(groups);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Replaces the contents of the participant list with {@code participants}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * {@code participants} must not contain duplicate participants."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public void setHouses(List\u003cHouse\u003e houses) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        this.houses.setHouses(houses);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    //// participant-level operations"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Returns true if a participant with the same identity as {@code participant} exists in the address book."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public boolean hasParticipant(Participant participant) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        requireNonNull(participant);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        return participants.contains(participant);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Adds a participant to the address book."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * The participant must not already exist in the address book."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public void addParticipant(Participant p) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        participants.add(p);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Replaces the given participant {@code target} in the list with {@code editedParticipant}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * The participant identity of {@code editedParticipant}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * must not be the same as another existing participant in the address book."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public void setParticipant(Participant target, Participant editedParticipant) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        requireNonNull(editedParticipant);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        participants.setParticipant(target, editedParticipant);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public void removeParticipant(Participant key) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        participants.remove(key);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    //// group-level operations"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Returns true if a group with the same identity as {@code group} exists in the address book."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public boolean hasGroup(Group group) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        requireNonNull(group);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        return groups.contains(group);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Adds a group to the address book."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * The group must not already exist in the address book."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public void addGroup(Group g) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        groups.add(g);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Replaces the given group {@code target} in the list with {@code editedGroup}."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * The group identity of {@code editedGroup} must not be the same as another existing group in the address book."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public void setGroup(Group target, Group editedGroup) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        requireNonNull(editedGroup);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        groups.setGroup(target, editedGroup);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public void removeGroup(Group key) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        groups.remove(key);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    * Returns a group with the correct house name"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "shanseet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public Group getGroup(Group group) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        return this.groups.getGroup(group);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    //// house-level operations"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Returns true if a house with the same identity as {@code house} exists in the address book."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public boolean hasHouse(House house) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        requireNonNull(house);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        return houses.contains(house);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Adds a house to the address book."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * The house must not already exist in the address book."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public void addHouse(House house) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        houses.add(house);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Replaces the given house {@code target} in the list with {@code editedHouse}."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * The house identity of {@code editedHouse} must not be the same as another existing house in the address book."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public void setHouse(House target, House editedHouse) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        requireNonNull(editedHouse);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        houses.setHouse(target, editedHouse);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public void removeHouse(House key) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        houses.remove(key);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.removeListener(listener);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "     * Notifies listeners that the address book has been modified."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void indicateModified() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.callListeners(this);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public ObservableMap\u003cString, Integer\u003e getAgeData() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        ageData.clear();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        ObservableMap\u003cString, Integer\u003e rawData \u003d FXCollections.observableHashMap();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        for (Participant p : participants) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            String key \u003d p.getBirthday().getAge();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            Integer value \u003d (rawData.containsKey(key)) ? (rawData.get(key) + 1) : (1);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            rawData.put(key, value);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        for (String key : rawData.keySet()) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            ageData.put(key + \" (\" + rawData.get(key) + \")\", rawData.get(key));"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        return FXCollections.observableMap(ageData);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public ObservableMap\u003cString, Integer\u003e getMajorData() {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        majorData.clear();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        ObservableMap\u003cString, Integer\u003e rawData \u003d FXCollections.observableHashMap();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        for (Participant p : participants) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            String key \u003d p.getMajor().value;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            Integer value \u003d (rawData.containsKey(key)) ? (rawData.get(key) + 1) : (1);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            rawData.put(key, value);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        for (String key : rawData.keySet()) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            majorData.put(key + \" (\" + rawData.get(key) + \")\", rawData.get(key));"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        return FXCollections.unmodifiableObservableMap(majorData);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public ObservableMap\u003cString, Integer\u003e getSexData() {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        sexData.clear();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        ObservableMap\u003cString, Integer\u003e rawData \u003d FXCollections.observableHashMap();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        for (Participant p : participants) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            String key \u003d p.getSex().value;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            Integer value \u003d (rawData.containsKey(key)) ? (rawData.get(key) + 1) : (1);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            rawData.put(key, value);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        for (String key : rawData.keySet()) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            sexData.put(key + \" (\" + rawData.get(key) + \")\", rawData.get(key));"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        return FXCollections.unmodifiableObservableMap(sexData);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        return participants.asUnmodifiableObservableList().size() + \" participants\";"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public ObservableList\u003cParticipant\u003e getParticipantList() {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        return participants.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public ObservableList\u003cGroup\u003e getGroupList() {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        return groups.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public ObservableList\u003cHouse\u003e getHouseList() {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        return houses.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                \u0026\u0026 participants.equals(((AddressBook) other).participants));"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        return participants.hashCode();"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 80,
      "shanseet": 7,
      "-": 153,
      "weizhang05": 105
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import javafx.collections.ObservableMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.grouping.Group;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.model.grouping.House;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Participant;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    Predicate\u003cParticipant\u003e PREDICATE_SHOW_ALL_PARTICIPANTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * Returns the user prefs\u0027 chart storage path."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    Path getChartStoragePath();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Returns true if there are no participant in the address book."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    boolean isEmpty();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Returns the number of participants by age"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    ObservableMap\u003cString, Integer\u003e getAgeData();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Returns the number of participants by sex"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    ObservableMap\u003cString, Integer\u003e getSexData();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Returns the number of participants by major"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    ObservableMap\u003cString, Integer\u003e getMajorData();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * Get the name of image files"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    String getFileName();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * Set the name of image files"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    void setFileName(String fileName);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Returns true if a participant with the same identity as {@code participant} exists in the address book."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    boolean hasParticipant(Participant participant);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Deletes the given participant."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * The participant must exist in the address book."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    void deleteParticipant(Participant target);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Adds the given participant."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * {@code participant} must not already exist in the address book."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    void addParticipant(Participant participant);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Replaces the given participant {@code target} with {@code editedParticipant}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * The participant identity of {@code editedParticipant}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * must not be the same as another existing participant in the address book."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    void setParticipant(Participant target, Participant editedParticipant);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    /** Returns an unmodifiable view of the filtered participant list */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    ObservableList\u003cParticipant\u003e getFilteredParticipantList();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Updates the filter of the filtered participant list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    void updateFilteredParticipantList(Predicate\u003cParticipant\u003e predicate);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo functions \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    /** Returns an unmodifiable view of the undo list */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    ObservableList\u003cString\u003e getUndoList();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    /** Returns an unmodifiable view of the redo list */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    ObservableList\u003cString\u003e getRedoList();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has previous address book states to restore."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canUndoAddressBook();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has undone address book states to restore."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canRedoAddressBook();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previous state."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    void undoAddressBook();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    void redoAddressBook();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current address book state for undo/redo."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    void commitAddressBook();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Selected participant in the filtered participant list."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * null if no participant is selected."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    ReadOnlyProperty\u003cParticipant\u003e selectedParticipantProperty();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Returns the selected participant in the filtered participant list."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * null if no participant is selected."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    Participant getSelectedParticipant();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Sets the selected participant in the filtered participant list."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    void setSelectedParticipant(Participant participant);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Group \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Returns true if a group with the same identity as {@code group} exists in the address book."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    boolean hasGroup(Group group);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Deletes the given group."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * The group must exist in the address book."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    void deleteGroup(Group target);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Adds the given group."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * {@code group} must not already exist in the address book."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    void addGroup(Group group);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Replaces the given group {@code target} with {@code editedGroup}."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * The group identity of {@code editedGroup} must not be the same as another existing group in the address book."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    void setGroup(Group target, Group editedGroup);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    Group getGroup(Group toGet);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    /** Returns an unmodifiable view of the filtered group list */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    ObservableList\u003cGroup\u003e getFilteredGroupList();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Updates the filter of the filtered group list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    void updateFilteredGroupList(Predicate\u003cGroup\u003e predicate);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "shanseet"
        },
        "content": "     * @return number of groups in group list"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    int sizeGroupList();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d House \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Returns a house if it exists"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    House getHouse(House house);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Returns true if a house with the same identity as {@code house} exists in the address book."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    boolean hasHouse(House house);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Deletes the given house."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * The house must exist in the address book."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    void deleteHouse(House target);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Adds the given house."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * {@code house} must not already exist in the address book."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    void addHouse(House house);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Replaces the given house {@code target} with {@code editedHouse}."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * The house identity of {@code editedHouse} must not be the same as another existing house in the address book."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    void setHouse(House target, House editedHouse);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    /** Returns an unmodifiable view of the filtered house list */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    ObservableList\u003cHouse\u003e getFilteredHouseList();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Updates the filter of the filtered house list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    void updateFilteredHouseList(Predicate\u003cHouse\u003e predicate);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    int sizeHouseList();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 29,
      "shanseet": 9,
      "-": 116,
      "weizhang05": 105
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import javafx.collections.ObservableMap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.grouping.Group;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.model.grouping.House;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Participant;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.exceptions.ParticipantNotFoundException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final VersionedAddressBook versionedAddressBook;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    private final FilteredList\u003cParticipant\u003e filteredParticipants;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    private final SimpleObjectProperty\u003cParticipant\u003e selectedParticipant \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    private final FilteredList\u003cGroup\u003e filteredGroups;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    private final SimpleObjectProperty\u003cGroup\u003e selectedGroups \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    private final FilteredList\u003cHouse\u003e filteredHouses;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    private final SimpleObjectProperty\u003cHouse\u003e selectedHouses \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private String undoableCommand;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private String fileName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook \u003d new VersionedAddressBook(addressBook);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        filteredParticipants \u003d new FilteredList\u003c\u003e(versionedAddressBook.getParticipantList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        filteredParticipants.addListener(this::ensureSelectedParticipantIsValid);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        filteredGroups \u003d new FilteredList\u003c\u003e(versionedAddressBook.getGroupList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        filteredGroups.addListener(this::ensureSelectedGroupIsValid);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        filteredHouses \u003d new FilteredList\u003c\u003e(versionedAddressBook.getHouseList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        filteredHouses.addListener(this::ensureSelectedHouseIsValid);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public Path getChartStoragePath() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        return userPrefs.getChartStoragePath();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        return versionedAddressBook.isEmpty();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        undoableCommand \u003d \"Clear all participants\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public boolean hasParticipant(Participant participant) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        requireNonNull(participant);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        return versionedAddressBook.hasParticipant(participant);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public void deleteParticipant(Participant target) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        versionedAddressBook.removeParticipant(target);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        undoableCommand \u003d \"Delete \" + target.getName().fullName;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public void addParticipant(Participant participant) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        versionedAddressBook.addParticipant(participant);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        updateFilteredParticipantList(PREDICATE_SHOW_ALL_PARTICIPANTS);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        undoableCommand \u003d \"Add \" + participant.getName().fullName;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public void setParticipant(Participant target, Participant editedParticipant) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        requireAllNonNull(target, editedParticipant);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        versionedAddressBook.setParticipant(target, editedParticipant);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        undoableCommand \u003d \"Edit \" + editedParticipant.getName().fullName;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Charts Related \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public ObservableMap\u003cString, Integer\u003e getAgeData() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        return versionedAddressBook.getAgeData();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public ObservableMap\u003cString, Integer\u003e getMajorData() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        return versionedAddressBook.getMajorData();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public ObservableMap\u003cString, Integer\u003e getSexData() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        return versionedAddressBook.getSexData();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public String getFileName() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        return fileName;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public void setFileName(String fileName) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        this.fileName \u003d fileName;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Participant List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Undoable Command} backed by the internal list of"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public ObservableList\u003cString\u003e getUndoList() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        return FXCollections.observableArrayList(versionedAddressBook.getUndoList());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Redoable Command} backed by the internal list of"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public ObservableList\u003cString\u003e getRedoList() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        return FXCollections.observableArrayList(versionedAddressBook.getRedoList());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Undoable Command} backed by the internal list of"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public ObservableList\u003cParticipant\u003e getFilteredParticipantList() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        return filteredParticipants;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public void updateFilteredParticipantList(Predicate\u003cParticipant\u003e predicate) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        filteredParticipants.setPredicate(predicate);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canUndo();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canRedo();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undoAddressBook() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redoAddressBook() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commitAddressBook() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        versionedAddressBook.addUndoableCommand(undoableCommand);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Selected participant \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public ReadOnlyProperty\u003cParticipant\u003e selectedParticipantProperty() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        return selectedParticipant;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public Participant getSelectedParticipant() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        return selectedParticipant.getValue();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public void setSelectedParticipant(Participant participant) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        if (participant !\u003d null \u0026\u0026 !filteredParticipants.contains(participant)) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            throw new ParticipantNotFoundException();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        selectedParticipant.setValue(participant);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Group Operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public boolean hasGroup(Group group) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        requireNonNull(group);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        return versionedAddressBook.hasGroup(group);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public void deleteGroup(Group target) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        versionedAddressBook.removeGroup(target);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        undoableCommand \u003d \"Delete Group \" + target.getGroupName();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public void addGroup(Group group) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        versionedAddressBook.addGroup(group);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        updateFilteredParticipantList(PREDICATE_SHOW_ALL_PARTICIPANTS);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        undoableCommand \u003d \"Add Group \" + group.getGroupName();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public void setGroup(Group target, Group editedGroup) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        requireAllNonNull(target, editedGroup);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        versionedAddressBook.setGroup(target, editedGroup);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        undoableCommand \u003d \"Edit Group \" + editedGroup.getGroupName();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public Group getGroup(Group toGet) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        requireNonNull(toGet);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        return versionedAddressBook.getGroup(toGet);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public ObservableList\u003cGroup\u003e getFilteredGroupList() {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        return filteredGroups;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public void updateFilteredGroupList(Predicate\u003cGroup\u003e predicate) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        filteredGroups.setPredicate(predicate);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public int sizeGroupList () {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        return filteredGroups.size();"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d House Operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public House getHouse(House house) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public boolean hasHouse(House house) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        requireNonNull(house);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        return versionedAddressBook.hasHouse(house);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public void deleteHouse(House target) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        versionedAddressBook.removeHouse(target);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        undoableCommand \u003d \"Delete House \" + target.getHouseName();"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public void addHouse(House house) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        versionedAddressBook.addHouse(house);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        updateFilteredParticipantList(PREDICATE_SHOW_ALL_PARTICIPANTS);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        undoableCommand \u003d \"Add House \" + house.getHouseName();"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public void setHouse(House target, House editedHouse) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        requireAllNonNull(target, editedHouse);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        versionedAddressBook.setHouse(target, editedHouse);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        undoableCommand \u003d \"Edit House \" + editedHouse.getHouseName();"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public ObservableList\u003cHouse\u003e getFilteredHouseList() {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        return filteredHouses;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public void updateFilteredHouseList(Predicate\u003cHouse\u003e predicate) {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        filteredHouses.setPredicate(predicate);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public int sizeHouseList() {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        return filteredHouses.size();"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Ensures {@code selectedParticipant} is a valid participant in {@code filteredParticipants}."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    private void ensureSelectedParticipantIsValid(ListChangeListener.Change\u003c? extends Participant\u003e change) {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "        while (change.next()) {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            if (selectedParticipant.getValue() \u003d\u003d null) {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                // null is always a valid selected participant, so we do not need to check that it is valid anymore."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            boolean wasSelectedParticipantReplaced \u003d change.wasReplaced()"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                    \u0026\u0026 change.getAddedSize() \u003d\u003d change.getRemovedSize()"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                    \u0026\u0026 change.getRemoved().contains(selectedParticipant.getValue());"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            if (wasSelectedParticipantReplaced) {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                // Update selectedParticipant to its new value."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                int index \u003d change.getRemoved().indexOf(selectedParticipant.getValue());"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                selectedParticipant.setValue(change.getAddedSubList().get(index));"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            boolean wasSelectedParticipantRemoved \u003d change.getRemoved().stream()"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                    .anyMatch(removedParticipant -\u003e selectedParticipant"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                    .getValue().isSameParticipant(removedParticipant));"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            if (wasSelectedParticipantRemoved) {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                // Select the participant that came before it in the list,"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                // or clear the selection if there is no such participant."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                selectedParticipant.setValue(change.getFrom() \u003e 0 ? change.getList().get(change.getFrom() - 1) : null);"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Ensures {@code selectedGroup} is a valid group in {@code filteredGroups}."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     */"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    private void ensureSelectedGroupIsValid(ListChangeListener.Change\u003c? extends Group\u003e change) {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        while (change.next()) {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            if (selectedGroups.getValue() \u003d\u003d null) {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                // null is always a valid selected group, so we do not need to check that it is valid anymore."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            }"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            boolean wasSelectedGroupReplaced \u003d change.wasReplaced() \u0026\u0026 change.getAddedSize() \u003d\u003d change.getRemovedSize()"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                    \u0026\u0026 change.getRemoved().contains(selectedGroups.getValue());"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            if (wasSelectedGroupReplaced) {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                // Update selectedGroups to its new value."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                int index \u003d change.getRemoved().indexOf(selectedGroups.getValue());"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                selectedGroups.setValue(change.getAddedSubList().get(index));"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            }"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            boolean wasSelectedGroupRemoved \u003d change.getRemoved().stream()"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                    .anyMatch(removedGroup -\u003e selectedGroups.getValue().isSameGroup(removedGroup));"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            if (wasSelectedGroupRemoved) {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                // Select the group that came before it in the list,"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                // or clear the selection if there is no such group."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                selectedGroups.setValue(change.getFrom() \u003e 0 ? change.getList().get(change.getFrom() - 1) : null);"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            }"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Ensures {@code selectedHouse} is a valid house in {@code filteredHouses}."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    private void ensureSelectedHouseIsValid(ListChangeListener.Change\u003c? extends House\u003e change) {"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "        while (change.next()) {"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            if (selectedHouses.getValue() \u003d\u003d null) {"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                // null is always a valid selected house, so we do not need to check that it is valid anymore."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            boolean wasSelectedHouseReplaced \u003d change.wasReplaced() \u0026\u0026 change.getAddedSize() \u003d\u003d change.getRemovedSize()"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                    \u0026\u0026 change.getRemoved().contains(selectedHouses.getValue());"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            if (wasSelectedHouseReplaced) {"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                // Update selectedHouses to its new value."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                int index \u003d change.getRemoved().indexOf(selectedHouses.getValue());"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                selectedHouses.setValue(change.getAddedSubList().get(index));"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            boolean wasSelectedHouseRemoved \u003d change.getRemoved().stream()"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                    .anyMatch(removedHouse -\u003e selectedHouses.getValue().isSameHouse(removedHouse));"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            if (wasSelectedHouseRemoved) {"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                // Select the house that came before it in the list,"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                // or clear the selection if there is no such house."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                selectedHouses.setValue(change.getFrom() \u003e 0 ? change.getList().get(change.getFrom() - 1) : null);"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.equals(other.versionedAddressBook)"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                \u0026\u0026 filteredParticipants.equals(other.filteredParticipants)"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                \u0026\u0026 Objects.equals(selectedParticipant.get(), other.selectedParticipant.get());"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 52,
      "shanseet": 29,
      "-": 220,
      "weizhang05": 174
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.Observable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import javafx.collections.ObservableMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.grouping.Group;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.grouping.House;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Participant;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook extends Observable {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    ObservableList\u003cParticipant\u003e getParticipantList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * Return an unmodifiable view of the persons data"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * by age, major and sex."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    ObservableMap\u003cString, Integer\u003e getAgeData();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    ObservableMap\u003cString, Integer\u003e getMajorData();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    ObservableMap\u003cString, Integer\u003e getSexData();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Returns an unmodifiable view of the groups list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * This list will not contain any duplicate group."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    ObservableList\u003cGroup\u003e getGroupList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Returns an unmodifiable view of the house list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * This list will not contain any duplicate house."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    ObservableList\u003cHouse\u003e getHouseList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 10,
      "-": 17,
      "weizhang05": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    Path getChartStoragePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 2,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private Path chartStoragePath \u003d Paths.get(\"charts\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public Path getChartStoragePath() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        File theDir \u003d new File(chartStoragePath.toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        // if the directory does not exist, create it"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        if (!theDir.exists()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            theDir.mkdir();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        return chartStoragePath;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 12,
      "-": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/model/VersionedAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import javafx.collections.ObservableMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code AddressBook} that keeps track of its own history."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionedAddressBook extends AddressBook {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private ArrayList\u003cString\u003e redoList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private ArrayList\u003cString\u003e undoList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cReadOnlyAddressBook\u003e addressBookStateList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public VersionedAddressBook(ReadOnlyAddressBook initialState) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStateList.add(new AddressBook(initialState));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        return addressBookStateList.get(currentStatePointer).getParticipantList().isEmpty();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public ObservableMap\u003cString, Integer\u003e getAgeData() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        return addressBookStateList.get(currentStatePointer).getAgeData();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public ObservableMap\u003cString, Integer\u003e getMajorData() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        return addressBookStateList.get(currentStatePointer).getMajorData();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public ObservableMap\u003cString, Integer\u003e getSexData() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        return addressBookStateList.get(currentStatePointer).getSexData();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public void addUndoableCommand (String undoableCommand) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        undoList.add(0, undoableCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves a copy of the current {@code AddressBook} state at the end of the state list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Undone states are removed from the state list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        redoList.clear();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStateList.add(new AddressBook(this));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStateList.subList(currentStatePointer + 1, addressBookStateList.size()).clear();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the address book to its previous state."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        if (undoList.size() \u003e 0) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            redoList.add(0, undoList.get(0));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            undoList.remove(0);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(addressBookStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public ArrayList\u003cString\u003e getUndoList() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        return undoList;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the address book to its previously undone state."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        if (redoList.size() \u003e 0) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            undoList.add(0, redoList.get(0));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            redoList.remove(0);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(addressBookStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public ArrayList\u003cString\u003e getRedoList() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        return redoList;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code undo()} has address book states to undo."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code redo()} has address book states to redo."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return currentStatePointer \u003c addressBookStateList.size() - 1;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof VersionedAddressBook)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook otherVersionedAddressBook \u003d (VersionedAddressBook) other;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return super.equals(otherVersionedAddressBook)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 addressBookStateList.equals(otherVersionedAddressBook.addressBookStateList)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 currentStatePointer \u003d\u003d otherVersionedAddressBook.currentStatePointer;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Thrown when trying to {@code undo()} but can\u0027t."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class NoUndoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        private NoUndoableStateException() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            super(\"Current state pointer at start of addressBookState list, unable to undo.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Thrown when trying to {@code redo()} but can\u0027t."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class NoRedoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        private NoRedoableStateException() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            super(\"Current state pointer at end of addressBookState list, unable to redo.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 43,
      "-": 110,
      "weizhang05": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/grouping/FindGroupPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanseet"
        },
        "content": "package seedu.address.model.grouping;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Participant;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanseet"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanseet"
        },
        "content": "* Tests that a {@code Participant}\u0027s {@code Group} group name matches the group name given."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanseet"
        },
        "content": "*/"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "public class FindGroupPredicate implements Predicate\u003cParticipant\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    private List\u003cString\u003e emptyString \u003d Arrays.asList(\"EMPTY\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public FindGroupPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public boolean test(Participant participant) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        if (keywords.equals(emptyString)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            return participant.getGroup().getGroupName().isEmpty();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                .allMatch(keyword-\u003e StringUtil.containsWordIgnoreCase(participant.getGroup().getGroupName(), keyword));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                || (other instanceof FindGroupPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                \u0026\u0026 keywords.equals(((FindGroupPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanseet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanseet": 32,
      "weizhang05": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/grouping/FindHousePredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanseet"
        },
        "content": "package seedu.address.model.grouping;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Participant;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanseet"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanseet"
        },
        "content": " * Tests that a {@code Participant}\u0027s {@code Group} house name matches the house name given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanseet"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "public class FindHousePredicate implements Predicate\u003cParticipant\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public FindHousePredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public boolean test(Participant participant) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        if (participant.getGroup().getGroupName().isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                .allMatch(keyword-\u003e StringUtil.containsWordIgnoreCase(participant.getGroup().getHouseName(), keyword));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                || (other instanceof FindHousePredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                \u0026\u0026 keywords.equals(((FindHousePredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanseet"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "shanseet": 31,
      "weizhang05": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/grouping/Group.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanseet"
        },
        "content": "package seedu.address.model.grouping;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanseet"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " * Represents a participant\u0027s camp grouping"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanseet"
        },
        "content": " * Can only be created within a house that has already been created."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanseet"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanseet"
        },
        "content": "public class Group {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Group can take any value\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    private String groupName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    private String houseName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public Group(String groupName) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        this(groupName, null);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public Group(String groupName, String houseName) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        this.houseName \u003d houseName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        this.groupName \u003d groupName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public String getGroupName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        return groupName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanseet"
        },
        "content": "     * Returns true if it\u0027s a valid group. Always true (can be empty)."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * @param test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public static boolean isValidGroup(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Returns true if both groups of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * This defines a weaker notion of equality between two groups."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public boolean isSameGroup(Group otherGroup) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        return this.equals(otherGroup);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d House Operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public String getHouseName() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        return houseName;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public void setHouseName(String houseName) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        this.houseName \u003d houseName;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Participants Operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        return this.groupName;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                || (other instanceof Group // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                \u0026\u0026 this.getGroupName().equals(((Group) other).getGroupName())); // state check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shanseet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 17,
      "shanseet": 24,
      "weizhang05": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/model/grouping/House.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanseet"
        },
        "content": "package seedu.address.model.grouping;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanseet"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanseet"
        },
        "content": " * Represents a house in a camp."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanseet"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanseet"
        },
        "content": "public class House {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    private String houseName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanseet"
        },
        "content": "     * Constructs an {@code House}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanseet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public House (String name) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        houseName \u003d name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public String getHouseName() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        return houseName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public void setHouseName(String houseName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        this.houseName \u003d houseName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Returns true if both houses of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * This defines a weaker notion of equality between two houses."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public boolean isSameHouse(House otherHouse) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        if (otherHouse \u003d\u003d this) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        return otherHouse !\u003d null"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                \u0026\u0026 otherHouse.equals(this);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        return obj \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                || (obj instanceof House // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                \u0026\u0026 this.getHouseName().equals(((House) obj).getHouseName())); // state check"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanseet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanseet": 23,
      "weizhang05": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/model/grouping/UniqueGroupList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "package seedu.address.model.grouping;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.exceptions.DuplicateParticipantException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.exceptions.ParticipantNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " * A list of groups that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " * A group is considered unique by comparing using {@code Group#isSameGroup(Group)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " * As such, adding and updating of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " * groups uses Group#isSameGroup(Group) for equality so as to ensure that the Group being added or updated is"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " * unique in terms of identity in the UniqueGroupList."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " * However, the removal of a group uses Group#equals(Object) so"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " * as to ensure that the group with exactly the same fields will be removed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " * @see Group#isSameGroup(Group)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "public class UniqueGroupList implements Iterable\u003cGroup\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    private final ObservableList\u003cGroup\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    private final ObservableList\u003cGroup\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Returns true if the list contains an equivalent group as the given argument."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public boolean contains(Group toCheck) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameGroup);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Adds a group to the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * The group must not already exist in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public void add(Group toAdd) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            throw new DuplicateParticipantException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Replaces the group {@code target} in the list with {@code editedGroup}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * The group identity of {@code editedGroup} must not be the same as another existing group in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public void setGroup(Group target, Group editedPerson) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            throw new ParticipantNotFoundException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        if (!target.isSameGroup(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            throw new DuplicateParticipantException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public void setGroup(UniqueGroupList replacement) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Removes the equivalent group from the list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * The group must exist in the list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public void remove(Group toRemove) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            throw new ParticipantNotFoundException();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Replaces the contents of this list with {@code groups}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * {@code groups} must not contain duplicate groups."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public void setGroups(List\u003cGroup\u003e groups) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        requireAllNonNull(groups);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        if (!groupsAreUnique(groups)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            throw new DuplicateParticipantException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        internalList.setAll(groups);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shanseet"
        },
        "content": "     * Gets a group in the list based on the group name"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shanseet"
        },
        "content": "     * Group name must exist in the list"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shanseet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public Group getGroup(Group toFind) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        Group newGroup \u003d toFind;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        for (int i \u003d 0; i \u003c internalList.size(); i++) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            if (internalList.get(i).getGroupName().equals(toFind.getGroupName())) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                newGroup.setHouseName(internalList.get(i).getHouseName());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        return newGroup;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public ObservableList\u003cGroup\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public Iterator\u003cGroup\u003e iterator() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                || (other instanceof UniqueGroupList // instanceof handles nulls"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueGroupList) other).internalList));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Returns true if {@code groups} contains only unique groups."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    private boolean groupsAreUnique(List\u003cGroup\u003e groups) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        for (int i \u003d 0; i \u003c groups.size() - 1; i++) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            for (int j \u003d i + 1; j \u003c groups.size(); j++) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                if (groups.get(i).isSameGroup(groups.get(j))) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanseet": 14,
      "weizhang05": 140
    }
  },
  {
    "path": "src/main/java/seedu/address/model/grouping/UniqueHouseList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "package seedu.address.model.grouping;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.exceptions.DuplicateParticipantException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.exceptions.ParticipantNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " * A list of houses that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " * A house is considered unique by comparing using {@code House#isSameHouse(House)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " * As such, adding and updating of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " * houses uses House#isSameHouse(House) for equality so as to ensure that the House being added or updated is"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " * unique in terms of identity in the UniqueHouseList."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " * However, the removal of a house uses House#equals(Object) so"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " * as to ensure that the house with exactly the same fields will be removed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " * @see House#isSameHouse(House)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "public class UniqueHouseList implements Iterable\u003cHouse\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    private final ObservableList\u003cHouse\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    private final ObservableList\u003cHouse\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Returns true if the list contains an equivalent house as the given argument."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public boolean contains(House toCheck) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameHouse);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Adds a house to the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * The house must not already exist in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public void add(House toAdd) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            throw new DuplicateParticipantException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Replaces the house {@code target} in the list with {@code editedHouse}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * The house identity of {@code editedHouse} must not be the same as another existing house in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public void setHouse(House target, House editedHouse) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        requireAllNonNull(target, editedHouse);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            throw new ParticipantNotFoundException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        if (!target.isSameHouse(editedHouse) \u0026\u0026 contains(editedHouse)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            throw new DuplicateParticipantException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        internalList.set(index, editedHouse);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Removes the equivalent house from the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * The house must exist in the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public void remove(House toRemove) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            throw new ParticipantNotFoundException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Replaces the contents of this list with {@code houses}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * {@code houses} must not contain duplicate houses."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public void setHouses(List\u003cHouse\u003e houses) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        requireAllNonNull(houses);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        if (!housesAreUnique(houses)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            throw new DuplicateParticipantException();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        internalList.setAll(houses);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public void setHouses(UniqueHouseList replacement) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public ObservableList\u003cHouse\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public Iterator\u003cHouse\u003e iterator() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                || (other instanceof UniqueHouseList // instanceof handles nulls"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueHouseList) other).internalList));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Returns true if {@code houses} contains only unique houses."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    private boolean housesAreUnique(List\u003cHouse\u003e houses) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        for (int i \u003d 0; i \u003c houses.size() - 1; i++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            for (int j \u003d i + 1; j \u003c houses.size(); j++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                if (houses.get(i).isSameHouse(houses.get(j))) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weizhang05": 140
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ogl/FindingOglPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "package seedu.address.model.ogl;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Participant;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " * Tests that a {@code Participant}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "public class FindingOglPredicate implements Predicate\u003cParticipant\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    public FindingOglPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public boolean test(Participant participant) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                .allMatch(keyword-\u003e StringUtil.containsWordIgnoreCase(participant.getStringTags(), keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                || (other instanceof FindingOglPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                \u0026\u0026 keywords.equals(((FindingOglPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ssunil3232": 26,
      "weizhang05": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ogl/Ogl.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "package seedu.address.model.ogl;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import seedu.address.model.grouping.Group;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Birthday;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Email;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Major;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Participant;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Phone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Sex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " * OGL for FOP."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "public class Ogl extends Participant {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     *  @param name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * @param sex"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * @param birthday"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * @param phone"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * @param email"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * @param major"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * @param group"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * @param tags"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public Ogl(Name name, Sex sex, Birthday birthday, Phone phone, Email email,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "               Major major, Group group, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        super(name, sex, birthday, phone, email, major, group, tags);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 10,
      "weizhang05": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/model/participant/Birthday.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "package seedu.address.model.participant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import java.time.Year;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.commons.Value;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " * Represents a Participant\u0027s birthday in the address book"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tantantan277"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "public class Birthday {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            \"Birthday should contain eight numbers in the format of DDMMYYYY and must be a valid date.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{8,}\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public Birthday(String birthday) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        requireNonNull(birthday);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        checkArgument(isValidBirthday(birthday), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        value \u003d birthday;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * Return true if a given string is a valid sex"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public static boolean isValidBirthday(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        if (!test.matches(VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        int date \u003d Integer.parseInt(test.substring(0, 2));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        int month \u003d Integer.parseInt(test.substring(2, 4));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        int year \u003d Integer.parseInt(test.substring(4));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        if (date \u003e 31 || date \u003c 1) { //invalid date"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        if (month \u003e 12 || month \u003c 1) { //invalid month"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "         * Valid DOB is based on the following:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "         * - Nobody is born in the future"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "         * - No undergraduate is older than 50 years old"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "         */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        if (year \u003e Year.now().getValue() || year \u003c (Year.now().getValue() - Value.MAX_AGE)) { //invalid year"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public String getAge() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        int yearOfBirth \u003d Integer.parseInt(value.substring(4));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        return Integer.toString(Calendar.getInstance().get(Calendar.YEAR) - yearOfBirth);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public String getFormattedBirthday () {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        return value.substring(0, 2) + \"/\" + value.substring(2, 4) + \"/\" + value.substring(4, 8);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                || (other instanceof Birthday // instanceof handles nulls"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                \u0026\u0026 value.equals(((Birthday) other).value)); // state check"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 48,
      "shanseet": 17,
      "weizhang05": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/participant/Email.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "package seedu.address.model.participant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " * Represents a Participant\u0027s email in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 65,
      "weizhang05": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/participant/FindingParticipantPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "package seedu.address.model.participant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " * Tests that a {@code Participant}\u0027s {@code Tag} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "public class FindingParticipantPredicate implements Predicate\u003cParticipant\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    public FindingParticipantPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public boolean test(Participant participant) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                .allMatch(keyword-\u003e StringUtil.containsWordIgnoreCase(participant.getStringTags(), keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                || (other instanceof FindingParticipantPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                \u0026\u0026 keywords.equals(((FindingParticipantPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ssunil3232": 26,
      "weizhang05": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/participant/Major.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "package seedu.address.model.participant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " * Represents a Participant\u0027s address in the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tantantan277"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidMajor(String)} (String)}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "public class Major {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Major must be one of the five majors of NUS School of Computing:\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            + \" Computer Science, Information System, Computer Engineering, Business Analytics or Information Security\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private static final ArrayList\u003cString\u003e validMajorCS \u003d new ArrayList\u003c\u003e(Arrays.asList(\"COMPUTER SCIENCE\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            \"COMSCI\", \"CS\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private static final ArrayList\u003cString\u003e validMajorIS \u003d new ArrayList\u003c\u003e(Arrays.asList(\"INFORMATION SYSTEM\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            \"INFORMATION SYSTEMS\", \"INFOSYS\", \"IS\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private static final ArrayList\u003cString\u003e validMajorCEG \u003d new ArrayList\u003c\u003e(Arrays.asList(\"COMPUTER ENGINEERING\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            \"COMENG\", \"CEG\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private static final ArrayList\u003cString\u003e validMajorISC \u003d new ArrayList\u003c\u003e(Arrays.asList(\"INFORMATION SECURITY\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            \"INFOSEC\", \"ISC\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private static final ArrayList\u003cString\u003e validMajorBA \u003d new ArrayList\u003c\u003e(Arrays.asList(\"BUSINESS ANALYTIC\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            \"BUSINESS ANALYTICS\", \"BIZANA\", \"BIZANAL\", \"BA\", \"BZA\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * Constructs an {@code Major}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * @param major A valid address."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public Major(String major) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        requireNonNull(major);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        checkArgument(isValidMajor(major), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        String cleanMajor \u003d \"\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        if (validMajorBA.contains(major.toUpperCase())) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            cleanMajor \u003d \"BA\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        } else if (validMajorCS.contains(major.toUpperCase())) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            cleanMajor \u003d \"CS\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        } else if (validMajorCEG.contains(major.toUpperCase())) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            cleanMajor \u003d \"CEG\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        } else if (validMajorIS.contains(major.toUpperCase())) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            cleanMajor \u003d \"IS\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        } else if (validMajorISC.contains(major.toUpperCase())) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            cleanMajor \u003d \"ISC\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        value \u003d cleanMajor;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * Returns true if a given string is a valid major."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public static boolean isValidMajor(String test) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        return test.matches(VALIDATION_REGEX) \u0026\u0026 (validMajorCS.contains(test.toUpperCase())"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                || validMajorIS.contains(test.toUpperCase()) || validMajorISC.contains(test.toUpperCase())"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                || validMajorCEG.contains(test.toUpperCase()) || validMajorBA.contains(test.toUpperCase()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * Return full major name"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public String getFullMajor() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        switch (value) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        case \"IS\":"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            return \"Information System\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        case \"CS\":"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            return \"Computer Science\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        case \"ISC\":"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            return \"Information Security\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        case \"CEG\":"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            return \"Computer Engineering\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        case \"BA\":"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            return \"Business Analytics\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                || (other instanceof Major // instanceof handles nulls"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                \u0026\u0026 value.equals(((Major) other).value)); // state check"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 65,
      "-": 35,
      "weizhang05": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/participant/Name.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "package seedu.address.model.participant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " * Represents a Participant\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 57,
      "weizhang05": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/participant/NameContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "package seedu.address.model.participant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " * Tests that a {@code Participant}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cParticipant\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public boolean test(Participant participant) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(participant.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 26,
      "weizhang05": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/participant/Participant.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "package seedu.address.model.participant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import seedu.address.model.grouping.Group;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " * Represents a Participant in the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "public class Participant {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private final Sex sex;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private final Birthday birthday;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private final Major major;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private final Group group;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public Participant(Name name, Sex sex, Birthday birthday, Phone phone, Email email,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                       Major major, Group group, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        requireAllNonNull(name, phone, email, major, tags);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        this.sex \u003d sex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        this.birthday \u003d birthday;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        this.group \u003d group;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public Sex getSex() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        return sex;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public Birthday getBirthday() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        return birthday;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public Major getMajor() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public Group getGroup() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        return group;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    public String getStringTags () {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        return getTags().toString().replace(\"[\" , \"\").replace(\"]\" , \"\")"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                .replace(\",\" , \"\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public boolean isSameParticipant(Participant otherParticipant) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        if (otherParticipant \u003d\u003d this) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        return otherParticipant !\u003d null"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                \u0026\u0026 otherParticipant.getName().equals(getName())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                \u0026\u0026 (otherParticipant.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                || otherParticipant.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                || otherParticipant.getBirthday().equals(getBirthday()));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        if (!(other instanceof Participant)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Participant otherParticipant \u003d (Participant) other;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        return otherParticipant.getName().equals(getName())"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                \u0026\u0026 otherParticipant.getSex().equals(getSex())"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                \u0026\u0026 otherParticipant.getBirthday().equals((getBirthday()))"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                \u0026\u0026 otherParticipant.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                \u0026\u0026 otherParticipant.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                \u0026\u0026 otherParticipant.getMajor().equals(getMajor())"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                \u0026\u0026 otherParticipant.getGroup().equals(getGroup())"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                \u0026\u0026 otherParticipant.getTags().equals(getTags());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        return Objects.hash(name, sex, birthday, phone, email, major, tags);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                .append(\" Sex: \")"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                .append(getSex())"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                .append(\" Birthday: \")"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                .append(getBirthday())"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                .append(\" Major: \")"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                .append(getMajor())"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                .append(\" Group: \")"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                .append(getGroup())"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 34,
      "ssunil3232": 4,
      "-": 96,
      "weizhang05": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/model/participant/Phone.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "package seedu.address.model.participant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " * Represents a Participant\u0027s phone number in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            \"Phone numbers should only contain numbers, and should be at least 8 digits long. Phone numbers can \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            + \"start with a \u0027+\u0027\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[+]?\\\\d{8,15}\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanseet": 3,
      "-": 49,
      "weizhang05": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/participant/Sex.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "package seedu.address.model.participant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " * Represents a Participant\u0027s sex in the address book"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tantantan277"
        },
        "content": " * Can only accept two values M or F"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tantantan277"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "public class Sex {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            \"Sex should be either M, F or O, which stands for Male, Female, and Other\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private static final ArrayList\u003cString\u003e validSex \u003d new ArrayList\u003c\u003e(Arrays.asList(\"MALE\", \"FEMALE\", \"OTHER\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            \"M\", \"F\", \"O\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public Sex(String sex) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        requireNonNull(sex);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        checkArgument(isValidSex(sex), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        String cleanSex \u003d \"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        if (sex.equalsIgnoreCase(\"F\") || sex.equalsIgnoreCase(\"FEMALE\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            cleanSex \u003d \"Female\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        } else if (sex.equalsIgnoreCase(\"M\") || sex.equalsIgnoreCase(\"MALE\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            cleanSex \u003d \"Male\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            cleanSex \u003d \"Other\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        value \u003d cleanSex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * Return true if a given string is a valid sex"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public static boolean isValidSex(String test) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        return test.matches(VALIDATION_REGEX) \u0026\u0026 validSex.contains(test.toUpperCase());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                || (other instanceof Sex // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                \u0026\u0026 value.equals(((Sex) other).value)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 53,
      "weizhang05": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/participant/UniqueParticipantList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "package seedu.address.model.participant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.exceptions.DuplicateParticipantException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.exceptions.ParticipantNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " * A participant is considered unique by comparing using {@code Participant#isSameParticipant(Participant)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " * As such, adding and updating of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " * persons uses Participant#isSameParticipant(Participant) for equality so as"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " * to ensure that the participant being added or updated is"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " * unique in terms of identity in the UniqueParticipantList."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " * However, the removal of a participant uses Participant#equals(Object) so"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " * as to ensure that the participant with exactly the same fields will be removed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " * @see Participant#isSameParticipant(Participant)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "public class UniqueParticipantList implements Iterable\u003cParticipant\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    private final ObservableList\u003cParticipant\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    private final ObservableList\u003cParticipant\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Returns true if the list contains an equivalent participant as the given argument."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public boolean contains(Participant toCheck) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameParticipant);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Adds a participant to the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * The participant must not already exist in the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public void add(Participant toAdd) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            throw new DuplicateParticipantException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Replaces the participant {@code target} in the list with {@code editedParticipant}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * The participant identity of {@code editedParticipant}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * must not be the same as another existing participant in the list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public void setParticipant(Participant target, Participant editedParticipant) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        requireAllNonNull(target, editedParticipant);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            throw new ParticipantNotFoundException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        if (!target.isSameParticipant(editedParticipant) \u0026\u0026 contains(editedParticipant)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            throw new DuplicateParticipantException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        internalList.set(index, editedParticipant);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Removes the equivalent participant from the list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * The participant must exist in the list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public void remove(Participant toRemove) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            throw new ParticipantNotFoundException();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public void setParticipants(UniqueParticipantList replacement) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Replaces the contents of this list with {@code participants}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * {@code participants} must not contain duplicate participants."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public void setParticipants(List\u003cParticipant\u003e participants) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        requireAllNonNull(participants);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        if (!participantsAreUnique(participants)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            throw new DuplicateParticipantException();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        internalList.setAll(participants);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public ObservableList\u003cParticipant\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public Iterator\u003cParticipant\u003e iterator() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                || (other instanceof UniqueParticipantList // instanceof handles nulls"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueParticipantList) other).internalList));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Returns true if {@code participants} contains only unique participants."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    private boolean participantsAreUnique(List\u003cParticipant\u003e participants) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        for (int i \u003d 0; i \u003c participants.size() - 1; i++) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            for (int j \u003d i + 1; j \u003c participants.size(); j++) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                if (participants.get(i).isSameParticipant(participants.get(j))) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weizhang05": 141
    }
  },
  {
    "path": "src/main/java/seedu/address/model/participant/exceptions/DuplicateParticipantException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "package seedu.address.model.participant.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "public class DuplicateParticipantException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public DuplicateParticipantException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        super(\"Operation would result in duplicate persons\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 8,
      "weizhang05": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/participant/exceptions/ParticipantNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "package seedu.address.model.participant.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " * Signals that the operation is unable to find the specified participant."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "public class ParticipantNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "weizhang05": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/privilege/Privilege.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "package seedu.address.model.privilege;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " * Determines the level of privilege of the student based on the privilege assigned."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " * Smaller number means more privilege."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " * e.g. HOUSE_HEAD will have more privilege compared to OGL (1 is less than 2)."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "public enum Privilege {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    PROJECT_DIRECTOR(0),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    HOUSE_HEAD(1),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    OGL(2),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    PARTICIPANTS(3);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    private final int privilegeNumber;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    Privilege(int privilegeNumber) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        this.privilegeNumber \u003d privilegeNumber;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weizhang05": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.commons.Value;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import seedu.address.model.grouping.Group;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.grouping.House;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Birthday;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Major;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Participant;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Sex;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public static Participant[] getSampleFreshmen() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        return new Participant[] {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            new Participant(new Name(\"Alex Yeoh\"), new Sex(\"M\"), new Birthday(\"01021996\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                    new Phone(\"87438807\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                    new Email(\"alexyeoh@example.com\"), new Major(\"Computer Science\"), new Group(\"\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                    getTagSet(Value.FRESHMAN)),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            new Participant(new Name(\"Bernice Yu\"), new Sex(\"M\"), new Birthday(\"01021996\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                    new Phone(\"99272758\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                    new Email(\"berniceyu@example.com\"), new Major(\"Information System\"), new Group(\"\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                    getTagSet(Value.FRESHMAN)),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            new Participant(new Name(\"Charlotte Oliveiro\"), new Sex(\"M\"), new Birthday(\"01021996\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                    new Phone(\"93210283\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                    new Email(\"charlotte@example.com\"), new Major(\"Computer Engineering\"), new Group(\"\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                    getTagSet(Value.FRESHMAN)),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            new Participant(new Name(\"David Li\"), new Sex(\"M\"), new Birthday(\"01021996\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                    new Phone(\"91031282\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                    new Email(\"lidavid@example.com\"), new Major(\"Business Analytic\"), new Group(\"\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                    getTagSet(Value.FRESHMAN)),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            new Participant(new Name(\"Irfan Ibrahim\"), new Sex(\"M\"), new Birthday(\"01021996\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                    new Phone(\"92492021\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                    new Email(\"irfan@example.com\"), new Major(\"Information Security\"), new Group(\"\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                    getTagSet(Value.FRESHMAN)),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            new Participant(new Name(\"Roy Balakrishnan\"), new Sex(\"M\"), new Birthday(\"01021996\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                    new Phone(\"92624417\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                    new Email(\"royb@example.com\"), new Major(\"Computer Science\"), new Group(\"\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                    getTagSet(Value.FRESHMAN))"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        };"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public static Participant[] getSampleOgls() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        return new Participant[] {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            new Participant(new Name(\"OGL 1\"), new Sex(\"M\"), new Birthday(\"01021996\"),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                    new Phone(\"91234567\"),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                    new Email(\"ogl1@example.com\"), new Major(\"Computer Science\"), new Group(\"\"),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                    getTagSet(Value.OGL)),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            new Participant(new Name(\"OGL 2\"), new Sex(\"F\"), new Birthday(\"01021996\"),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                    new Phone(\"98765432\"),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                    new Email(\"ogl2@example.com\"), new Major(\"Information Security\"), new Group(\"\"),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                    getTagSet(Value.OGL)),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            new Participant(new Name(\"OGL 3\"), new Sex(\"M\"), new Birthday(\"01021996\"),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                    new Phone(\"81234567\"),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                    new Email(\"ogl3@example.com\"), new Major(\"Computer Engineering\"), new Group(\"\"),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                    getTagSet(Value.OGL)),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            new Participant(new Name(\"OGL 4\"), new Sex(\"F\"), new Birthday(\"01021996\"),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                    new Phone(\"87654321\"),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                    new Email(\"ogl4@example.com\"), new Major(\"Business Analytic\"), new Group(\"\"),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                    getTagSet(Value.OGL))"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public static House[] getSampleHouses() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        return new House[]{"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            new House(\"Red\"),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            new House(\"Blue\"),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        };"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public static Group[] getSampleGroups() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        return new Group[]{"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            new Group(\"R1\", \"Red\"),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            new Group(\"R2\", \"Red\"),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            new Group(\"B1\", \"Blue\"),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            new Group(\"B2\", \"Blue\"),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        for (Participant sampleParticipant : getSampleFreshmen()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            sampleAb.addParticipant(sampleParticipant);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        for (Participant sampleParticipant : getSampleOgls()) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            sampleAb.addParticipant(sampleParticipant);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        for (House sampleHouse : getSampleHouses()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            sampleAb.addHouse(sampleHouse);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        for (Group sampleGroup : getSampleGroups()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            sampleAb.addGroup(sampleGroup);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 8,
      "shanseet": 6,
      "-": 37,
      "weizhang05": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedGroup.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.grouping.Group;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " * Jackson-friendly version of {@link Group}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "public class JsonAdaptedGroup {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Group\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    private final String groupName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    private final String houseName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Constructs a {@code JsonAdaptedGroup} with the given participant details."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public JsonAdaptedGroup(@JsonProperty(\"groupName\") String groupName,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                            @JsonProperty(\"houseName\") String houseName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        this.groupName \u003d groupName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        this.houseName \u003d houseName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Converts a given {@code Group} into this class for Jackson use."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public JsonAdaptedGroup(Group source) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        groupName \u003d source.getGroupName();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        houseName \u003d source.getHouseName();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Converts this Jackson-friendly adapted participant object into the model\u0027s {@code Group} object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted participant."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public Group toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        if (groupName \u003d\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        if (!Name.isValidName(groupName)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        if (!Name.isValidName(houseName)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        return new Group(groupName, houseName);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanseet": 1,
      "weizhang05": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedHouse.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.grouping.House;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " * Jackson-friendly version of {@link House}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "public class JsonAdaptedHouse {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"House\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    private final String houseName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Constructs a {@code JsonAdaptedHouse} with the given house details."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public JsonAdaptedHouse(@JsonProperty(\"houseName\") String houseName) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        this.houseName \u003d houseName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Converts a given {@code Group} into this class for Jackson use."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public JsonAdaptedHouse(House source) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        houseName \u003d source.getHouseName();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Converts this Jackson-friendly adapted house object into the model\u0027s {@code House} object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted house."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public House toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        if (houseName \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        if (!Name.isValidName(houseName)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        return new House(houseName);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weizhang05": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedParticipant.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import seedu.address.model.grouping.Group;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Birthday;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Major;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Participant;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Sex;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " * Jackson-friendly version of {@link Participant}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "class JsonAdaptedParticipant {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Participant\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private final String sex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private final String birthday;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private final String major;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private final String group;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    private final String house;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Constructs a {@code JsonAdaptedParticipant} with the given participant details."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public JsonAdaptedParticipant(@JsonProperty(\"name\") String name, @JsonProperty(\"sex\") String sex,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                                  @JsonProperty(\"birthday\") String birthday, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                                  @JsonProperty(\"email\") String email, @JsonProperty(\"major\") String major,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                                  @JsonProperty(\"group\") String group, @JsonProperty(\"house\") String house,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                                  @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        this.sex \u003d sex;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        this.birthday \u003d birthday;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        this.group \u003d group;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        this.house \u003d house;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Converts a given {@code Participant} into this class for Jackson use."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public JsonAdaptedParticipant(Participant source) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        sex \u003d source.getSex().value;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        birthday \u003d source.getBirthday().value;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        major \u003d source.getMajor().value;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        group \u003d source.getGroup().getGroupName();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        house \u003d source.getGroup().getHouseName();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Converts this Jackson-friendly adapted participant object into the model\u0027s {@code Participant} object."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted participant."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public Participant toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        if (sex \u003d\u003d null) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Sex.class.getSimpleName()));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        if (!Sex.isValidSex(sex)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            throw new IllegalValueException(Sex.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        final Sex modelSex \u003d new Sex(sex);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        if (birthday \u003d\u003d null) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                    Birthday.class.getSimpleName()));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        if (!Birthday.isValidBirthday(birthday)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            throw new IllegalValueException(Birthday.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        final Birthday modelBirthday \u003d new Birthday(birthday);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        if (major \u003d\u003d null) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Major.class.getSimpleName()));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        if (!Major.isValidMajor(major)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            throw new IllegalValueException(Major.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        final Major modelMajor \u003d new Major(major);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        if (group \u003d\u003d null) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Group.class.getSimpleName()));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        if (!Group.isValidGroup(group)) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            throw new IllegalValueException(Group.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        final Group modelGroup \u003d new Group(group, house);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        return new Participant(modelName, modelSex, modelBirthday, modelPhone, modelEmail,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                modelMajor, modelGroup, modelTags);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 47,
      "shanseet": 5,
      "-": 82,
      "weizhang05": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.grouping.Group;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.grouping.House;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Participant;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonSerializableAddressBook {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public static final String MESSAGE_DUPLICATE \u003d \"list contains duplicate\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PARTICIPANT \u003d \"Participant \" + MESSAGE_DUPLICATE + \"participant.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_GROUP \u003d \"Group \" + MESSAGE_DUPLICATE + \"group.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_HOUSE \u003d \"House \" + MESSAGE_DUPLICATE + \"house.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    private final List\u003cJsonAdaptedParticipant\u003e participants \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    private final List\u003cJsonAdaptedGroup\u003e groups \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    private final List\u003cJsonAdaptedHouse\u003e houses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given participants, groups and houses."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public JsonSerializableAddressBook(@JsonProperty(\"participants\") List\u003cJsonAdaptedParticipant\u003e participants,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                                       @JsonProperty(\"groups\") List\u003cJsonAdaptedGroup\u003e groups,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                                       @JsonProperty(\"houses\") List\u003cJsonAdaptedHouse\u003e houses) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        this.participants.addAll(participants);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        this.groups.addAll(groups);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        this.houses.addAll(houses);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        participants.addAll(source.getParticipantList().stream()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                .map(JsonAdaptedParticipant::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        groups.addAll(source.getGroupList().stream().map(JsonAdaptedGroup::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        houses.addAll(source.getHouseList().stream().map(JsonAdaptedHouse::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        for (JsonAdaptedParticipant jsonAdaptedParticipant : participants) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            Participant participant \u003d jsonAdaptedParticipant.toModelType();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            if (addressBook.hasParticipant(participant)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PARTICIPANT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            addressBook.addParticipant(participant);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        for (JsonAdaptedGroup jsonAdaptedGroup : groups) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            Group group \u003d jsonAdaptedGroup.toModelType();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            if (addressBook.hasGroup(group)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_GROUP);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            addressBook.addGroup(group);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        for (JsonAdaptedHouse jsonAdaptedHouse : houses) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            House house \u003d jsonAdaptedHouse.toModelType();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            if (addressBook.hasHouse(house)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_HOUSE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            addressBook.addHouse(house);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 50,
      "weizhang05": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BrowserPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Participant;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The Browser Panel of the App."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final URL DEFAULT_PAGE \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(MainApp.class.getResource(FXML_FILE_FOLDER + \"default.html\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SEARCH_PAGE_URL \u003d \"https://se-education.org/dummy-search-page/?name\u003d\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"BrowserPanel.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public BrowserPanel(ObservableValue\u003cParticipant\u003e selectedPerson) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // To prevent triggering events for typing inside the loaded Web page."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().setOnKeyPressed(Event::consume);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        // Load participant page when selected participant changes."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        selectedPerson.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                loadDefaultPage();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            loadPersonPage(newValue);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        loadDefaultPage();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    private void loadPersonPage(Participant participant) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        loadPage(SEARCH_PAGE_URL + participant.getName().fullName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void loadPage(String url) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e browser.getEngine().load(url));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads a default HTML file with a background that matches the general theme."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadDefaultPage() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        loadPage(DEFAULT_PAGE.toExternalForm());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 62,
      "weizhang05": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ChartPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import javafx.collections.ObservableMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import javafx.scene.chart.PieChart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tantantan277"
        },
        "content": " *  Controller for a pie chart"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tantantan277"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "public class ChartPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private static final String FXML \u003d \"ChartPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private static final ObservableList\u003cPieChart.Data\u003e emptyData \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ChartPanel.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private CustomPieChart agePieChart;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private CustomPieChart majorPieChart;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private CustomPieChart sexPieChart;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public ChartPanel() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        agePieChart.setStartAngle(90);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        agePieChart.setClockwise(true);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        sexPieChart.setStartAngle(90);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        sexPieChart.setClockwise(true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        majorPieChart.setStartAngle(90);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        majorPieChart.setClockwise(true);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * Update chart\u0027s data"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public void updateChartPanel(ObservableMap\u003cString, Integer\u003e ageData, ObservableMap\u003cString, Integer\u003e majorData,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                                 ObservableMap\u003cString, Integer\u003e sexData) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        agePieChart.clearData();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        agePieChart.updateData(ageData);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        majorPieChart.clearData();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        majorPieChart.updateData(majorData);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        sexPieChart.clearData();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        sexPieChart.updateData(sexData);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * Save charts to images"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public void saveChart(String fileName, String path) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        agePieChart.saveChart(fileName + \"_age\", path);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        majorPieChart.saveChart(fileName + \"_major\", path);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        sexPieChart.saveChart(fileName + \"_sex\", path);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CustomPieChart.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import javax.imageio.ImageIO;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import javafx.collections.ObservableMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import javafx.embed.swing.SwingFXUtils;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import javafx.scene.SnapshotParameters;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import javafx.scene.chart.PieChart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import javafx.scene.image.WritableImage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tantantan277"
        },
        "content": " * Custom Pie Chart class"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tantantan277"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "public class CustomPieChart extends PieChart {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public CustomPieChart() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * Save chart to image"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * @param fileName"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * @param path"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public void saveChart (String fileName, String path) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        changeStyleSheet(\"DarkTheme\", \"Print\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        WritableImage image \u003d this.snapshot(new SnapshotParameters(), null);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        changeStyleSheet(\"Print\", \"DarkTheme\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        File file \u003d new File(path + \"\\\\\" + fileName + \".png\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            ImageIO.write(SwingFXUtils.fromFXImage(image, null), \"png\", file);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * Update chart data"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public void updateData (ObservableMap\u003cString, Integer\u003e data) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        ObservableList\u003cPieChart.Data\u003e chartData \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        for (String key : data.keySet()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            chartData.add(new PieChart.Data(key, data.get(key)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        this.setData(chartData);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * Clear chart data"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public void clearData() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        this.getData().clear();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * Change styleSheet"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public void changeStyleSheet (String target, String replacement) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        String styleSheet;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        styleSheet \u003d this.getScene().getStylesheets().get(0).replace(target, replacement);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        this.getScene().getStylesheets().remove(0);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        this.getScene().getStylesheets().add(0, styleSheet);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import javafx.scene.chart.PieChart;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private ChartPanel chartPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private TextResultDisplay textResultDisplay;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private UndoListPanel undoListPanel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private RedoListPanel redoListPanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane browserPlaceholder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private PieChart chartPlaceholder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private StackPane mainResultPlaceHolder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private StackPane textResultDisplayPlaceholder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private StackPane undoListPanelPlaceholder;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private StackPane redoListPanelPlaceholder;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "         * TextResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "         * in CommandBox or TextResultDisplay."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        //Browser Remove"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        //browserPanel \u003d new BrowserPanel(logic.selectedParticipantProperty());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        //browserPlaceholder.getChildren().add(browserPanel.getRoot());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList(), logic.selectedPersonProperty(),"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                logic::setSelectedPerson);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        chartPanel \u003d new ChartPanel();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        mainResultPlaceHolder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        mainResultPlaceHolder.getChildren().add(chartPanel.getRoot());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        chartPanel.getRoot().setVisible(false);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        textResultDisplay \u003d new TextResultDisplay();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        textResultDisplayPlaceholder.getChildren().add(textResultDisplay.getRoot());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        undoListPanel \u003d new UndoListPanel(logic.getUndoList());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        undoListPanelPlaceholder.getChildren().add(undoListPanel.getRoot());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        redoListPanel \u003d new RedoListPanel(logic.getRedoList());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        redoListPanelPlaceholder.getChildren().add(redoListPanel.getRoot());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath(), logic.getAddressBook());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand, logic.getHistory());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            textResultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            undoListPanel.updateUndoList(logic.getUndoList());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            redoListPanel.updateRedoList(logic.getRedoList());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            if (commandResult.isShowChart()) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                personListPanel.getRoot().setVisible(false);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                chartPanel.getRoot().setVisible(true);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                chartPanel.updateChartPanel(logic.getAgeData(), logic.getMajorData(), logic.getSexData());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                chartPanel.getRoot().setVisible(false);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                personListPanel.getRoot().setVisible(true);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            if (commandResult.isSaveChart()) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                chartPanel.getRoot().setVisible(true);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                chartPanel.saveChart(logic.getFileName(), logic.getChartStoragePath().toString());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                chartPanel.getRoot().setVisible(false);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            textResultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 52,
      "-": 192,
      "weizhang05": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Participant;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " * An UI component that displays information of a {@code Participant}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public final Participant participant;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private Label sex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private Label birthday;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private Label major;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private Label group;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public PersonCard(Participant participant, int displayedIndex) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        this.participant \u003d participant;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        name.setText(participant.getName().fullName);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        sex.setText(\"Sex: \" + participant.getSex().value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        birthday.setText(\"Birthday: \" + participant.getBirthday().getFormattedBirthday());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        phone.setText(\"Phone Number: \" + participant.getPhone().value);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        major.setText(\"Major: \" + participant.getMajor().getFullMajor());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        email.setText(\"Email: \" + participant.getEmail().value);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        group.setText(\"Group: \" + participant.getGroup().getGroupName());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        participant.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                \u0026\u0026 participant.equals(card.participant);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 7,
      "-": 58,
      "weizhang05": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Participant;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    private ListView\u003cParticipant\u003e personListView;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public PersonListPanel(ObservableList\u003cParticipant\u003e participantList, ObservableValue\u003cParticipant\u003e selectedPerson,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                           Consumer\u003cParticipant\u003e onSelectedPersonChange) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        personListView.setItems(participantList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            logger.fine(\"Selection in participant list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            onSelectedPersonChange.accept(newValue);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        selectedPerson.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            logger.fine(\"Selected participant changed to: \" + newValue);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            // Don\u0027t modify selection if we are already selecting the selected participant,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            // otherwise we would have an infinite loop."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            if (Objects.equals(personListView.getSelectionModel().getSelectedItem(), newValue)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                personListView.getSelectionModel().clearSelection();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                int index \u003d personListView.getItems().indexOf(newValue);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                personListView.scrollTo(index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                personListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Participant} using a {@code PersonCard}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cParticipant\u003e {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        protected void updateItem(Participant participant, boolean empty) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            super.updateItem(participant, empty);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            if (empty || participant \u003d\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                setGraphic(new PersonCard(participant, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 57,
      "weizhang05": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/RedoCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tantantan277"
        },
        "content": " * An UI component that displays information of a {@code Redoable Command}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tantantan277"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "public class RedoCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private static final String FXML \u003d \"RedoListCard.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private HBox redoCardPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private Label redoableCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public RedoCard(String redoableCommand, int displayedIndex) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        this.redoableCommand.setText(redoableCommand);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        if (!(other instanceof RedoCard)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        RedoCard card \u003d (RedoCard) other;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                \u0026\u0026 redoableCommand.getText().equals(card.redoableCommand.getText());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/RedoListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tantantan277"
        },
        "content": " * Panel containing the list of redoable command"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tantantan277"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "public class RedoListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private static final String FXML \u003d \"RedoListPanel.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(RedoListPanel.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private ListView\u003cString\u003e redoListView;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public RedoListPanel(ObservableList\u003cString\u003e redoList) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        redoListView.setItems(redoList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        redoListView.setCellFactory(listView -\u003e new RedoListViewCell());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * Update the redo list after a command is executed"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public void updateRedoList(ObservableList\u003cString\u003e redoList) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        redoListView.setItems(redoList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        redoListView.setCellFactory(listView -\u003e new RedoListViewCell());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Redoable Command} using a {@code RedoCard}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    class RedoListViewCell extends ListCell\u003cString\u003e {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        protected void updateItem(String newRedoableCommand, boolean empty) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            super.updateItem(newRedoableCommand, empty);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            if (empty || newRedoableCommand \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                setGraphic(new RedoCard(newRedoableCommand, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TextResultDisplay.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "public class TextResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private static final String FXML \u003d \"TextResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private TextArea textResultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public TextResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        textResultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 5,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UndoCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tantantan277"
        },
        "content": " * An UI component that displays information of a {@code Undoable Command}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tantantan277"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "public class UndoCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private static final String FXML \u003d \"UndoListCard.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private HBox undoCardPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private Label undoableCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public UndoCard(String undoableCommand, int displayedIndex) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        this.undoableCommand.setText(undoableCommand);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        if (!(other instanceof UndoCard)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        UndoCard card \u003d (UndoCard) other;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                \u0026\u0026 undoableCommand.getText().equals(card.undoableCommand.getText());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UndoListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tantantan277"
        },
        "content": " * Panel containing the list of undoable command"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tantantan277"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "public class UndoListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private static final String FXML \u003d \"UndoListPanel.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(UndoListPanel.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private ListView\u003cString\u003e undoListView;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public UndoListPanel(ObservableList\u003cString\u003e undoList) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        undoListView.setItems(undoList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        undoListView.setCellFactory(listView -\u003e new UndoListViewCell());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * Update the undo list after a command is executed"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public void updateUndoList(ObservableList\u003cString\u003e undoList) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        undoListView.setItems(undoList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        undoListView.setCellFactory(listView -\u003e new UndoListViewCell());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Undoable Command} using a {@code UndoCard}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    class UndoListViewCell extends ListCell\u003cString\u003e {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        protected void updateItem(String newUndoableCommand, boolean empty) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            super.updateItem(newUndoableCommand, empty);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            if (empty || newUndoableCommand \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                setGraphic(new UndoCard(newUndoableCommand, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 52
    }
  },
  {
    "path": "src/main/resources/view/ChartPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "\u003c?import seedu.address.ui.CustomPieChart?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "\u003cVBox spacing\u003d\"20\" xmlns\u003d\"http://javafx.com/javafx/8.0.172-ea\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    \u003cLabel alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" layoutX\u003d\"560.0\" prefHeight\u003d\"21.0\" prefWidth\u003d\"1800.0\" styleClass\u003d\"label-bright\" stylesheets\u003d\"@DarkTheme.css\" text\u003d\"Statistic\" textAlignment\u003d\"CENTER\" textFill\u003d\"WHITE\" wrapText\u003d\"true\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    \u003cHBox\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        \u003cVBox\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            \u003cCustomPieChart fx:id\u003d\"agePieChart\"  /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            \u003cLabel alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" prefWidth\u003d\"1800\" styleClass\u003d\"label-bright\" text\u003d\"Age\" textAlignment\u003d\"CENTER\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        \u003cVBox \u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            \u003cCustomPieChart fx:id\u003d\"majorPieChart\"  /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            \u003cLabel alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" prefWidth\u003d\"1800\" styleClass\u003d\"label-bright\" text\u003d\"Major\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        \u003cVBox \u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            \u003cCustomPieChart fx:id\u003d\"sexPieChart\"   /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            \u003cLabel alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" prefWidth\u003d\"1800\" styleClass\u003d\"label-bright\" text\u003d\"Sex\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "\u003c/VBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "\u003c!--\u003cVBox spacing\u003d\"20\" xmlns\u003d\"http://javafx.com/javafx/8.0.172-ea\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e--\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "\u003c!--\u003cLabel alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" layoutX\u003d\"560.0\" prefHeight\u003d\"21.0\" prefWidth\u003d\"1800.0\" styleClass\u003d\"label-bright\" stylesheets\u003d\"@DarkTheme.css\" text\u003d\"Statistic\" textAlignment\u003d\"CENTER\" textFill\u003d\"WHITE\" wrapText\u003d\"true\" VBox.vgrow\u003d\"ALWAYS\" /\u003e--\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "\u003c!--\u003cHBox\u003e--\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    \u003c!--\u003cVBox HBox.hgrow\u003d\"ALWAYS\"\u003e--\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        \u003c!--\u003cCustomPieChart fx:id\u003d\"agePieChart\" stylesheets\u003d\"DarkTheme.css\" VBox.vgrow\u003d\"ALWAYS\" /\u003e--\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        \u003c!--\u003cLabel alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" prefWidth\u003d\"1800\" styleClass\u003d\"label-bright\" text\u003d\"Age\" textAlignment\u003d\"CENTER\" VBox.vgrow\u003d\"ALWAYS\" /\u003e--\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    \u003c!--\u003c/VBox\u003e--\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    \u003c!--\u003cVBox HBox.hgrow\u003d\"ALWAYS\"\u003e--\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        \u003c!--\u003cCustomPieChart fx:id\u003d\"majorPieChart\" stylesheets\u003d\"DarkTheme.css\" VBox.vgrow\u003d\"ALWAYS\" /\u003e--\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        \u003c!--\u003cLabel alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" prefWidth\u003d\"1800\" styleClass\u003d\"label-bright\" text\u003d\"Major\" VBox.vgrow\u003d\"ALWAYS\" /\u003e--\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    \u003c!--\u003c/VBox\u003e--\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    \u003c!--\u003cVBox HBox.hgrow\u003d\"ALWAYS\"\u003e--\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        \u003c!--\u003cCustomPieChart fx:id\u003d\"sexPieChart\" stylesheets\u003d\"DarkTheme.css\" VBox.vgrow\u003d\"ALWAYS\" /\u003e--\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        \u003c!--\u003cLabel alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" prefWidth\u003d\"1800\" styleClass\u003d\"label-bright\" text\u003d\"Sex\" VBox.vgrow\u003d\"ALWAYS\" /\u003e--\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    \u003c!--\u003c/VBox\u003e--\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "\u003c!--\u003c/HBox\u003e--\u003e"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 42
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-alignment: center;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-text-alignment: center;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "#textResultDisplay .content {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ".chart-pie-label-line {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-stroke: #ffffff;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-fill: #ffffff;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ".chart-pie-label {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-fill: #ffffff;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-font-size: 1em;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 14,
      "-": 350
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "         title\u003d\"FOP Manager\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "          \u003cVBox fx:id\u003d\"undoList\" minWidth\u003d\"140\" prefWidth\u003d\"140\"  SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "              \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            \u003cStackPane fx:id\u003d\"undoListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "          \u003cVBox fx:id\u003d\"redoList\" minWidth\u003d\"140\" prefWidth\u003d\"140\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "              \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            \u003cStackPane fx:id\u003d\"redoListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "\u003c!-- Browser Remove"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cStackPane fx:id\u003d\"browserPlaceholder\" prefWidth\u003d\"340\" \u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "--\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "          \u003cVBox fx:id\u003d\"participantList\" minWidth\u003d\"800\" prefWidth\u003d\"800\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            \u003cStackPane fx:id\u003d\"mainResultPlaceHolder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"textResultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 20,
      "-": 61,
      "weizhang05": 1
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    \u003cHBox\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        \u003cLabel fx:id\u003d\"sex\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$sex\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        \u003cLabel fx:id\u003d\"birthday\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$birthday\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "      \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "          \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        \u003cLabel fx:id\u003d\"major\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$major\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        \u003cLabel fx:id\u003d\"group\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$group\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 11,
      "-": 35
    }
  },
  {
    "path": "src/main/resources/view/PersonListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8.0.172-ea\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" spacing\u003d\"20\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "  \u003cLabel alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" layoutX\u003d\"560.0\" prefHeight\u003d\"21.0\" prefWidth\u003d\"1800.0\" styleClass\u003d\"label-bright\" stylesheets\u003d\"@DarkTheme.css\" text\u003d\"Person List\" textAlignment\u003d\"CENTER\" textFill\u003d\"WHITE\" wrapText\u003d\"true\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cListView fx:id\u003d\"personListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 3,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/Print.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-alignment: center;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-text-alignment: center;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            transparent"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            transparent"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            transparent;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "/*"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tantantan277"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tantantan277"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tantantan277"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tantantan277"
        },
        "content": " */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "#textResultDisplay .content {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ".chart-pie-label-line {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-stroke: #000000;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-fill: #000000;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ".chart-pie-label {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-fill: #000000;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    -fx-font-size: 1em;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 364
    }
  },
  {
    "path": "src/main/resources/view/RedoListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "\u003cHBox id\u003d\"redoCardPane\" fx:id\u003d\"redoCardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        \u003cHBox\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                    \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                \u003cHBox\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                    \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_small_label\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                    \u003cLabel fx:id\u003d\"redoableCommand\" styleClass\u003d\"cell_small_label\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                \u003c/HBox\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 27
    }
  },
  {
    "path": "src/main/resources/view/RedoListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "\u003cVBox alignment\u003d\"CENTER\" xmlns\u003d\"http://javafx.com/javafx/8.0.172-ea\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" spacing\u003d\"20\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    \u003cLabel alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" layoutX\u003d\"560.0\" prefHeight\u003d\"21.0\" prefWidth\u003d\"1800.0\" styleClass\u003d\"label-bright\" stylesheets\u003d\"@DarkTheme.css\" text\u003d\"Redo List\" textAlignment\u003d\"CENTER\" textFill\u003d\"WHITE\" wrapText\u003d\"true\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    \u003cListView fx:id\u003d\"redoListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 10
    }
  },
  {
    "path": "src/main/resources/view/TextResultDisplay.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "  \u003cTextArea fx:id\u003d\"textResultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 1,
      "-": 8
    }
  },
  {
    "path": "src/main/resources/view/UndoListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "\u003cHBox id\u003d\"undoCardPane\" fx:id\u003d\"undoCardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        \u003cHBox\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                    \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                \u003cHBox\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                    \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_small_label\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                    \u003cLabel fx:id\u003d\"undoableCommand\" styleClass\u003d\"cell_small_label\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                \u003c/HBox\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 27
    }
  },
  {
    "path": "src/main/resources/view/UndoListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" spacing\u003d\"20\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    \u003cLabel alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" layoutX\u003d\"560.0\" prefHeight\u003d\"21.0\" prefWidth\u003d\"1800.0\" styleClass\u003d\"label-bright\" stylesheets\u003d\"@DarkTheme.css\" text\u003d\"Undo List\" textAlignment\u003d\"CENTER\" textFill\u003d\"WHITE\" wrapText\u003d\"true\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    \u003cListView fx:id\u003d\"undoListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 10
    }
  },
  {
    "path": "src/test/data/JsonAddressBookStorageTest/invalidAndValidPersonAddressBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Valid Person\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    \"sex\" : \"Female\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    \"birthday\" : \"24041999\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    \"phone\" : \"92314523\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    \"email\" : \"valid@example.com\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    \"major\" : \"CEG\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    \"group\" : \"\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    \"house\" : null"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person With Invalid Phone Field\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    \"sex\" : \"Female\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    \"birthday\" : \"24041999\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    \"phone\" : \"923affd3\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    \"email\" : \"janet@example.com\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    \"major\" : \"CEG\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    \"group\" : \"\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    \"house\" : null"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanseet": 14,
      "-": 7
    }
  },
  {
    "path": "src/test/data/JsonAddressBookStorageTest/invalidPersonAddressBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    \"sex\" : \"Male\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    \"birthday\" : \"24041999\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    \"phone\" : \"92314523\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    \"email\" : \"invalid@example.com\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    \"major\" : \"CEG\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    \"group\" : \"\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    \"house\" : null"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanseet": 7,
      "-": 5
    }
  },
  {
    "path": "src/test/data/JsonSerializableAddressBookTest/duplicatePersonAddressBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "  \"houses\": [ ],"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "  \"groups\": [],"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "  \"participants\": [ {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    \"sex\": \"F\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    \"birthday\": \"01021993\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"94351253\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"alice@example.com\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    \"major\": \"Computer Science\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    \"group\": \"\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    \"house\" : null,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\": [ \"friends\" ]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    \"sex\": \"F\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    \"birthday\": \"01021993\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"94351253\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"pauline@example.com\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    \"major\": \"Computer Science\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    \"group\": \"\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    \"house\" : null"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 4,
      "shanseet": 6,
      "-": 11,
      "weizhang05": 3
    }
  },
  {
    "path": "src/test/data/JsonSerializableAddressBookTest/invalidPersonAddressBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "  \"houses\": [ ],"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "  \"groups\": [ ],"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "  \"participants\": [ {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Hans Muster\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    \"sex\": \"F\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    \"birthday\": \"01023456\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    \"phone\": \"94824242\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"invalid@email!3e\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    \"major\": \"4th street\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    \"group\": \"\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    \"house\" : null"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 3,
      "shanseet": 3,
      "-": 5,
      "weizhang05": 3
    }
  },
  {
    "path": "src/test/data/JsonSerializableAddressBookTest/typicalPersonsAddressBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"_comment\": \"AddressBook save file which contains the same Person values as in TypicalPersons#getTypicalAddressBook()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "  \"houses\": [ ],"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "  \"groups\": [],"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "  \"participants\" : [ {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Alice Pauline\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    \"sex\": \"F\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    \"birthday\": \"07081994\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"94351253\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"alice@example.com\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    \"major\" : \"CS\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    \"group\" : \"\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    \"house\" : null,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ \"friends\" ]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Benson Meier\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    \"sex\": \"M\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    \"birthday\": \"08071993\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"98765432\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"johnd@example.com\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    \"major\" : \"IS\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    \"group\" : \"\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    \"house\" : null,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ \"owesMoney\", \"friends\" ]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Carl Kurz\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    \"sex\": \"M\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    \"birthday\": \"01021990\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"95352563\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"heinz@example.com\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    \"major\" : \"CS\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    \"group\" : \"\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    \"house\" : null,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Daniel Meier\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    \"sex\": \"M\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    \"birthday\": \"01021980\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"87652533\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"cornelia@example.com\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    \"major\" : \"BZA\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    \"group\" : \"\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    \"house\" : null,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ \"friends\" ]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Elle Meyer\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    \"sex\": \"M\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    \"birthday\": \"12121985\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    \"phone\" : \"94822243\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"werner@example.com\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    \"major\" : \"CS\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    \"group\" : \"\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    \"house\" : null,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Fiona Kunz\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    \"sex\": \"M\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    \"birthday\": \"12121985\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    \"phone\" : \"94824273\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"lydia@example.com\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    \"major\" : \"ISC\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    \"group\" : \"\","
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    \"house\" : null,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"George Best\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    \"sex\": \"F\","
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    \"birthday\": \"12121985\","
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    \"phone\" : \"94824423\","
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"anna@example.com\","
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    \"major\" : \"CS\","
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    \"group\" : \"\","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    \"house\" : null,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 16,
      "shanseet": 21,
      "-": 35,
      "weizhang05": 4
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/AlertDialogHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.DialogPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A handle for the {@code AlertDialog} of the UI."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class AlertDialogHandle extends StageHandle {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final DialogPane dialogPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public AlertDialogHandle(Stage stage) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogPane \u003d getChildNode(\"#\" + UiManager.ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the text of the header in the {@code AlertDialog}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getHeaderText() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return dialogPane.getHeaderText();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the text of the content in the {@code AlertDialog}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getContentText() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return dialogPane.getContentText();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 1,
      "-": 32
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/MainWindowHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle for {@code MainWindow}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    private final PersonListPanelHandle personListPanel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private final TextResultDisplayHandle resultDisplay;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandBoxHandle commandBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBarFooterHandle statusBarFooter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final MainMenuHandle mainMenu;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    //private final BrowserPanelHandle browserPanel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanelHandle(getChildNode(PersonListPanelHandle.PERSON_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        resultDisplay \u003d new TextResultDisplayHandle(getChildNode(TextResultDisplayHandle.TEXT_RESULT_DISPLAY));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        //Browser Remove"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        //browserPanel \u003d new BrowserPanelHandle(getChildNode(BrowserPanelHandle.BROWSER_ID));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanelHandle getPersonListPanel() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public TextResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return resultDisplay;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandBox;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return statusBarFooter;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainMenu;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    //Browser Remove"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return browserPanel;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 9,
      "-": 46
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/PersonCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.collect.ImmutableMultiset;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Participant;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " * Provides a handle to a participant card in the participant list panel."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private static final String SEX_FIELD_ID \u003d \"#sex\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private static final String BIRTHDAY_FIELD_ID \u003d \"#birthday\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private static final String GROUP_FIELD_ID \u003d \"#group\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private static final String MAJOR_FIELD_ID \u003d \"#major\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PHONE_FIELD_ID \u003d \"#phone\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EMAIL_FIELD_ID \u003d \"#email\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#tags\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private final Label sexLabel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private final Label birthdayLabel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private final Label groupLabel;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private final Label majorLabel;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label phoneLabel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label emailLabel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        sexLabel \u003d getChildNode(SEX_FIELD_ID);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        birthdayLabel \u003d getChildNode(BIRTHDAY_FIELD_ID);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        groupLabel \u003d getChildNode(GROUP_FIELD_ID);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        majorLabel \u003d getChildNode(MAJOR_FIELD_ID);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public String getSex() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        return sexLabel.getText();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public String getBirthday() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        return birthdayLabel.getText();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public String getGroup() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        return groupLabel.getText();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public String getMajor() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        return majorLabel.getText();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPhone() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return phoneLabel.getText();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getEmail() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return emailLabel.getText();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Returns true if this handle contains {@code participant}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public boolean equals(Participant participant) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        return getName().equals(participant.getName().fullName)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                \u0026\u0026 getMajor().equals(\"Major: \" + participant.getMajor().getFullMajor())"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                \u0026\u0026 getSex().equals(\"Sex: \" + participant.getSex().value)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                \u0026\u0026 getBirthday().equals(\"Birthday: \" + participant.getBirthday().getFormattedBirthday())"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                \u0026\u0026 getPhone().equals(\"Phone Number: \" + participant.getPhone().value)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                \u0026\u0026 getEmail().equals(\"Email: \" + participant.getEmail().value)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                \u0026\u0026 getGroup().equals(\"Group: \" + participant.getGroup().getGroupName())"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                \u0026\u0026 ImmutableMultiset.copyOf(getTags()).equals(ImmutableMultiset.copyOf(participant.getTags().stream()"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                        .map(tag -\u003e tag.tagName)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                        .collect(Collectors.toList())));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 26,
      "-": 73,
      "weizhang05": 12
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/PersonListPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Participant;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle for {@code PersonListPanel} containing the list of {@code PersonCard}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "public class PersonListPanelHandle extends NodeHandle\u003cListView\u003cParticipant\u003e\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PERSON_LIST_VIEW_ID \u003d \"#personListView\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CARD_PANE_ID \u003d \"#cardPane\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    private Optional\u003cParticipant\u003e lastRememberedSelectedPersonCard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public PersonListPanelHandle(ListView\u003cParticipant\u003e personListPanelNode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(personListPanelNode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a handle to the selected {@code PersonCardHandle}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * A maximum of 1 item can be selected at any time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws AssertionError if no card is selected, or more than 1 card is selected."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCardHandle getHandleToSelectedCard() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        List\u003cParticipant\u003e selectedParticipantList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        if (selectedParticipantList.size() !\u003d 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            throw new AssertionError(\"Participant list size expected 1.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(PersonCardHandle::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                .filter(handle -\u003e handle.equals(selectedParticipantList.get(0)))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the selected card."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getSelectedCardIndex() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a card is currently selected."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isAnyCardSelected() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        List\u003cParticipant\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedCardsList.size() \u003e 1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Card list size expected 0 or 1.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return !selectedCardsList.isEmpty();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Navigates the listview to display {@code participant}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public void navigateToCard(Participant participant) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        if (!getRootNode().getItems().contains(participant)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            throw new IllegalArgumentException(\"Participant does not exist.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            getRootNode().scrollTo(participant);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Navigates the listview to {@code index}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void navigateToCard(int index) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d getRootNode().getItems().size()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Index is out of bounds.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            getRootNode().scrollTo(index);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selects the {@code PersonCard} at {@code index} in the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select(int index) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        getRootNode().getSelectionModel().select(index);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Returns the participant card handle of a participant associated with the {@code index} in the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCardHandle getPersonCardHandle(int index) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(PersonCardHandle::new)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                .filter(handle -\u003e handle.equals(getPerson(index)))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    private Participant getPerson(int index) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().get(index);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all card nodes in the scene graph."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Card nodes that are visible in the listview are definitely in the scene graph, while some nodes that are not"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * visible in the listview may also be in the scene graph."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cNode\u003e getAllCardNodes() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiRobot.lookup(CARD_PANE_ID).queryAll();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remembers the selected {@code PersonCard} in the list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void rememberSelectedPersonCard() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        List\u003cParticipant\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            lastRememberedSelectedPersonCard \u003d Optional.empty();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            lastRememberedSelectedPersonCard \u003d Optional.of(selectedItems.get(0));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the selected {@code PersonCard} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code rememberSelectedPersonCard()} call."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSelectedPersonCardChanged() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        List\u003cParticipant\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return lastRememberedSelectedPersonCard.isPresent();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            return !lastRememberedSelectedPersonCard.isPresent()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                    || !lastRememberedSelectedPersonCard.get().equals(selectedItems.get(0));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().size();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 141,
      "weizhang05": 18
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/RedoCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tantantan277"
        },
        "content": " * Provides a handle to a command card in the redo or redo list panel."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tantantan277"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "public class RedoCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private static final String COMMAND_FIELD_ID \u003d \"#redoableCommand\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private final Label commandLabel;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public RedoCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        commandLabel \u003d getChildNode(COMMAND_FIELD_ID);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public String getCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        return commandLabel.getText();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * Return true if this handle contains {@code command}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public boolean equals(String command) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        return getCommand().equals(command);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 36
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/RedoListPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tantantan277"
        },
        "content": " * Provides a handle for {@code RedoListPanel} containing the list of {@code RedoCard}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tantantan277"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "public class RedoListPanelHandle extends NodeHandle\u003cListView\u003cString\u003e\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public static final String REDO_LIST_VIEW_ID \u003d \"#redoListView\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private static final String REDO_CARD_PANE_ID \u003d \"#redoCardPane\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public RedoListPanelHandle(ListView\u003cString\u003e redoListPanelNode) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        super(redoListPanelNode);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * Navigates the listview to command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public void navigateToCard(String redoableCommand) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        if (!getRootNode().getItems().contains(redoableCommand)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            throw new IllegalArgumentException(\"Command does not exist.\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            getRootNode().scrollTo(redoableCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        });"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * Returns the redo card handle of a command associated with the {@code index} in the list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public RedoCardHandle getRedoCardHandle(int index) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                .map(RedoCardHandle::new)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                .filter(handle -\u003e handle.equals(getCommand(index)))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * Returns all card nodes in the scene graph."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * Card nodes that are visible in the listview are definitely in the scene graph, while some nodes that are not"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * visible in the listview may also be in the scene graph."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private Set\u003cNode\u003e getAllCardNodes() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        return guiRobot.lookup(REDO_CARD_PANE_ID).queryAll();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private String getCommand(int index) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        return getRootNode().getItems().get(index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 58
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/TextResultDisplayHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tantantan277"
        },
        "content": " * A handler for the {@code TextResultDisplay} of the UI"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "public class TextResultDisplayHandle extends NodeHandle\u003cTextArea\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public static final String TEXT_RESULT_DISPLAY \u003d \"#textResultDisplay\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public TextResultDisplayHandle(TextArea textResultDisplayNode) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        super(textResultDisplayNode);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the text in the result display."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getText();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 5,
      "-": 17
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/UndoCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tantantan277"
        },
        "content": " * Provides a handle to a command card in the undo or redo list panel."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tantantan277"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "public class UndoCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private static final String COMMAND_FIELD_ID \u003d \"#undoableCommand\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private final Label commandLabel;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public UndoCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        commandLabel \u003d getChildNode(COMMAND_FIELD_ID);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public String getCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        return commandLabel.getText();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * Return true if this handle contains {@code command}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public boolean equals(String command) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        return getCommand().equals(command);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 36
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/UndoListPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tantantan277"
        },
        "content": " * Provides a handle for {@code UndoListPanel} containing the list of {@code UndoCard}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tantantan277"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "public class UndoListPanelHandle extends NodeHandle\u003cListView\u003cString\u003e\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public static final String UNDO_LIST_VIEW_ID \u003d \"#undoListView\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private static final String UNDO_CARD_PANE_ID \u003d \"#undoCardPane\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public UndoListPanelHandle(ListView\u003cString\u003e undoListPanelNode) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        super(undoListPanelNode);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * Navigates the listview to command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public void navigateToCard(String undoableCommand) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        if (!getRootNode().getItems().contains(undoableCommand)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            throw new IllegalArgumentException(\"Command does not exist.\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            getRootNode().scrollTo(undoableCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        });"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * Returns the undo card handle of a command associated with the {@code index} in the list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public UndoCardHandle getUndoCardHandle(int index) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                .map(UndoCardHandle::new)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                .filter(handle -\u003e handle.equals(getCommand(index)))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * Returns all card nodes in the scene graph."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * Card nodes that are visible in the listview are definitely in the scene graph, while some nodes that are not"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * visible in the listview may also be in the scene graph."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private Set\u003cNode\u003e getAllCardNodes() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        return guiRobot.lookup(UNDO_CARD_PANE_ID).queryAll();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private String getCommand(int index) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        return getRootNode().getItems().get(index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import systemtests.ModelHelper;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.json\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier \u003d () -\u003e null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp(Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier, Path saveFileLocation) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initialDataSupplier \u003d initialDataSupplier;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.saveFileLocation \u003d saveFileLocation;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (initialDataSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(saveFileLocation);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                jsonAddressBookStorage.saveAddressBook(initialDataSupplier.get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(600.0, 600.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(saveFileLocation);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the address book data stored inside the storage file."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook readStorageAddressBook() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook(storage.readAddressBook().get());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Data is not in the AddressBook format.\", dce);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Storage file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the storage file."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getStorageSaveLocation() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return storage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the model."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Model copy \u003d new ModelManager((model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        ModelHelper.setFilteredList(copy, model.getFilteredParticipantList());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 108,
      "weizhang05": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GROUP_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MAJOR_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SEX_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Participant;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder temporaryFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(deleteCommand);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(listCommand);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + SEX_DESC_AMY + BIRTHDAY_DESC_AMY"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                + PHONE_DESC_AMY + EMAIL_DESC_AMY + MAJOR_DESC_AMY + GROUP_DESC_AMY;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Participant expectedParticipant \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        expectedModel.addParticipant(expectedParticipant);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(CommandException.class, addCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(addCommand);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.getFilteredPersonList().remove(0);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - {@code expectedModel}\u0027s address book was saved to the storage file."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                                           String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 6,
      "-": 183,
      "weizhang05": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Participant;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Participant validParticipant \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        expectedModel.addParticipant(validParticipant);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertCommandSuccess(new AddCommand(validParticipant), model, commandHistory,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validParticipant), expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Participant participantInList \u003d model.getAddressBook().getParticipantList().get(0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertCommandFailure(new AddCommand(participantInList), model, commandHistory,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 42,
      "weizhang05": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import javafx.collections.ObservableMap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.grouping.Group;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.model.grouping.House;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Participant;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Participant validParticipant \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validParticipant).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validParticipant), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertEquals(Arrays.asList(validParticipant), modelStub.personsAdded);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Participant validParticipant \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validParticipant);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validParticipant);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Participant alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Participant bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        // different participant -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        public Path getChartStoragePath() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        public boolean isEmpty() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        public ObservableMap\u003cString, Integer\u003e getAgeData() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        public ObservableMap\u003cString, Integer\u003e getSexData() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        public ObservableMap\u003cString, Integer\u003e getMajorData() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        public String getFileName() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        public void setFileName(String fileName) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        public void addParticipant(Participant participant) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        public boolean hasParticipant(Participant participant) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        public void deleteParticipant(Participant target) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        public void setParticipant(Participant target, Participant editedParticipant) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        public ObservableList\u003cParticipant\u003e getFilteredParticipantList() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        public ObservableList\u003cString\u003e getUndoList() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        public ObservableList\u003cString\u003e getRedoList() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        public void updateFilteredParticipantList(Predicate\u003cParticipant\u003e predicate) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        public void undoAddressBook() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        public void redoAddressBook() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        public ReadOnlyProperty\u003cParticipant\u003e selectedParticipantProperty() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        public Participant getSelectedParticipant() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        public void setSelectedParticipant(Participant participant) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        public boolean hasGroup(Group group) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        public void deleteGroup(Group target) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        public void addGroup(Group group) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        public void setGroup(Group target, Group editedGroup) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        public Group getGroup(Group group) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            return new Group(\"\", null);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        public ObservableList\u003cGroup\u003e getFilteredGroupList() {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        public void updateFilteredGroupList(Predicate\u003cGroup\u003e predicate) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        public int sizeGroupList() {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        public House getHouse(House house) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        public boolean hasHouse(House house) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        public void deleteHouse(House target) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        public void addHouse(House house) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        public void setHouse(House target, House editedHouse) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        public ObservableList\u003cHouse\u003e getFilteredHouseList() {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        public void updateFilteredHouseList(Predicate\u003cHouse\u003e predicate) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        public int sizeHouseList() {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * A Model stub that contains a single participant."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        private final Participant participant;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        ModelStubWithPerson(Participant participant) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            requireNonNull(participant);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            this.participant \u003d participant;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        public boolean hasParticipant(Participant participant) {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            requireNonNull(participant);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            return this.participant.isSameParticipant(participant);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * A Model stub that always accept the participant being added."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        final ArrayList\u003cParticipant\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        public boolean hasParticipant(Participant participant) {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            requireNonNull(participant);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            return personsAdded.stream().anyMatch(participant::isSameParticipant);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        public void addParticipant(Participant participant) {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            requireNonNull(participant);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            personsAdded.add(participant);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 37,
      "shanseet": 21,
      "-": 245,
      "weizhang05": 80
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddGroupCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanseet"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.model.grouping.Group;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.model.grouping.House;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanseet"
        },
        "content": "public class AddGroupCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public void constructor_nullGroup_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        new AddGroupCommand(null, \"Red\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public void constructor_nullHouse_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        new AddGroupCommand(\"G1\", null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public void execute_nonexistentHouse_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        AddGroupCommand addGroupCommand \u003d new AddGroupCommand(\"1\", \"2\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        thrown.expectMessage(AddGroupCommand.MESSAGE_NONEXISTENT_HOUSE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        addGroupCommand.execute(modelManager, commandHistory);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public void execute_duplicateGroup_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        AddGroupCommand addGroupCommand \u003d new AddGroupCommand(\"G1\", \"Green\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        modelManager.addHouse(new House(\"Green\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        modelManager.addGroup(new Group(\"G1\", \"Green\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        thrown.expectMessage(AddGroupCommand.MESSAGE_DUPLICATE_GROUP);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        addGroupCommand.execute(modelManager, commandHistory);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public void execute_addGroupSuccessful() throws CommandException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        House validHouse \u003d new House(\"Red\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        Group validGroup \u003d new Group(\"R1\", \"Red\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        modelManager.addHouse(validHouse);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        CommandResult commandResult \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                new AddGroupCommand(\"R1\", \"Red\").execute(modelManager, commandHistory);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        assertEquals(String.format(AddGroupCommand.MESSAGE_SUCCESS, \"R1\"), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        assertEquals(validGroup, modelManager.getFilteredGroupList().get(0));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shanseet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanseet": 73
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddHouseCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanseet"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.model.grouping.House;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanseet"
        },
        "content": "public class AddHouseCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public void constructor_nullHouse_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        new AddHouseCommand(null);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public void execute_duplicateHouse_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        AddHouseCommand addHouseCommand \u003d new AddHouseCommand(\"1\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        modelManager.addHouse(new House(\"1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        thrown.expectMessage(AddHouseCommand.MESSAGE_DUPLICATE_HOUSE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        addHouseCommand.execute(modelManager, commandHistory);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public void execute_addHouseSuccessful() throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        House validHouse \u003d new House(\"Red\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        CommandResult commandResult \u003d new AddHouseCommand(\"Red\").execute(modelManager, commandHistory);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        assertEquals(String.format(AddHouseCommand.MESSAGE_SUCCESS, \"Red\"), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        assertEquals(validHouse, modelManager.getFilteredHouseList().get(0));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shanseet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanseet": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandResultTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false, false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false, false, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true, false, false)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false, false, false).hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true, false, false).hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 5,
      "-": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MAJOR;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SEX;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Participant;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public static final String VALID_SEX_AMY \u003d \"F\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public static final String VALID_SEX_BOB \u003d \"M\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public static final String VALID_BIRTHDAY_AMY \u003d \"08071995\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public static final String VALID_BIRTHDAY_BOB \u003d \"07081995\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public static final String VALID_MAJOR_AMY \u003d \"Computer Science\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public static final String VALID_MAJOR_BOB \u003d \"Information System\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public static final String VALID_GROUP_AMY \u003d \"\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public static final String VALID_GROUP_BOB \u003d \"\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public static final String SEX_DESC_AMY \u003d \" \" + PREFIX_SEX + VALID_SEX_AMY;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public static final String SEX_DESC_BOB \u003d \" \" + PREFIX_SEX + VALID_SEX_BOB;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public static final String BIRTHDAY_DESC_AMY \u003d \" \" + PREFIX_BIRTHDAY + VALID_BIRTHDAY_AMY;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public static final String BIRTHDAY_DESC_BOB \u003d \" \" + PREFIX_BIRTHDAY + VALID_BIRTHDAY_BOB;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public static final String MAJOR_DESC_AMY \u003d \" \" + PREFIX_MAJOR + VALID_MAJOR_AMY;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public static final String MAJOR_DESC_BOB \u003d \" \" + PREFIX_MAJOR + VALID_MAJOR_BOB;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public static final String GROUP_DESC_AMY \u003d \" \" + PREFIX_GROUP + VALID_GROUP_AMY;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public static final String GROUP_DESC_BOB \u003d \" \" + PREFIX_GROUP + VALID_GROUP_BOB;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public static final String INVALID_MAJOR_DESC \u003d \" \" + PREFIX_MAJOR; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                .withSex(VALID_SEX_AMY).withBirthday(VALID_BIRTHDAY_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).withMajor(VALID_MAJOR_AMY).withGroup(VALID_GROUP_AMY)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                .withSex(VALID_SEX_BOB).withBirthday(VALID_BIRTHDAY_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withMajor(VALID_MAJOR_BOB).withGroup(VALID_GROUP_BOB)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult expectedCommandResult, Model expectedModel) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandHistory, CommandResult, Model)}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, actualCommandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * - the address book, filtered participant list and selected participant"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * in {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        List\u003cParticipant\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredParticipantList());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Participant expectedSelectedParticipant \u003d actualModel.getSelectedParticipant();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredParticipantList());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            assertEquals(expectedSelectedParticipant, actualModel.getSelectedParticipant());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the participant at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredParticipantList().size());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Participant participant \u003d model.getFilteredParticipantList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        final String[] splitName \u003d participant.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        model.updateFilteredParticipantList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertEquals(1, model.getFilteredParticipantList().size());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Deletes the first participant in {@code model}\u0027s filtered list from {@code model}\u0027s address book."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void deleteFirstPerson(Model model) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Participant firstParticipant \u003d model.getFilteredParticipantList().get(0);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        model.deleteParticipant(firstParticipant);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 23,
      "shanseet": 2,
      "-": 129,
      "weizhang05": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Participant;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Participant participantToDelete \u003d model.getFilteredParticipantList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, participantToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        expectedModel.deleteParticipant(participantToDelete);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredParticipantList().size() + 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Participant participantToDelete \u003d model.getFilteredParticipantList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, participantToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        expectedModel.deleteParticipant(participantToDelete);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getParticipantList().size());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Participant participantToDelete \u003d model.getFilteredParticipantList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        expectedModel.deleteParticipant(participantToDelete);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        // delete -\u003e first participant deleted"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered participant list to show all persons"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        // redo -\u003e same first participant deleted again"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredParticipantList().size() + 1);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * 1. Deletes a {@code Participant} from a filtered list."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted participant in the"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the participant object regardless of indexing."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonDeleted() throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Participant participantToDelete \u003d model.getFilteredParticipantList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        expectedModel.deleteParticipant(participantToDelete);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        // delete -\u003e deletes second participant in unfiltered participant list / first"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        // participant in filtered participant list"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered participant list to show all persons"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertNotEquals(participantToDelete, model.getFilteredParticipantList().get(INDEX_FIRST_PERSON.getZeroBased()));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        // redo -\u003e deletes same second participant in unfiltered participant list"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        // different participant -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        model.updateFilteredParticipantList(p -\u003e false);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertTrue(model.getFilteredParticipantList().isEmpty());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 150,
      "weizhang05": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteGroupCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanseet"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import static seedu.address.testutil.TypicalGroupHousePersonList.getTypicalAddressBookWithGroupHouse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.model.grouping.Group;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanseet"
        },
        "content": "public class DeleteGroupCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBookWithGroupHouse(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public void constructor_nullGroup_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        new DeleteGroupCommand(null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public void execute_nonexistentGroup_throwsCommandException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        DeleteGroupCommand deleteGroupCommand \u003d new DeleteGroupCommand(\"G1\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        assertCommandFailure(deleteGroupCommand, model, commandHistory, DeleteGroupCommand.MESSAGE_NONEXISTENT_GROUP);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public void execute_nonemptyGroup_throwsCommandException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        DeleteGroupCommand deleteGroupCommand \u003d new DeleteGroupCommand(\"R1\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        assertCommandFailure(deleteGroupCommand, model, commandHistory, DeleteGroupCommand.MESSAGE_NOT_EMPTY_GROUP);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public void execute_deleteGroupSuccessful() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        DeleteGroupCommand deleteGroupCommand \u003d new DeleteGroupCommand(\"B2\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteGroupCommand.MESSAGE_DELETE_GROUP_SUCCESS, \"B2\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        expectedModel.deleteGroup(new Group(\"B2\", \"Blue\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        assertCommandSuccess(deleteGroupCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shanseet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanseet": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteHouseCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanseet"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import static seedu.address.testutil.TypicalGroupHousePersonList.getTypicalAddressBookWithGroupHouse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.model.grouping.House;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanseet"
        },
        "content": "public class DeleteHouseCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBookWithGroupHouse(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public void constructor_nullHouse_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        new DeleteHouseCommand(null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public void execute_nonexistentHouse_throwsCommandException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        DeleteHouseCommand deleteHouseCommand \u003d new DeleteHouseCommand(\"Green\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        assertCommandFailure(deleteHouseCommand, model, commandHistory, DeleteHouseCommand.MESSAGE_NONEXISTENT_HOUSE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public void execute_nonemptyHouse_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        DeleteHouseCommand deleteHouseCommand \u003d new DeleteHouseCommand(\"Red\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        assertCommandFailure(deleteHouseCommand, model, commandHistory, DeleteHouseCommand.MESSAGE_NOT_EMPTY_HOUSE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public void execute_deleteGroupSuccessful() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        DeleteHouseCommand deleteHouseCommand \u003d new DeleteHouseCommand(\"Yellow\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteHouseCommand.MESSAGE_DELETE_HOUSE_SUCCESS, \"Yellow\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        expectedModel.deleteHouse(new House(\"Yellow\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        assertCommandSuccess(deleteHouseCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shanseet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanseet": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Participant;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Participant editedParticipant \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedParticipant).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedParticipant);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        expectedModel.setParticipant(model.getFilteredParticipantList().get(0), editedParticipant);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredParticipantList().size());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Participant lastParticipant \u003d model.getFilteredParticipantList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastParticipant);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Participant editedParticipant \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedParticipant);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        expectedModel.setParticipant(lastParticipant, editedParticipant);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Participant editedParticipant \u003d model.getFilteredParticipantList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedParticipant);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Participant participantInFilteredList \u003d model.getFilteredParticipantList()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                .get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Participant editedParticipant \u003d new PersonBuilder(participantInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedParticipant);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        expectedModel.setParticipant(model.getFilteredParticipantList().get(0), editedParticipant);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Participant firstParticipant \u003d model.getFilteredParticipantList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstParticipant).build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        // edit participant in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Participant participantInList \u003d model.getAddressBook().getParticipantList()"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                .get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                new EditPersonDescriptorBuilder(participantInList).build());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public void execute_nonexistentGroup_failure() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                new EditPersonDescriptorBuilder().withGroup(\"G1\").build());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_NONEXISTENT_GROUP);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredParticipantList().size() + 1);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getParticipantList().size());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Participant editedParticipant \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Participant participantToEdit \u003d model.getFilteredParticipantList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedParticipant).build();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        expectedModel.setParticipant(participantToEdit, editedParticipant);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        // edit -\u003e first participant edited"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered participant list to show all persons"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        // redo -\u003e same first participant edited again"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredParticipantList().size() + 1);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * 1. Edits a {@code Participant} from a filtered list."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited participant in the"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * 4. Redo the edit. This ensures {@code RedoCommand} edits the participant object regardless of indexing."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonEdited() throws Exception {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Participant editedParticipant \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedParticipant).build();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Participant participantToEdit \u003d model.getFilteredParticipantList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        expectedModel.setParticipant(participantToEdit, editedParticipant);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        // edit -\u003e edits second participant in unfiltered participant list / first participant"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        // in filtered participant list"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered participant list to show all persons"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertNotEquals(model.getFilteredParticipantList().get(INDEX_FIRST_PERSON.getZeroBased()), participantToEdit);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        // redo -\u003e edits same second participant in unfiltered participant list"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanseet": 8,
      "-": 205,
      "weizhang05": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditGroupCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanseet"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import static seedu.address.testutil.TypicalGroupHousePersonList.getTypicalAddressBookWithGroupHouse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.model.grouping.Group;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Participant;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanseet"
        },
        "content": "public class EditGroupCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBookWithGroupHouse(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public void constructor_nullOldGroup_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        new EditGroupCommand(null, \"R1\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public void constructor_nullNewGroup_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        new EditGroupCommand(\"R1\", null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public void execute_editGroupWithPersonSuccessful() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        EditGroupCommand editGroupCommand \u003d new EditGroupCommand(\"R1\", \"R3\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        String expectedMessage \u003d String.format(EditGroupCommand.MESSAGE_SUCCESS, \"R1\", \"R3\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Participant editedParticipant \u003d new PersonBuilder().withName(\"Alicia Alice\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                .withSex(\"F\").withBirthday(\"07081994\").withMajor(\"CS\").withEmail(\"alicia@example.com\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                .withPhone(\"94351253\").withGroup(\"R3\", \"Red\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Participant toEdit \u003d model.getFilteredParticipantList().get(0);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        expectedModel.setGroup(new Group(\"R1\", \"Red\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                new Group(\"R3\", \"Red\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        expectedModel.setParticipant(toEdit, editedParticipant);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        assertCommandSuccess(editGroupCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public void execute_repeatGroup_throwsCommandException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        EditGroupCommand editGroupCommand \u003d new EditGroupCommand(\"R1\", \"R1\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        assertCommandFailure(editGroupCommand, model, commandHistory, EditGroupCommand.MESSAGE_REPEAT_GROUP);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public void execute_nonexistentOldGroup_throwsCommandException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        EditGroupCommand editGroupCommand \u003d new EditGroupCommand(\"G1\", \"B2\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        assertCommandFailure(editGroupCommand, model, commandHistory, EditGroupCommand.MESSAGE_NONEXISTENT_OLD_GROUP);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public void execute_existentNewGroup_throwsCommandException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        EditGroupCommand editGroupCommand \u003d new EditGroupCommand(\"R1\", \"B1\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        assertCommandFailure(editGroupCommand, model, commandHistory, EditGroupCommand.MESSAGE_EXISTENT_NEW_GROUP);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shanseet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanseet": 69,
      "weizhang05": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditHouseCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanseet"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import static seedu.address.testutil.TypicalGroupHousePersonList.getTypicalAddressBookWithGroupHouse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.model.grouping.Group;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.model.grouping.House;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Participant;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanseet"
        },
        "content": "public class EditHouseCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBookWithGroupHouse(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public void constructor_nullOldHouse_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        new EditHouseCommand(null, \"Red\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public void constructor_nullNewHouse_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        new EditHouseCommand(\"Green\", null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public void execute_repeatHouse_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        EditHouseCommand editHouseCommand \u003d new EditHouseCommand(\"Red\", \"Red\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        assertCommandFailure(editHouseCommand, model, commandHistory, EditHouseCommand.MESSAGE_REPEAT_HOUSE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public void execute_nonexistentOldHouse_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        EditHouseCommand editHouseCommand \u003d new EditHouseCommand (\"Green\", \"Brown\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        assertCommandFailure(editHouseCommand, model, commandHistory, EditHouseCommand.MESSAGE_NONEXISTENT_OLD_HOUSE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public void execute_existentNewHouse_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        EditHouseCommand editHouseCommand \u003d new EditHouseCommand (\"Red\", \"Blue\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        assertCommandFailure(editHouseCommand, model, commandHistory, EditHouseCommand.MESSAGE_EXISTENT_NEW_HOUSE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public void execute_editHouseWithGroupSuccess() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        EditHouseCommand editHouseCommand \u003d new EditHouseCommand(\"Red\", \"Green\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        String expectedMessage \u003d String.format(EditHouseCommand.MESSAGE_SUCCESS, \"Red\", \"Green\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Participant editedParticipant \u003d new PersonBuilder().withName(\"Alicia Alice\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                .withSex(\"F\").withBirthday(\"07081994\").withMajor(\"CS\").withEmail(\"alicia@example.com\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                .withPhone(\"94351253\").withGroup(\"R1\", \"Green\").build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Participant toEdit \u003d model.getFilteredParticipantList().get(0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        expectedModel.setGroup(new Group(\"R1\", \"Red\"),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                new Group(\"R1\", \"Green\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        expectedModel.setGroup(new Group(\"R2\", \"Red\"),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                new Group(\"R2\", \"Green\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        expectedModel.setHouse(new House(\"Red\"), new House(\"Green\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        expectedModel.setParticipant(toEdit, editedParticipant);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        assertCommandSuccess(editHouseCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shanseet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanseet": 72,
      "weizhang05": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditParticipantDescriptorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MAJOR_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "public class EditParticipantDescriptorTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withMajor(VALID_MAJOR_BOB).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 2,
      "-": 55,
      "weizhang05": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                false, false);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, commandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExportCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "public class ExportCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "     * Opening the excel sheet should give an Empty file."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        assertCommandSuccess(new ExportCommand(), expectedModel, commandHistory,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                Messages.MESSAGE_EXCEL_FILE_WRITTEN_SUCCESSFULLY, expectedModel);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "     * Opening the excel sheet should give an non-empty file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        assertCommandSuccess(new ExportCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                Messages.MESSAGE_EXCEL_FILE_WRITTEN_SUCCESSFULLY, model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ssunil3232": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExportFreshmenCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.MARK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getAddressBookWithOneFreshmanAndOgl;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.FindingParticipantPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "public class ExportFreshmenCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    private FindingParticipantPredicate preparePredicate() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        return new FindingParticipantPredicate(Arrays.asList(\"Freshman\".split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "     * Opening the excel sheet should give an Empty file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs()); //no Freshman"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        FindingParticipantPredicate predicate \u003d preparePredicate();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        expectedModel.updateFilteredParticipantList(predicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        assertCommandSuccess(new ExportFreshmenCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                Messages.MESSAGE_EXCEL_FILE_WRITTEN_SUCCESSFULLY, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredParticipantList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "     * Opening the excel sheet should give an non-empty file."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        Model model \u003d new ModelManager(getAddressBookWithOneFreshmanAndOgl(), new UserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getAddressBookWithOneFreshmanAndOgl(), new UserPrefs()); //no Freshman"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        FindingParticipantPredicate predicate \u003d preparePredicate();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        expectedModel.updateFilteredParticipantList(predicate);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        assertCommandSuccess(new ExportFreshmenCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                Messages.MESSAGE_EXCEL_FILE_WRITTEN_SUCCESSFULLY, expectedModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertEquals(Arrays.asList(MARK), model.getFilteredParticipantList());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ssunil3232": 51,
      "weizhang05": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExportOglCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.SONIA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getAddressBookWithOneFreshmanAndOgl;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.ogl.FindingOglPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "public class ExportOglCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    private FindingOglPredicate preparePredicate() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        return new FindingOglPredicate(Arrays.asList(\"OGL\".split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "     * Opening the excel sheet should give an Empty file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs()); //no Freshman"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        FindingOglPredicate predicate \u003d preparePredicate();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        expectedModel.updateFilteredParticipantList(predicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        assertCommandSuccess(new ExportOglCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                Messages.MESSAGE_EXCEL_FILE_WRITTEN_SUCCESSFULLY, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredParticipantList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "     * Opening the excel sheet should give an non-empty file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        Model model \u003d new ModelManager(getAddressBookWithOneFreshmanAndOgl(), new UserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getAddressBookWithOneFreshmanAndOgl(), new UserPrefs()); //no Freshman"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        FindingOglPredicate predicate \u003d preparePredicate();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        expectedModel.updateFilteredParticipantList(predicate);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        assertCommandSuccess(new ExportOglCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                Messages.MESSAGE_EXCEL_FILE_WRITTEN_SUCCESSFULLY, expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertEquals(Arrays.asList(SONIA), model.getFilteredParticipantList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ssunil3232": 52,
      "weizhang05": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        // different participant -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        expectedModel.updateFilteredParticipantList(predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredParticipantList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        expectedModel.updateFilteredParticipantList(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredParticipantList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 79,
      "weizhang05": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false, false, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, commandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 1,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ImportCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "public class ImportCommandTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ssunil3232": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListGroupHouseCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanseet"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import static seedu.address.testutil.TypicalGroupHousePersonList.ALICIA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import static seedu.address.testutil.TypicalGroupHousePersonList.BENEDICT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import static seedu.address.testutil.TypicalGroupHousePersonList.COCO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import static seedu.address.testutil.TypicalGroupHousePersonList.getTypicalAddressBookWithGroupHouse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.model.grouping.FindGroupPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.model.grouping.FindHousePredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanseet"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanseet"
        },
        "content": " * List house and group tested in the same class due to similar implementation."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanseet"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanseet"
        },
        "content": "public class ListGroupHouseCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBookWithGroupHouse(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    private FindGroupPredicate prepareGroupPredicate(String group) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        return new FindGroupPredicate(Arrays.asList(group));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    private FindHousePredicate prepareHousePredicate(String house) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        return new FindHousePredicate(Arrays.asList(house));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public void execute_noParticipantsInGroup() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        String toFind \u003d \"B2\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        FindGroupPredicate predicate \u003d prepareGroupPredicate(toFind);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        ListGroupCommand listGroupCommand \u003d new ListGroupCommand(predicate, toFind);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        expectedModel.updateFilteredParticipantList(predicate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        assertCommandSuccess(listGroupCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertEquals(Arrays.asList(), model.getFilteredParticipantList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public void execute_oneParticipantInGroup_commandSuccess() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        String toFind \u003d \"R1\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        FindGroupPredicate predicate \u003d prepareGroupPredicate(toFind);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        ListGroupCommand listGroupCommand \u003d new ListGroupCommand(predicate, toFind);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        expectedModel.updateFilteredParticipantList(predicate);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        assertCommandSuccess(listGroupCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertEquals(Arrays.asList(ALICIA), model.getFilteredParticipantList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public void execute_findParticipantsWithEmptyGroup_commandSuccess() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        String toFind \u003d \"EMPTY\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        FindGroupPredicate predicate \u003d prepareGroupPredicate(toFind);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        ListGroupCommand listGroupCommand \u003d new ListGroupCommand(predicate, toFind);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        expectedModel.updateFilteredParticipantList(predicate);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        assertCommandSuccess(listGroupCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertEquals(Arrays.asList(BENEDICT), model.getFilteredParticipantList());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public void execute_noParticipantsInHouse_commandSuccess() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        String toFind \u003d \"Yellow\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        FindHousePredicate predicate \u003d prepareHousePredicate(toFind);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        ListHouseCommand listHouseCommand \u003d new ListHouseCommand(predicate, toFind);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        expectedModel.updateFilteredParticipantList(predicate);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        assertCommandSuccess(listHouseCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertEquals(Arrays.asList(), model.getFilteredParticipantList());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public void execute_twoParticipantsDifferentGroupsInHouse_commandSuccess() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        String toFind \u003d \"Red\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        FindHousePredicate predicate \u003d prepareHousePredicate(toFind);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        ListHouseCommand listHouseCommand \u003d new ListHouseCommand(predicate, toFind);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        expectedModel.updateFilteredParticipantList(predicate);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        assertCommandSuccess(listHouseCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertEquals(Arrays.asList(ALICIA, COCO), model.getFilteredParticipantList());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shanseet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanseet": 86,
      "weizhang05": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListOglCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.SONIA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getAddressBookWithOneFreshmanAndOgl;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.ogl.FindingOglPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "public class ListOglCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    private Model model \u003d new ModelManager(getAddressBookWithOneFreshmanAndOgl(), new UserPrefs()); //no Freshman"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getAddressBookWithOneFreshmanAndOgl(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    private FindingOglPredicate preparePredicate() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        return new FindingOglPredicate(Arrays.asList(\"OGL\".split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    public void execute_listHasOneOgl() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        model \u003d new ModelManager(getAddressBookWithOneFreshmanAndOgl(), new UserPrefs()); //no Freshman"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        expectedModel \u003d new ModelManager(getAddressBookWithOneFreshmanAndOgl(), new UserPrefs()); //no Freshman"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        FindingOglPredicate predicate \u003d preparePredicate();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        ListOglCommand command \u003d new ListOglCommand(predicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        expectedModel.updateFilteredParticipantList(predicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertEquals(Arrays.asList(SONIA), model.getFilteredParticipantList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    public void execute_listHasNoOgl() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs()); //no Freshman"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        FindingOglPredicate predicate \u003d preparePredicate();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        ListOglCommand command \u003d new ListOglCommand(predicate);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        expectedModel.updateFilteredParticipantList(predicate);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredParticipantList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ssunil3232": 53,
      "weizhang05": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListParticipantCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.MARK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getAddressBookWithOneFreshmanAndOgl;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.FindingParticipantPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "public class ListParticipantCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    //private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    //private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs()); //no Freshman"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    private Model model \u003d new ModelManager(getAddressBookWithOneFreshmanAndOgl(), new UserPrefs()); //no Freshman"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getAddressBookWithOneFreshmanAndOgl(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    private FindingParticipantPredicate preparePredicate() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        return new FindingParticipantPredicate(Arrays.asList(\"Freshman\".split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    public void execute_listHasOneFreshman() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        model \u003d new ModelManager(getAddressBookWithOneFreshmanAndOgl(), new UserPrefs()); //no Freshman"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        expectedModel \u003d new ModelManager(getAddressBookWithOneFreshmanAndOgl(), new UserPrefs()); //no Freshman"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        FindingParticipantPredicate predicate \u003d preparePredicate();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        ListParticipantCommand command \u003d new ListParticipantCommand(predicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        expectedModel.updateFilteredParticipantList(predicate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertEquals(Arrays.asList(MARK), model.getFilteredParticipantList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    public void execute_listHasNoFreshman() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs()); //no Freshman"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        FindingParticipantPredicate predicate \u003d preparePredicate();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        ListParticipantCommand command \u003d new ListParticipantCommand(predicate);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        expectedModel.updateFilteredParticipantList(predicate);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "                expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredParticipantList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ssunil3232": 56,
      "weizhang05": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RandomizeCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import static seedu.address.model.util.SampleDataUtil.getTagSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.commons.Value;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.grouping.Group;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.grouping.House;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Birthday;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Major;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Participant;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Sex;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "public class RandomizeCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public void execute_randomizeSuccessful() throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        House validHouse \u003d new House(\"Red\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        modelManager.addHouse(validHouse);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        validHouse \u003d new House(\"Blue\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        modelManager.addHouse(validHouse);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Group validGroup \u003d new Group(\"R1\", \"Red\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        modelManager.addGroup(validGroup);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        validGroup \u003d new Group(\"B1\", \"Blue\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        modelManager.addGroup(validGroup);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Participant validParticipant \u003d new Participant(new Name(\"Alex Yeoh\"), new Sex(\"M\"), new Birthday(\"01021996\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                new Phone(\"87438807\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                new Email(\"alexyeoh@example.com\"), new Major(\"Computer Science\"), new Group(\"\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                getTagSet(Value.FRESHMAN));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        modelManager.addParticipant(validParticipant);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        validParticipant \u003d new Participant(new Name(\"Bernice Yu\"), new Sex(\"M\"), new Birthday(\"01021996\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                new Phone(\"99272758\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                new Email(\"berniceyu@example.com\"), new Major(\"Information System\"), new Group(\"\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                getTagSet(Value.FRESHMAN));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        modelManager.addParticipant(validParticipant);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Participant validOgl \u003d new Participant(new Name(\"OGL 1\"), new Sex(\"M\"), new Birthday(\"01021996\"),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                new Phone(\"91234567\"),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                new Email(\"ogl1@example.com\"), new Major(\"Computer Science\"), new Group(\"\"),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                getTagSet(Value.OGL));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        modelManager.addParticipant(validOgl);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        validOgl \u003d new Participant(new Name(\"OGL 2\"), new Sex(\"F\"), new Birthday(\"01021996\"),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                new Phone(\"98765432\"),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                new Email(\"ogl2@example.com\"), new Major(\"Information Security\"), new Group(\"\"),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                getTagSet(Value.OGL));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        modelManager.addParticipant(validOgl);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        CommandResult commandResult \u003d new RandomizeCommand().execute(modelManager, commandHistory);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertEquals(String.format(RandomizeCommand.MESSAGE_SUCCESS), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public void execute_insufficientParticipants_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        thrown.expectMessage(RandomizeCommand.MESSAGE_INSUFFICIENT_PARTICIPANTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        House validHouse \u003d new House(\"Red\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        modelManager.addHouse(validHouse);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        validHouse \u003d new House(\"Blue\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        modelManager.addHouse(validHouse);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Group validGroup \u003d new Group(\"R1\", \"Red\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        modelManager.addGroup(validGroup);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        validGroup \u003d new Group(\"B1\", \"Blue\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        modelManager.addGroup(validGroup);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Participant validParticipant \u003d new Participant(new Name(\"Alex Yeoh\"), new Sex(\"M\"), new Birthday(\"01021996\"),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                new Phone(\"87438807\"),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                new Email(\"alexyeoh@example.com\"), new Major(\"Computer Science\"), new Group(\"\"),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                getTagSet(Value.FRESHMAN));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        modelManager.addParticipant(validParticipant);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        new RandomizeCommand().execute(modelManager, commandHistory);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public void execute_insufficientGroups_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        thrown.expectMessage(RandomizeCommand.MESSAGE_INSUFFICIENT_GROUPS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        House validHouse \u003d new House(\"Red\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        modelManager.addHouse(validHouse);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Group validGroup \u003d new Group(\"R1\", \"Red\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        modelManager.addGroup(validGroup);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Participant validParticipant \u003d new Participant(new Name(\"Alex Yeoh\"), new Sex(\"M\"), new Birthday(\"01021996\"),"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                new Phone(\"87438807\"),"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                new Email(\"alexyeoh@example.com\"), new Major(\"Computer Science\"), new Group(\"\"),"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                getTagSet(Value.FRESHMAN));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        modelManager.addParticipant(validParticipant);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        validParticipant \u003d new Participant(new Name(\"Bernice Yu\"), new Sex(\"M\"), new Birthday(\"01021996\"),"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                new Phone(\"99272758\"),"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                new Email(\"berniceyu@example.com\"), new Major(\"Information System\"), new Group(\"\"),"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                getTagSet(Value.FRESHMAN));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        modelManager.addParticipant(validParticipant);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Participant validOgl \u003d new Participant(new Name(\"OGL 1\"), new Sex(\"M\"), new Birthday(\"01021996\"),"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                new Phone(\"91234567\"),"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                new Email(\"ogl1@example.com\"), new Major(\"Computer Science\"), new Group(\"\"),"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                getTagSet(Value.OGL));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        modelManager.addParticipant(validOgl);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        validOgl \u003d new Participant(new Name(\"OGL 2\"), new Sex(\"F\"), new Birthday(\"01021996\"),"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                new Phone(\"98765432\"),"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                new Email(\"ogl2@example.com\"), new Major(\"Information Security\"), new Group(\"\"),"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                getTagSet(Value.OGL));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        modelManager.addParticipant(validOgl);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        new RandomizeCommand().execute(modelManager, commandHistory);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public void execute_insufficientOgls_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        thrown.expectMessage(RandomizeCommand.MESSAGE_INSUFFICIENT_OGLS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        House validHouse \u003d new House(\"Red\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        modelManager.addHouse(validHouse);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        validHouse \u003d new House(\"Blue\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        modelManager.addHouse(validHouse);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Group validGroup \u003d new Group(\"R1\", \"Red\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        modelManager.addGroup(validGroup);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        validGroup \u003d new Group(\"B1\", \"Blue\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        modelManager.addGroup(validGroup);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Participant validParticipant \u003d new Participant(new Name(\"Alex Yeoh\"), new Sex(\"M\"), new Birthday(\"01021996\"),"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                new Phone(\"87438807\"),"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                new Email(\"alexyeoh@example.com\"), new Major(\"Computer Science\"), new Group(\"\"),"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                getTagSet(Value.FRESHMAN));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        modelManager.addParticipant(validParticipant);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        validParticipant \u003d new Participant(new Name(\"Bernice Yu\"), new Sex(\"M\"), new Birthday(\"01021996\"),"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                new Phone(\"99272758\"),"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                new Email(\"berniceyu@example.com\"), new Major(\"Information System\"), new Group(\"\"),"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                getTagSet(Value.FRESHMAN));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        modelManager.addParticipant(validParticipant);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Participant validOgl \u003d new Participant(new Name(\"OGL 1\"), new Sex(\"M\"), new Birthday(\"01021996\"),"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                new Phone(\"91234567\"),"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                new Email(\"ogl1@example.com\"), new Major(\"Computer Science\"), new Group(\"\"),"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                getTagSet(Value.OGL));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        modelManager.addParticipant(validOgl);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        new RandomizeCommand().execute(modelManager, commandHistory);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weizhang05": 174
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SaveChartCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.commands.SaveChartCommand.MESSAGE_NO_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.commands.SaveChartCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "public class SaveChartCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private static final String ALPHA_NUMERIC_STRING \u003d \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private static final Integer FILE_NAME_MAX_LENGTH \u003d 1000;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public void execute_emptyAddressBook_throwsCommandException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        assertCommandFailure(new SaveChartCommand(), model, commandHistory, MESSAGE_NO_PERSON);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public void execute_emptyFileName_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_SUCCESS, false, false,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                false, true);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        assertCommandSuccess(new SaveChartCommand(), model, commandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public void execute_anyFileName_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_SUCCESS, false, false,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                false, true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        String fileName \u003d generateRandomString((int) (Math.random() * FILE_NAME_MAX_LENGTH + 1));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        assertCommandSuccess(new SaveChartCommand(fileName), model, commandHistory, expectedCommandResult,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * Generate a random alphanumeric string"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public static String generateRandomString(int count) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        while (count-- !\u003d 0) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            int character \u003d (int) (Math.random() * ALPHA_NUMERIC_STRING.length());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            builder.append(ALPHA_NUMERIC_STRING.charAt(character));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SelectCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SelectCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredParticipantList().size());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_THIRD_PERSON);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(lastPersonIndex);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredParticipantList().size() + 1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getAddressBook().getParticipantList().size());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommand));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(1));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        // different participant -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(selectSecondCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index},"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * and checks that the model\u0027s selected participant is set to the participant"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * at {@code index} in the filtered participant list."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionSuccess(Index index) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS, index.getOneBased());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        expectedModel.setSelectedParticipant(model.getFilteredParticipantList().get(index.getZeroBased()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(selectCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionFailure(Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(selectCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 102,
      "weizhang05": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SizeCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanseet"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import static seedu.address.testutil.TypicalGroupHousePersonList.getTypicalAddressBookWithGroupHouse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanseet"
        },
        "content": "public class SizeCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBookWithGroupHouse(), new UserPrefs());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public void execute_successfulSize() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        SizeCommand sizeCommand \u003d new SizeCommand();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        String expectedMessage \u003d String.format(sizeCommand.MESSAGE_SUCCESS, 4, 1, 1, 4, 3);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        assertCommandSuccess(sizeCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanseet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanseet": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/StatCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.commands.StatCommand.MESSAGE_NO_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.commands.StatCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "public class StatCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public void execute_emptyAddressBook_throwsCommandException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        assertCommandFailure(new StatCommand(), model, commandHistory, MESSAGE_NO_PERSON);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public void execute_statCommand_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_SUCCESS, false, false,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                true, false);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        assertCommandSuccess(new StatCommand(), model, commandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ViewGroupHouseCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanseet"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import static seedu.address.testutil.TypicalGroupHousePersonList.getTypicalAddressBookWithGroupHouse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanseet"
        },
        "content": "public class ViewGroupHouseCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBookWithGroupHouse(), new UserPrefs());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public void execute_viewGroup_successful() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        ViewGroupsCommand viewGroupsCommand \u003d new ViewGroupsCommand();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        ArrayList\u003cString\u003e groupList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        groupList.add(\"(R1, Red)\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        groupList.add(\"(R2, Red)\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        groupList.add(\"(B1, Blue)\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        groupList.add(\"(B2, Blue)\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        String expectedMessage \u003d String.format(ViewGroupsCommand.MESSAGE_SUCCESS, groupList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        assertCommandSuccess(viewGroupsCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public void execute_viewHouse_successful() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        ViewHousesCommand viewHousesCommand \u003d new ViewHousesCommand();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        ArrayList\u003cString\u003e houseList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        houseList.add(\"Red\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        houseList.add(\"Blue\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        houseList.add(\"Yellow\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        String expectedMessage \u003d String.format(ViewHousesCommand.MESSAGE_SUCCESS, houseList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        assertCommandSuccess(viewHousesCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanseet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanseet": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GROUP_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GROUP_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MAJOR_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MAJOR_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MAJOR_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SEX_DESC_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SEX_DESC_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MAJOR_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Email;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Major;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Participant;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Phone;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Participant expectedParticipant \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + SEX_DESC_BOB + BIRTHDAY_DESC_BOB"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                + MAJOR_DESC_BOB + GROUP_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedParticipant));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + SEX_DESC_BOB + BIRTHDAY_DESC_BOB"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                + MAJOR_DESC_BOB + GROUP_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedParticipant));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + SEX_DESC_BOB + BIRTHDAY_DESC_BOB + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                + MAJOR_DESC_BOB + GROUP_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedParticipant));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + SEX_DESC_BOB + BIRTHDAY_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                + MAJOR_DESC_BOB + GROUP_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedParticipant));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + SEX_DESC_BOB + BIRTHDAY_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                + EMAIL_DESC_BOB + MAJOR_DESC_AMY + MAJOR_DESC_BOB"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                + GROUP_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedParticipant));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Participant expectedParticipantMultipleTags \u003d new PersonBuilder(BOB)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + SEX_DESC_BOB + BIRTHDAY_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                + EMAIL_DESC_BOB + MAJOR_DESC_BOB + GROUP_DESC_BOB"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedParticipantMultipleTags));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Participant expectedParticipant \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + SEX_DESC_AMY + BIRTHDAY_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                        + EMAIL_DESC_AMY + MAJOR_DESC_AMY + GROUP_DESC_AMY,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                new AddCommand(expectedParticipant));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + MAJOR_DESC_BOB,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + MAJOR_DESC_BOB,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + SEX_DESC_BOB + BIRTHDAY_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                        + VALID_EMAIL_BOB + MAJOR_DESC_BOB,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + SEX_DESC_BOB + BIRTHDAY_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                        + EMAIL_DESC_BOB + VALID_MAJOR_BOB,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_MAJOR_BOB,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + SEX_DESC_BOB + BIRTHDAY_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                + EMAIL_DESC_BOB + MAJOR_DESC_BOB + GROUP_DESC_BOB"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + SEX_DESC_BOB + BIRTHDAY_DESC_BOB"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                + EMAIL_DESC_BOB + MAJOR_DESC_BOB"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                + GROUP_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + SEX_DESC_BOB + BIRTHDAY_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                + INVALID_EMAIL_DESC + MAJOR_DESC_BOB + GROUP_DESC_BOB"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + SEX_DESC_BOB + BIRTHDAY_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                + EMAIL_DESC_BOB + INVALID_MAJOR_DESC + GROUP_DESC_BOB"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Major.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + SEX_DESC_BOB + BIRTHDAY_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                + EMAIL_DESC_BOB + MAJOR_DESC_BOB + GROUP_DESC_BOB"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + SEX_DESC_BOB + BIRTHDAY_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                        + EMAIL_DESC_BOB + INVALID_MAJOR_DESC + GROUP_DESC_BOB, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + SEX_DESC_BOB + BIRTHDAY_DESC_BOB"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                        + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                + MAJOR_DESC_BOB + GROUP_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 48,
      "-": 99,
      "weizhang05": 16
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddGroupCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanseet"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.logic.commands.AddGroupCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanseet"
        },
        "content": "public class AddGroupCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    private AddGroupCommandParser parser \u003d new AddGroupCommandParser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public void parse_validArgs_returnsAddGroupCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        assertParseSuccess(parser, \"R1 Red\", new AddGroupCommand(\"R1\", \"Red\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public void parse_validArgsDifferentCapsWithSpaces_returnsAddGroupCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        assertParseSuccess(parser, \"b1    bluE\", new AddGroupCommand(\"B1\", \"Blue\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public void parse_shorterArgs_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        assertParseFailure(parser, \"r1 \","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddGroupCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public void parse_longerArgs_throwsParseException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        assertParseFailure(parser, \"R1 Red bluE\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddGroupCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanseet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanseet": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddHouseCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanseet"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.logic.commands.AddHouseCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanseet"
        },
        "content": "public class AddHouseCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    private AddHouseCommandParser parser \u003d new AddHouseCommandParser();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public void parse_validArgs_returnsAddHouseCommand() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        assertParseSuccess(parser, \"Red\", new AddHouseCommand(\"Red\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public void parse_validArgsDifferentCaps_returnsAddHouseCommand() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        assertParseSuccess(parser, \"red_HouSe\", new AddHouseCommand(\"Red_house\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public void parse_emptyArgs() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        assertParseFailure(parser, \"\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddHouseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public void parse_longArgs() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        assertParseFailure(parser, \"Red red_HouSe\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddHouseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanseet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanseet": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Participant;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Participant participant \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(participant));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertEquals(new AddCommand(participant), command);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Participant participant \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(participant).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 136,
      "weizhang05": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteGroupCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanseet"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.logic.commands.DeleteGroupCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanseet"
        },
        "content": "public class DeleteGroupCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    private DeleteGroupCommandParser parser \u003d new DeleteGroupCommandParser();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public void parse_validArgs_returnsDeleteGroupCommand() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        assertParseSuccess(parser, \"R1\", new DeleteGroupCommand(\"R1\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public void parse_validArgsDifferentCaps_returnsDeleteGroupCommand() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        assertParseSuccess(parser, \"red1\", new DeleteGroupCommand(\"RED1\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public void parse_emptyArgs() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        assertParseFailure(parser, \"\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteGroupCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public void parse_longArgs() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        assertParseFailure(parser, \"R1 red1\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteGroupCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanseet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanseet": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteHouseCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanseet"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.logic.commands.DeleteHouseCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanseet"
        },
        "content": "public class DeleteHouseCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    private DeleteHouseCommandParser parser \u003d new DeleteHouseCommandParser();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public void parse_validArgs_returnsDeleteGroupCommand() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        assertParseSuccess(parser, \"Red\", new DeleteHouseCommand(\"Red\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public void parse_validArgsDifferentCaps_returnsDeleteGroupCommand() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        assertParseSuccess(parser, \"bLuE\", new DeleteHouseCommand(\"Blue\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public void parse_emptyArgs() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        assertParseFailure(parser, \"\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteHouseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public void parse_longArgs() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        assertParseFailure(parser, \"Red bLuE\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteHouseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanseet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanseet": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MAJOR_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MAJOR_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MAJOR_DESC_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MAJOR_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MAJOR_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Email;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Major;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_MAJOR_DESC, Major.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Participant} being edited,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_MAJOR_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                + EMAIL_DESC_AMY + MAJOR_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withMajor(VALID_MAJOR_AMY)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + MAJOR_DESC_AMY;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withMajor(VALID_MAJOR_AMY).build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + MAJOR_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                + TAG_DESC_FRIEND + PHONE_DESC_AMY + MAJOR_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                + PHONE_DESC_BOB + MAJOR_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withMajor(VALID_MAJOR_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + MAJOR_DESC_BOB"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                .withMajor(VALID_MAJOR_BOB).build();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 17,
      "-": 189,
      "weizhang05": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditGroupCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanseet"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.logic.commands.EditGroupCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanseet"
        },
        "content": "public class EditGroupCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    private EditGroupCommandParser parser \u003d new EditGroupCommandParser();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public void parse_validArgs_returnsEditGroupCommand() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        assertParseSuccess(parser, \"R1 R2\", new EditGroupCommand(\"R1\", \"R2\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public void parse_validArgsDifferentCapsWithSpaces_returnsAddGroupCommand() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        assertParseSuccess(parser, \"r1    R3\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                new EditGroupCommand(\"R1\", \"R3\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public void parse_shorterArgs_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        assertParseFailure(parser, \"r1\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditGroupCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public void parse_longerArgs_throwsParseException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        assertParseFailure(parser, \"R1 R2 R3\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditGroupCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanseet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanseet": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditHouseCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanseet"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.logic.commands.EditHouseCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanseet"
        },
        "content": "public class EditHouseCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    private EditHouseCommandParser parser \u003d new EditHouseCommandParser();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public void parse_validArgs_returnsEditGroupCommand() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        assertParseSuccess(parser, \"Red Green\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                new EditHouseCommand(\"Red\", \"Green\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public void parse_validArgsDifferentCapsWithSpaces_returnsAddGroupCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        assertParseSuccess(parser, \"reD   bLue\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                new EditHouseCommand(\"Red\", \"Green\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public void parse_shorterArgs_throwsParseException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        assertParseFailure(parser, \"Red\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditHouseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public void parse_longerArgs_throwsParseException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        assertParseFailure(parser, \"Red Green bLue\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditHouseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanseet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanseet": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 33,
      "weizhang05": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    private static final String VALID_PHONE \u003d \"12345678\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private static final String VALID_MAJOR \u003d \"CEG\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseMajor((String) null));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseMajor(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        Major expectedMajor \u003d new Major(VALID_MAJOR);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        assertEquals(expectedMajor, ParserUtil.parseMajor(VALID_MAJOR));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_MAJOR + WHITESPACE;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        Major expectedMajor \u003d new Major(VALID_MAJOR);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        assertEquals(expectedMajor, ParserUtil.parseMajor(addressWithWhitespace));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(null);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(INVALID_TAG);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(null);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 8,
      "shanseet": 1,
      "-": 195,
      "weizhang05": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MAJOR_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleIntegerProperty;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import javafx.collections.ObservableMap;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.grouping.Group;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.grouping.House;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Participant;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.exceptions.DuplicateParticipantException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getParticipantList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(null);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        // Two participants with the same identity fields"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Participant editedAlice \u003d new PersonBuilder(ALICE).withMajor(VALID_MAJOR_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        List\u003cParticipant\u003e newParticipants \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newParticipants);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        thrown.expect(DuplicateParticipantException.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        addressBook.hasParticipant(null);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertFalse(addressBook.hasParticipant(ALICE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        addressBook.addParticipant(ALICE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertTrue(addressBook.hasParticipant(ALICE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        addressBook.addParticipant(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Participant editedAlice \u003d new PersonBuilder(ALICE).withMajor(VALID_MAJOR_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertTrue(addressBook.hasParticipant(editedAlice));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        addressBook.getParticipantList().remove(0);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener_withInvalidationListener_listenerAdded() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleIntegerProperty counter \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter.set(counter.get() + 1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addListener(listener);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        addressBook.addParticipant(ALICE);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, counter.get());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener_withInvalidationListener_listenerRemoved() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleIntegerProperty counter \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter.set(counter.get() + 1);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addListener(listener);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removeListener(listener);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        addressBook.addParticipant(ALICE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, counter.get());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * A stub ReadOnlyAddressBook whose participants list can violate interface constraints."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        private final ObservableList\u003cParticipant\u003e participants \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        private final ObservableList\u003cGroup\u003e groups \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        AddressBookStub(Collection\u003cParticipant\u003e participants) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            this.participants.setAll(participants);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        public ObservableMap\u003cString, Integer\u003e getAgeData() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        public ObservableMap\u003cString, Integer\u003e getMajorData() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        public ObservableMap\u003cString, Integer\u003e getSexData() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        public ObservableList\u003cParticipant\u003e getParticipantList() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            return participants;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        public ObservableList\u003cGroup\u003e getGroupList() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            return groups;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        public ObservableList\u003cHouse\u003e getHouseList() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 14,
      "-": 121,
      "weizhang05": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PARTICIPANTS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Participant;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.exceptions.ParticipantNotFoundException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertEquals(null, modelManager.getSelectedParticipant());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(null);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(null);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        modelManager.hasParticipant(null);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertFalse(modelManager.hasParticipant(ALICE));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        modelManager.addParticipant(ALICE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertTrue(modelManager.hasParticipant(ALICE));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson_personIsSelectedAndFirstPersonInFilteredPersonList_selectionCleared() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        modelManager.addParticipant(ALICE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        modelManager.setSelectedParticipant(ALICE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        modelManager.deleteParticipant(ALICE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertEquals(null, modelManager.getSelectedParticipant());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson_personIsSelectedAndSecondPersonInFilteredPersonList_firstPersonSelected() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        modelManager.addParticipant(ALICE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        modelManager.addParticipant(BOB);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertEquals(Arrays.asList(ALICE, BOB), modelManager.getFilteredParticipantList());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        modelManager.setSelectedParticipant(BOB);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        modelManager.deleteParticipant(BOB);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertEquals(ALICE, modelManager.getSelectedParticipant());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_personIsSelected_selectedPersonUpdated() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        modelManager.addParticipant(ALICE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        modelManager.setSelectedParticipant(ALICE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Participant updatedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        modelManager.setParticipant(ALICE, updatedAlice);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertEquals(updatedAlice, modelManager.getSelectedParticipant());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        modelManager.getFilteredParticipantList().remove(0);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setSelectedPerson_personNotInFilteredPersonList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        thrown.expect(ParticipantNotFoundException.class);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        modelManager.setSelectedParticipant(ALICE);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setSelectedPerson_personInFilteredPersonList_setsSelectedPerson() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        modelManager.addParticipant(ALICE);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertEquals(Collections.singletonList(ALICE), modelManager.getFilteredParticipantList());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        modelManager.setSelectedParticipant(ALICE);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertEquals(ALICE, modelManager.getSelectedParticipant());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        modelManager.updateFilteredParticipantList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        modelManager.updateFilteredParticipantList(PREDICATE_SHOW_ALL_PARTICIPANTS);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 155,
      "weizhang05": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/model/grouping/FindGroupHousePredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanseet"
        },
        "content": "package seedu.address.model.grouping;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Participant;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanseet"
        },
        "content": "public class FindGroupHousePredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    private List\u003cString\u003e emptyString \u003d Collections.singletonList(\"EMPTY\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    private Participant withGroupHouse \u003d new PersonBuilder().withGroup(\"R1\", \"Red\").build();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    private Participant withEmptyGroup \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public void test_groupContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        FindGroupPredicate firstPredicate \u003d new FindGroupPredicate(Collections.singletonList(\"R1\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        FindHousePredicate firstPredicateHouse \u003d new FindHousePredicate(Collections.singletonList(\"Red\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        assertTrue(firstPredicate.test(withGroupHouse));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        FindGroupPredicate secondPredicate \u003d new FindGroupPredicate(emptyString);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        assertTrue(secondPredicate.test(withEmptyGroup));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public void test_groupContainsKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        // participant with empty group"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        FindGroupPredicate secondPredicate \u003d new FindGroupPredicate(Collections.singletonList(\"R1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        FindHousePredicate secondPredicateHouse \u003d new FindHousePredicate(Collections.singletonList(\"Red\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        assertFalse(secondPredicate.test(withEmptyGroup));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        assertFalse(secondPredicateHouse.test(withEmptyGroup));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        // participant with non-empty group"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        FindGroupPredicate thirdPredicate \u003d new FindGroupPredicate(emptyString);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        assertFalse(thirdPredicate.test(withGroupHouse));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        // wrong keywords"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        FindGroupPredicate fourthPredicate \u003d new FindGroupPredicate(Collections.singletonList(\"G1\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        FindHousePredicate fourthPredicateHouse \u003d new FindHousePredicate(Collections.singletonList(\"Green\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        assertFalse(fourthPredicate.test(withGroupHouse));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        assertFalse(fourthPredicateHouse.test(withGroupHouse));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shanseet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanseet": 46,
      "weizhang05": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/BirthdayTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanseet"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.model.participant.Birthday;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanseet"
        },
        "content": "public class BirthdayTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Birthday(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public void constructor_invalidBirthday_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        String invalidBirthday \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Birthday(invalidBirthday));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public void isValidBirthday() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        // null birthday"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Birthday.isValidBirthday(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        // invalid birthdays"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        assertFalse(Birthday.isValidBirthday(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        assertFalse(Birthday.isValidBirthday(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        assertFalse(Birthday.isValidBirthday(\"120198\")); // less than 8 numbers"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        assertFalse(Birthday.isValidBirthday(\"120199898\")); // more than 8 numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        assertFalse(Birthday.isValidBirthday(\"firstmay\")); // non-numeric"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        assertFalse(Birthday.isValidBirthday(\"12Jan98\")); // alphabets within digits"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        assertFalse(Birthday.isValidBirthday(\"1201 1998\")); // spaces within digits"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        assertFalse(Birthday.isValidBirthday(\"32011998\")); // invalid date"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        assertFalse(Birthday.isValidBirthday(\"00011998\")); // invalid date"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        assertFalse(Birthday.isValidBirthday(\"01131998\")); // invalid month"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        assertFalse(Birthday.isValidBirthday(\"13001998\")); // invalid month"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        assertFalse(Birthday.isValidBirthday(\"10012111\")); // invalid year"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        // valid birthday"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        assertTrue(Birthday.isValidBirthday(\"12011998\")); // exactly 8 numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanseet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanseet": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/EmailTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Email;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Email(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidEmail() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 62,
      "weizhang05": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/MajorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Major;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "public class MajorTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Major(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Major(invalidAddress));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidAddress() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Major.isValidMajor(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        assertFalse(Major.isValidMajor(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        assertFalse(Major.isValidMajor(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        assertTrue(Major.isValidMajor(\"CS\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        assertTrue(Major.isValidMajor(\"cs\")); // one character"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        assertTrue(Major.isValidMajor(\"cOmputer SCience\")); // long address"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 9,
      "-": 28,
      "weizhang05": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/NameContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        // different participant -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345678\", \"alice@email.com\","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                \"Computer\", \"Science\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345678\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                .withEmail(\"alice@email.com\").withMajor(\"Computer Science\").build()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 1,
      "shanseet": 3,
      "-": 71,
      "weizhang05": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/NameTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 41,
      "weizhang05": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/ParticipantTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MAJOR_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SEX_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Participant;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "public class ParticipantTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Participant participant \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        participant.getTags().remove(0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertTrue(ALICE.isSameParticipant(ALICE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertFalse(ALICE.isSameParticipant(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Participant editedAlice \u003d new PersonBuilder(ALICE).withSex(VALID_SEX_BOB).withBirthday(VALID_BIRTHDAY_BOB)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertFalse(ALICE.isSameParticipant(editedAlice));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertFalse(ALICE.isSameParticipant(editedAlice));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withMajor(VALID_MAJOR_BOB)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertTrue(ALICE.isSameParticipant(editedAlice));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withMajor(VALID_MAJOR_BOB)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertTrue(ALICE.isSameParticipant(editedAlice));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withMajor(VALID_MAJOR_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertTrue(ALICE.isSameParticipant(editedAlice));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Participant aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        // different participant -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Participant editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withMajor(VALID_MAJOR_BOB).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 8,
      "-": 80,
      "weizhang05": 15
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PhoneTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Phone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Phone(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPhone() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"91234\")); // less than 8 numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"+121234567890123456\")); // 16 digit long number"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"91234567\")); // exactly 8 numbers"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"+124293842033123\")); // exactly 15 numbers long international phone number"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanseet": 4,
      "-": 37,
      "weizhang05": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/UniqueParticipantListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MAJOR_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Participant;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.UniqueParticipantList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.exceptions.DuplicateParticipantException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.exceptions.ParticipantNotFoundException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "public class UniqueParticipantListTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    private final UniqueParticipantList uniqueParticipantList \u003d new UniqueParticipantList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        uniqueParticipantList.contains(null);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertFalse(uniqueParticipantList.contains(ALICE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        uniqueParticipantList.add(ALICE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertTrue(uniqueParticipantList.contains(ALICE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        uniqueParticipantList.add(ALICE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Participant editedAlice \u003d new PersonBuilder(ALICE).withMajor(VALID_MAJOR_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertTrue(uniqueParticipantList.contains(editedAlice));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        uniqueParticipantList.add(null);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        uniqueParticipantList.add(ALICE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        thrown.expect(DuplicateParticipantException.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        uniqueParticipantList.add(ALICE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        uniqueParticipantList.setParticipant(null, ALICE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        uniqueParticipantList.setParticipant(ALICE, null);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        thrown.expect(ParticipantNotFoundException.class);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        uniqueParticipantList.setParticipant(ALICE, ALICE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        uniqueParticipantList.add(ALICE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        uniqueParticipantList.setParticipant(ALICE, ALICE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        UniqueParticipantList expectedUniqueParticipantList \u003d new UniqueParticipantList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        expectedUniqueParticipantList.add(ALICE);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertEquals(expectedUniqueParticipantList, uniqueParticipantList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        uniqueParticipantList.add(ALICE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Participant editedAlice \u003d new PersonBuilder(ALICE).withMajor(VALID_MAJOR_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        uniqueParticipantList.setParticipant(ALICE, editedAlice);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        UniqueParticipantList expectedUniqueParticipantList \u003d new UniqueParticipantList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        expectedUniqueParticipantList.add(editedAlice);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertEquals(expectedUniqueParticipantList, uniqueParticipantList);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        uniqueParticipantList.add(ALICE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        uniqueParticipantList.setParticipant(ALICE, BOB);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        UniqueParticipantList expectedUniqueParticipantList \u003d new UniqueParticipantList();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        expectedUniqueParticipantList.add(BOB);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertEquals(expectedUniqueParticipantList, uniqueParticipantList);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        uniqueParticipantList.add(ALICE);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        uniqueParticipantList.add(BOB);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        thrown.expect(DuplicateParticipantException.class);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        uniqueParticipantList.setParticipant(ALICE, BOB);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        uniqueParticipantList.remove(null);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        thrown.expect(ParticipantNotFoundException.class);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        uniqueParticipantList.remove(ALICE);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        uniqueParticipantList.add(ALICE);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        uniqueParticipantList.remove(ALICE);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        UniqueParticipantList expectedUniqueParticipantList \u003d new UniqueParticipantList();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertEquals(expectedUniqueParticipantList, uniqueParticipantList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        uniqueParticipantList.setParticipants((UniqueParticipantList) null);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        uniqueParticipantList.add(ALICE);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        UniqueParticipantList expectedUniqueParticipantList \u003d new UniqueParticipantList();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        expectedUniqueParticipantList.add(BOB);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        uniqueParticipantList.setParticipants(expectedUniqueParticipantList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertEquals(expectedUniqueParticipantList, uniqueParticipantList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        uniqueParticipantList.setParticipants((List\u003cParticipant\u003e) null);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        uniqueParticipantList.add(ALICE);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        List\u003cParticipant\u003e participantList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        uniqueParticipantList.setParticipants(participantList);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        UniqueParticipantList expectedUniqueParticipantList \u003d new UniqueParticipantList();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        expectedUniqueParticipantList.add(BOB);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertEquals(expectedUniqueParticipantList, uniqueParticipantList);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        List\u003cParticipant\u003e listWithDuplicateParticipants \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        thrown.expect(DuplicateParticipantException.class);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        uniqueParticipantList.setParticipants(listWithDuplicateParticipants);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        uniqueParticipantList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 1,
      "-": 121,
      "weizhang05": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedParticipantTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import static seedu.address.storage.JsonAdaptedParticipant.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Major;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "public class JsonAdaptedParticipantTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private static final String INVALID_SEX \u003d \"ABC\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private static final String INVALID_BIRTHDAY \u003d \"123\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private static final String INVALID_MAJOR \u003d \" \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private static final String INVALID_GROUP \u003d \" \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private static final String VALID_SEX \u003d BENSON.getSex().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private static final String VALID_BIRTHDAY \u003d BENSON.getBirthday().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getMajor().toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private static final String VALID_GROUP \u003d BENSON.getGroup().toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    private static final String VALID_HOUSE \u003d null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        JsonAdaptedParticipant person \u003d new JsonAdaptedParticipant(BENSON);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        JsonAdaptedParticipant person \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                new JsonAdaptedParticipant(INVALID_NAME, VALID_SEX, VALID_BIRTHDAY, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                        VALID_ADDRESS, VALID_GROUP, VALID_HOUSE, VALID_TAGS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        JsonAdaptedParticipant person \u003d new JsonAdaptedParticipant(null, VALID_SEX, VALID_BIRTHDAY, VALID_PHONE,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                VALID_EMAIL, VALID_ADDRESS, VALID_GROUP, VALID_HOUSE, VALID_TAGS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        JsonAdaptedParticipant person \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                new JsonAdaptedParticipant(VALID_NAME, VALID_SEX, VALID_BIRTHDAY, INVALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                        VALID_ADDRESS, VALID_GROUP, VALID_HOUSE, VALID_TAGS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        JsonAdaptedParticipant person \u003d new JsonAdaptedParticipant(VALID_NAME, VALID_SEX, VALID_BIRTHDAY, null,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                VALID_EMAIL, VALID_ADDRESS, VALID_GROUP, VALID_HOUSE, VALID_TAGS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        JsonAdaptedParticipant person \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                new JsonAdaptedParticipant(VALID_NAME, VALID_SEX, VALID_BIRTHDAY, VALID_PHONE, INVALID_EMAIL,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                        VALID_ADDRESS, VALID_GROUP, VALID_HOUSE, VALID_TAGS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        JsonAdaptedParticipant person \u003d new JsonAdaptedParticipant(VALID_NAME, VALID_SEX, VALID_BIRTHDAY, VALID_PHONE,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                null, VALID_ADDRESS, VALID_GROUP, VALID_HOUSE, VALID_TAGS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        JsonAdaptedParticipant person \u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                new JsonAdaptedParticipant(VALID_NAME, VALID_SEX, VALID_BIRTHDAY, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                        INVALID_MAJOR, VALID_GROUP, VALID_HOUSE, VALID_TAGS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        String expectedMessage \u003d Major.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        JsonAdaptedParticipant person \u003d new JsonAdaptedParticipant(VALID_NAME, VALID_SEX, VALID_BIRTHDAY, VALID_PHONE,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                VALID_EMAIL, null, VALID_GROUP, VALID_HOUSE, VALID_TAGS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Major.class.getSimpleName());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        JsonAdaptedParticipant person \u003d"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                new JsonAdaptedParticipant(VALID_NAME, VALID_SEX, VALID_BIRTHDAY, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shanseet"
        },
        "content": "                        VALID_ADDRESS, VALID_GROUP, VALID_HOUSE, invalidTags);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 10,
      "shanseet": 10,
      "-": 85,
      "weizhang05": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAddressBookStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(\"notJsonFormatAddressBook.json\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(\"invalidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(\"invalidAndValidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        original.addParticipant(HOON);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        original.removeParticipant(ALICE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        original.addParticipant(IDA);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(new AddressBook(), null);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 121,
      "weizhang05": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableAddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonSerializableAddressBookTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        thrown.expectMessage(JsonSerializableAddressBook.MESSAGE_DUPLICATE_PARTICIPANT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 52,
      "weizhang05": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AddressBookBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Participant;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBook addressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder(AddressBook addressBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Adds a new {@code Participant} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public AddressBookBuilder withPerson(Participant participant) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        addressBook.addParticipant(participant);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 30,
      "weizhang05": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import seedu.address.model.grouping.Group;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Birthday;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Major;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Participant;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Sex;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code participant}\u0027s details"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public EditPersonDescriptorBuilder(Participant participant) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        descriptor.setName(participant.getName());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        descriptor.setSex(participant.getSex());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        descriptor.setBirthday(participant.getBirthday());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        descriptor.setPhone(participant.getPhone());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        descriptor.setEmail(participant.getEmail());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        descriptor.setMajor(participant.getMajor());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        descriptor.setGroup(participant.getGroup());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        descriptor.setTags(participant.getTags());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * Sets the {@code Sex} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public EditPersonDescriptorBuilder withSex(String sex) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        descriptor.setSex(new Sex(sex));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * Sets the {@code Birthday} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public EditPersonDescriptorBuilder withBirthday(String birthday) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        descriptor.setBirthday(new Birthday(birthday));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * Sets the {@code Major} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public EditPersonDescriptorBuilder withMajor(String major) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        descriptor.setMajor(new Major(major));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * Sets the {@code Group} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public EditPersonDescriptorBuilder withGroup(String group) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        descriptor.setGroup(new Group(group));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 27,
      "-": 73,
      "weizhang05": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import seedu.address.model.grouping.Group;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Birthday;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Email;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Major;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Participant;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Sex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " * A utility class to help with building Participant objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alicia Pauline\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public static final String DEFAULT_SEX \u003d \"F\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public static final String DEFAULT_BIRTHDAY \u003d \"07081994\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public static final String DEFAULT_MAJOR \u003d \"Computer Science\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public static final String DEFAULT_GROUP \u003d \"\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private Sex sex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private Birthday birthday;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private Major major;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private Group group;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        sex \u003d new Sex(DEFAULT_SEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        birthday \u003d new Birthday(DEFAULT_BIRTHDAY);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        major \u003d new Major(DEFAULT_MAJOR);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        group \u003d new Group(DEFAULT_GROUP, null);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code participantToCopy}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public PersonBuilder(Participant participantToCopy) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        name \u003d participantToCopy.getName();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        sex \u003d participantToCopy.getSex();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        birthday \u003d participantToCopy.getBirthday();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        phone \u003d participantToCopy.getPhone();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        email \u003d participantToCopy.getEmail();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        major \u003d participantToCopy.getMajor();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        group \u003d participantToCopy.getGroup();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(participantToCopy.getTags());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Sets the {@code Name} of the {@code Participant} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Sets the {@code Sex} of the {@code Participant} that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public PersonBuilder withSex(String sex) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        this.sex \u003d new Sex(sex);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Sets the {@code Birthday} of the {@code Participant} that we are building."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public PersonBuilder withBirthday(String birthday) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        this.birthday \u003d new Birthday(birthday);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Participant} that we are building."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Sets the {@code Major} of the {@code Participant} that we are building."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public PersonBuilder withMajor(String major) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        this.major \u003d new Major(major);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Sets the {@code Phone} of the {@code Participant} that we are building."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Sets the {@code Email} of the {@code Participant} that we are building."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Sets the {@code Group} of the {@code Participant} that we are building."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public PersonBuilder withGroup(String group) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        this.group \u003d new Group(group);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shanseet"
        },
        "content": "     * Overloaded withGroup method to set the {@code Group} with a house name"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shanseet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public PersonBuilder withGroup(String group, String house) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        this.group \u003d new Group(group, house);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public Participant build() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        return new Participant(name, sex, birthday, phone, email, major, group, tags);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 34,
      "shanseet": 11,
      "-": 68,
      "weizhang05": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MAJOR;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SEX;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Participant;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " * A utility class for Participant."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Returns an add command string for adding the {@code participant}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public static String getAddCommand(Participant participant) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(participant);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Returns the part of command string for the given {@code participant}\u0027s details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public static String getPersonDetails(Participant participant) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        sb.append(PREFIX_NAME + participant.getName().fullName + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        sb.append(PREFIX_SEX + participant.getSex().value + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        sb.append(PREFIX_BIRTHDAY + participant.getBirthday().value + \" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        sb.append(PREFIX_PHONE + participant.getPhone().value + \" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        sb.append(PREFIX_EMAIL + participant.getEmail().value + \" \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        sb.append(PREFIX_MAJOR + participant.getMajor().value + \" \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        sb.append(PREFIX_GROUP + participant.getGroup().getGroupName() + \" \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        participant.getTags().stream().forEach("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        descriptor.getSex().ifPresent(sex -\u003e sb.append(PREFIX_SEX).append(sex.value).append(\" \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        descriptor.getBirthday().ifPresent(birthday -\u003e sb.append(PREFIX_BIRTHDAY).append(birthday.value).append(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        descriptor.getMajor().ifPresent(major -\u003e sb.append(PREFIX_MAJOR).append(major.value).append(\" \"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        descriptor.getGroup().ifPresent(group -\u003e sb.append(PREFIX_GROUP).append(group).append(\" \"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 7,
      "shanseet": 2,
      "-": 48,
      "weizhang05": 15
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Participant;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Returns the middle index of the participant in the {@code model}\u0027s participant list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        return Index.fromOneBased(model.getFilteredParticipantList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Returns the last index of the participant in the {@code model}\u0027s participant list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        return Index.fromOneBased(model.getFilteredParticipantList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Returns the participant in the {@code model}\u0027s participant list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public static Participant getPerson(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        return model.getFilteredParticipantList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 47,
      "weizhang05": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalGroupHousePersonList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanseet"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.model.grouping.Group;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanseet"
        },
        "content": "import seedu.address.model.grouping.House;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Participant;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanseet"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " * A utility class containing a list of {@code Participant}, {@code Group} and {@House} objects to be used in tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanseet"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanseet"
        },
        "content": "public class TypicalGroupHousePersonList {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public static final Participant ALICIA \u003d new PersonBuilder().withName(\"Alicia Alice\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            .withSex(\"F\").withBirthday(\"07081994\").withMajor(\"CS\").withEmail(\"alicia@example.com\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            .withPhone(\"94351253\").withGroup(\"R1\", \"Red\").build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public static final Participant BENEDICT \u003d new PersonBuilder().withName(\"Benedict Ben\").withSex(\"M\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            .withBirthday(\"08071993\").withMajor(\"IS\").withEmail(\"benny@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            .withGroup(\"\").withTags(\"OGL\").build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public static final Participant COCO \u003d new PersonBuilder().withName(\"Coco Nut\").withSex(\"F\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            .withBirthday(\"08081996\").withMajor(\"CEG\").withEmail(\"cocothenut@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            .withGroup(\"R2\", \"Red\").withTags(\"Vegetarian\").build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public static final Participant DODO \u003d new PersonBuilder().withName(\"Dodo Burt\").withSex(\"M\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            .withBirthday(\"10081995\").withMajor(\"BA\").withEmail(\"dodoburt@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            .withGroup(\"B1\", \"Blue\").withTags(\"Freshman\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public static final Group R1 \u003d new Group(\"R1\", \"Red\"); // 1 participant in group"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public static final Group R2 \u003d new Group(\"R2\", \"Red\"); // 1 participant in group"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public static final Group B1 \u003d new Group(\"B1\", \"Blue\"); // 1 participant in group"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public static final Group B2 \u003d new Group(\"B2\", \"Blue\"); // empty group"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public static final House RED \u003d new House(\"Red\"); // house with participants in 2 groups"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public static final House BLUE \u003d new House(\"Blue\"); // house with participants in 1 group"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public static final House YELLOW \u003d new House(\"Yellow\"); // empty house"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanseet"
        },
        "content": "     * Returns an {@code AddressBook} with typical persons, groups and houses."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanseet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public static AddressBook getTypicalAddressBookWithGroupHouse() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        for (Participant participant : getTypicalPersons()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            ab.addParticipant(participant);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        for (Group group : getTypicalGroups()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            ab.addGroup(group);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        for (House house : getTypicalHouses()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            ab.addHouse(house);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public static List\u003cParticipant\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICIA, BENEDICT, COCO, DODO));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public static List\u003cGroup\u003e getTypicalGroups() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(R1, R2, B1, B2));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    public static List\u003cHouse\u003e getTypicalHouses() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shanseet"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(RED, BLUE, YELLOW));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shanseet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shanseet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanseet": 54,
      "weizhang05": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GROUP_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GROUP_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MAJOR_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MAJOR_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SEX_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SEX_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Participant;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weizhang05"
        },
        "content": " * A utility class containing a list of {@code Participant} objects to be used in tests."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public static final Participant ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            .withSex(\"F\").withBirthday(\"07081994\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            .withMajor(\"CS\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            .withGroup(\"\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public static final Participant BENSON \u003d new PersonBuilder().withName(\"Benson Meier\").withSex(\"M\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            .withBirthday(\"08071993\").withMajor(\"IS\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            .withGroup(\"\").withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public static final Participant CARL \u003d new PersonBuilder().withName(\"Carl Kurz\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            .withSex(\"M\").withBirthday(\"01021990\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            .withPhone(\"95352563\").withEmail(\"heinz@example.com\").withMajor(\"CS\").withGroup(\"\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public static final Participant DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withSex(\"M\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            .withBirthday(\"01021980\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withMajor(\"BZA\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            .withGroup(\"\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public static final Participant ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"94822243\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            .withEmail(\"werner@example.com\").withSex(\"M\").withBirthday(\"12121985\").withMajor(\"CS\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            .withGroup(\"\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public static final Participant FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"94824273\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            .withEmail(\"lydia@example.com\").withSex(\"M\").withBirthday(\"12121985\").withMajor(\"ISC\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            .withGroup(\"\").build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public static final Participant GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"94824423\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            .withEmail(\"anna@example.com\").withSex(\"F\").withBirthday(\"12121985\").withMajor(\"CS\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            .withGroup(\"\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public static final Participant HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"84824243\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            .withEmail(\"stefan@example.com\").withSex(\"F\").withBirthday(\"01021999\").withMajor(\"CEG\").build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public static final Participant IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"84821311\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            .withEmail(\"hans@example.com\").withSex(\"F\").withBirthday(\"01021999\").withMajor(\"cEG\").build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    // Manually added - Participant\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public static final Participant AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withSex(VALID_SEX_AMY).withBirthday(VALID_BIRTHDAY_AMY)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            .withMajor(VALID_MAJOR_AMY).withGroup(VALID_GROUP_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public static final Participant BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withSex(VALID_SEX_BOB).withBirthday(VALID_BIRTHDAY_BOB)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            .withMajor(VALID_MAJOR_BOB).withGroup(VALID_GROUP_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public static final Participant MARK \u003d new PersonBuilder().withName(\"Mark Morgan\").withSex(\"M\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            .withBirthday(\"11091998\").withPhone(\"91291000\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            .withEmail(\"m.morgan@example.com\").withMajor(\"CS\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            .withGroup(\"\").withTags(\"Freshman\").build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public static final Participant SONIA \u003d new PersonBuilder().withName(\"Sonia Sia\").withSex(\"F\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            .withBirthday(\"11111998\").withPhone(\"91291234\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            .withEmail(\"soniasia@example.com\").withMajor(\"CS\")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "            .withGroup(\"\").withTags(\"OGL\").build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        for (Participant participant : getTypicalPersons()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            ab.addParticipant(participant);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    public static AddressBook getAddressBookWithOneFreshmanAndOgl() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        for (Participant participant : getTypicalPersonsWithOneFreshmanAndOgl()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            ab.addParticipant(participant);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public static List\u003cParticipant\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public static List\u003cParticipant\u003e getTypicalPersonsWithOneFreshmanAndOgl() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, MARK, SONIA));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ssunil3232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 17,
      "ssunil3232": 17,
      "shanseet": 11,
      "-": 44,
      "weizhang05": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/BrowserPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Participant;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    private SimpleObjectProperty\u003cParticipant\u003e selectedPerson \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanelHandle browserPanelHandle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel(selectedPerson));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(browserPanel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // default web page"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BrowserPanel.DEFAULT_PAGE, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        // associated web page of a participant"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e selectedPerson.set(ALICE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedPersonUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + ALICE.getName().fullName.replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(browserPanelHandle);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPersonUrl, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 38,
      "weizhang05": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/ParticipantCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Participant;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "public class ParticipantCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        // no tags"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Participant participantWithNoTags \u003d new PersonBuilder().withTags(new String[0]).build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        PersonCard personCard \u003d new PersonCard(participantWithNoTags, 1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        uiPartRule.setUiPart(personCard);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertCardDisplay(personCard, participantWithNoTags, 1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        // with tags"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Participant participantWithTags \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        personCard \u003d new PersonCard(participantWithTags, 2);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        uiPartRule.setUiPart(personCard);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertCardDisplay(personCard, participantWithTags, 2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Participant participant \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        PersonCard personCard \u003d new PersonCard(participant, 0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        // same participant, same index -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        PersonCard copy \u003d new PersonCard(participant, 0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertTrue(personCard.equals(copy));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertTrue(personCard.equals(personCard));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertFalse(personCard.equals(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertFalse(personCard.equals(0));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        // different participant, same index -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Participant differentParticipant \u003d new PersonBuilder().withName(\"differentName\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertFalse(personCard.equals(new PersonCard(differentParticipant, 0)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        // same participant, different index -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertFalse(personCard.equals(new PersonCard(participant, 1)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Asserts that {@code personCard} displays the details of {@code expectedParticipant} correctly and matches"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    private void assertCardDisplay(PersonCard personCard, Participant expectedParticipant, int expectedId) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        PersonCardHandle personCardHandle \u003d new PersonCardHandle(personCard.getRoot());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        // verify id is displayed correctly"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertEquals(Integer.toString(expectedId) + \". \", personCardHandle.getId());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weizhang05"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        // verify participant details are displayed correctly"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertCardDisplaysPerson(expectedParticipant, personCardHandle);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weizhang05": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/ParticipantListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersons;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import seedu.address.model.grouping.Group;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Birthday;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Email;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Major;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Participant;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Sex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "public class ParticipantListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    private static final ObservableList\u003cParticipant\u003e TYPICAL_PARTICIPANTS \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.observableList(getTypicalPersons());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 2500;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    private final SimpleObjectProperty\u003cParticipant\u003e selectedPerson \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanelHandle personListPanelHandle;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        initUi(TYPICAL_PARTICIPANTS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_PARTICIPANTS.size(); i++) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            personListPanelHandle.navigateToCard(TYPICAL_PARTICIPANTS.get(i));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            Participant expectedParticipant \u003d TYPICAL_PARTICIPANTS.get(i);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            PersonCardHandle actualCard \u003d personListPanelHandle.getPersonCardHandle(i);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            assertCardDisplaysPerson(expectedParticipant, actualCard);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void selection_modelSelectedPersonChanged_selectionChanges() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        initUi(TYPICAL_PARTICIPANTS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Participant secondParticipant \u003d TYPICAL_PARTICIPANTS.get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        guiRobot.interact(() -\u003e selectedPerson.set(secondParticipant));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCardHandle expectedPerson \u003d personListPanelHandle.getPersonCardHandle(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCardHandle selectedPerson \u003d personListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCardEquals(expectedPerson, selectedPerson);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifies that creating and deleting large number of persons in {@code PersonListPanel} requires lesser than"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void performanceTest() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        ObservableList\u003cParticipant\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            initUi(backingList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        }, \"Creation and deletion of participant cards exceeded time limit\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a list of persons containing {@code personCount} persons that is used to populate the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code PersonListPanel}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    private ObservableList\u003cParticipant\u003e createBackingList(int personCount) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        ObservableList\u003cParticipant\u003e backingList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c personCount; i++) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            Name name \u003d new Name(i + \"a\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            Sex sex \u003d new Sex(\"F\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            Birthday birthday \u003d new Birthday(\"12122000\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            Phone phone \u003d new Phone(\"98765433\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            Email email \u003d new Email(\"a@aa\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            Major major \u003d new Major(\"cs\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shanseet"
        },
        "content": "            Group group \u003d new Group(\"\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            Participant participant \u003d new Participant(name, sex, birthday, phone, email,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                    major, group, Collections.emptySet());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            backingList.add(participant);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return backingList;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes {@code personListPanelHandle} with a {@code PersonListPanel} backed by {@code backingList}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code PersonListPanel}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    private void initUi(ObservableList\u003cParticipant\u003e backingList) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonListPanel personListPanel \u003d"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                new PersonListPanel(backingList, selectedPerson, selectedPerson::set);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(personListPanel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelHandle \u003d new PersonListPanelHandle(getChildNode(personListPanel.getRoot(),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                PersonListPanelHandle.PERSON_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 3,
      "shanseet": 3,
      "-": 79,
      "weizhang05": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/RedoCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertRedoCardDisplay;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import guitests.guihandles.RedoCardHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "public class RedoCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        String redoableCommand \u003d \"redoable command\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        RedoCard redoCard \u003d new RedoCard(redoableCommand, 1);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        uiPartRule.setUiPart(redoCard);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        assertCardDisplay(redoCard, redoableCommand, 1);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        String redoableCommand \u003d \"redoable command\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        RedoCard redoCard \u003d new RedoCard(redoableCommand, 0);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        // same redoableCommand, same index -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        RedoCard copy \u003d new RedoCard(redoableCommand, 0);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        assertTrue(redoCard.equals(copy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        assertTrue(redoCard.equals(redoCard));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        assertFalse(redoCard.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        assertFalse(redoCard.equals(0));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        // different redoableCommand, same index -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        String differentRedoableCommand \u003d \"different\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        assertFalse(redoCard.equals(new RedoCard(differentRedoableCommand, 0)));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        // same redoableCommand, different index -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        assertFalse(redoCard.equals(new RedoCard(redoableCommand, 1)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * Asserts that {@code redoCard} displays the details of {@code expectedString} correctly and matches"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private void assertCardDisplay(RedoCard redoCard, String expectedString, int expectedId) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        RedoCardHandle redoCardHandle \u003d new RedoCardHandle(redoCard.getRoot());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        // verify id is displayed correctly"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        assertEquals(Integer.toString(expectedId) + \". \", redoCardHandle.getId());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        // verify redoableCommand details are displayed correctly"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        assertRedoCardDisplay(expectedString, redoCardHandle);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 63
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/RedoListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertRedoCardDisplay;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import guitests.guihandles.RedoCardHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import guitests.guihandles.RedoListPanelHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "public class RedoListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private RedoListPanelHandle redoListPanelHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        initUi(createRedoList(10));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        for (int i \u003d 0; i \u003c 10; i++) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            redoListPanelHandle.navigateToCard(\"Add \" + i);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            String expectedCommand \u003d \"Add \" + i;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            RedoCardHandle actualCard \u003d redoListPanelHandle.getRedoCardHandle(i);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            assertRedoCardDisplay(expectedCommand, actualCard);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * Returns a list of commands containing {@code commandCount} commands that is used to populate the"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * {@code RedoListPanel}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private ObservableList\u003cString\u003e createRedoList (int commandCount) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        ObservableList\u003cString\u003e redoList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        for (int i \u003d 0; i \u003c commandCount; i++) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            String command \u003d \"Add \" + i;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            redoList.add(command);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        return redoList;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * Initializes {@code redoListPanelHandle} with a {@code redoListPanel} of {@code commandList}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code RedoListPanle}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * @param commandList"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private void initUi(ObservableList\u003cString\u003e commandList) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        RedoListPanel redoListPanel \u003d new RedoListPanel(commandList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        uiPartRule.setUiPart(redoListPanel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        redoListPanelHandle \u003d new RedoListPanelHandle(getChildNode(redoListPanel.getRoot(),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                RedoListPanelHandle.REDO_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/StatusBarFooterTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.AfterClass;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooterTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path STUB_SAVE_LOCATION \u003d Paths.get(\"Stub\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path RELATIVE_PATH \u003d Paths.get(\".\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock originalClock \u003d StatusBarFooter.getClock();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBarFooterHandle statusBarFooterHandle;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setUpBeforeClass() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // inject fixed clock"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(injectedClock);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @AfterClass"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void tearDownAfterClass() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // restore original clock"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(originalClock);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(STUB_SAVE_LOCATION, addressBook);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(statusBarFooter);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // initial state"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(), SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // after address book is updated"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        guiRobot.interact(() -\u003e addressBook.addParticipant(ALICE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(SYNC_STATUS_UPDATED, new Date(injectedClock.millis()).toString()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the save location matches that of {@code expectedSaveLocation}, and the"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * sync status matches that of {@code expectedSyncStatus}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertStatusBarContent(String expectedSaveLocation, String expectedSyncStatus) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSaveLocation, statusBarFooterHandle.getSaveLocation());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, statusBarFooterHandle.getSyncStatus());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 74,
      "weizhang05": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/TextResultDisplayTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import guitests.guihandles.TextResultDisplayHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "public class TextResultDisplayTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private TextResultDisplay textResultDisplay;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private TextResultDisplayHandle textResultDisplayHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        textResultDisplay \u003d new TextResultDisplay();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        uiPartRule.setUiPart(textResultDisplay);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        textResultDisplayHandle \u003d new TextResultDisplayHandle(getChildNode(textResultDisplay.getRoot(),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                TextResultDisplayHandle.TEXT_RESULT_DISPLAY));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // default result text"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        assertEquals(\"\", textResultDisplayHandle.getText());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // new result received"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        guiRobot.interact(() -\u003e textResultDisplay.setFeedbackToUser(\"Dummy feedback to user\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        assertEquals(\"Dummy feedback to user\", textResultDisplayHandle.getText());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 12,
      "-": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/UndoCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertUndoCardDisplay;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import guitests.guihandles.UndoCardHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "public class UndoCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        String undoableCommand \u003d \"undoable command\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        UndoCard undoCard \u003d new UndoCard(undoableCommand, 1);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        uiPartRule.setUiPart(undoCard);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        assertCardDisplay(undoCard, undoableCommand, 1);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        String undoableCommand \u003d \"undoable command\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        UndoCard undoCard \u003d new UndoCard(undoableCommand, 0);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        // same undoableCommand, same index -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        UndoCard copy \u003d new UndoCard(undoableCommand, 0);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        assertTrue(undoCard.equals(copy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        assertTrue(undoCard.equals(undoCard));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        assertFalse(undoCard.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        assertFalse(undoCard.equals(0));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        // different undoableCommand, same index -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        String differentUndoableCommand \u003d \"different\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        assertFalse(undoCard.equals(new UndoCard(differentUndoableCommand, 0)));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        // same undoableCommand, different index -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        assertFalse(undoCard.equals(new UndoCard(undoableCommand, 1)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * Asserts that {@code undoCard} displays the details of {@code expectedString} correctly and matches"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private void assertCardDisplay(UndoCard undoCard, String expectedString, int expectedId) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        UndoCardHandle undoCardHandle \u003d new UndoCardHandle(undoCard.getRoot());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        // verify id is displayed correctly"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        assertEquals(Integer.toString(expectedId) + \". \", undoCardHandle.getId());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        // verify undoableCommand details are displayed correctly"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        assertUndoCardDisplay(expectedString, undoCardHandle);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 63
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/UndoListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertUndoCardDisplay;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import guitests.guihandles.UndoCardHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import guitests.guihandles.UndoListPanelHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "public class UndoListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private UndoListPanelHandle undoListPanelHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        initUi(createUndoList(10));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        for (int i \u003d 0; i \u003c 10; i++) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            undoListPanelHandle.navigateToCard(\"Add \" + i);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            String expectedCommand \u003d \"Add \" + i;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            UndoCardHandle actualCard \u003d undoListPanelHandle.getUndoCardHandle(i);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            assertUndoCardDisplay(expectedCommand, actualCard);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * Returns a list of commands containing {@code commandCount} commands that is used to populate the"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * {@code UndoListPanel}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private ObservableList\u003cString\u003e createUndoList (int commandCount) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        ObservableList\u003cString\u003e undoList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        for (int i \u003d 0; i \u003c commandCount; i++) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            String command \u003d \"Add \" + i;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "            undoList.add(command);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        return undoList;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * Initializes {@code undoListPanelHandle} with a {@code undoListPanel} of {@code commandList}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code UndoListPanle}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * @param commandList"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    private void initUi(ObservableList\u003cString\u003e commandList) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        UndoListPanel undoListPanel \u003d new UndoListPanel(commandList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        uiPartRule.setUiPart(undoListPanel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        undoListPanelHandle \u003d new UndoListPanelHandle(getChildNode(undoListPanel.getRoot(),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                UndoListPanelHandle.UNDO_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/testutil/GuiTestAssert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import guitests.guihandles.RedoCardHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import guitests.guihandles.TextResultDisplayHandle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import guitests.guihandles.UndoCardHandle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Participant;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiTestAssert {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        assertEquals(expectedCard.getMajor(), actualCard.getMajor());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getName(), actualCard.getName());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getTags(), actualCard.getTags());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedParticipant}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public static void assertCardDisplaysPerson(Participant expectedParticipant, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertEquals(expectedParticipant.getName().fullName, actualCard.getName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertEquals(\"Sex: \" + expectedParticipant.getSex().value, actualCard.getSex());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertEquals(\"Birthday: \" + expectedParticipant.getBirthday().getFormattedBirthday(), actualCard.getBirthday());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertEquals(\"Phone Number: \" + expectedParticipant.getPhone().value, actualCard.getPhone());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertEquals(\"Email: \" + expectedParticipant.getEmail().value, actualCard.getEmail());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertEquals(\"Major: \" + expectedParticipant.getMajor().getFullMajor(), actualCard.getMajor());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertEquals(expectedParticipant.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                actualCard.getTags());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * Assert that {@code actualCard} displays the {@undoCard}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public static void assertUndoCardDisplay(String commandText, UndoCardHandle undoCard) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        assertEquals(commandText, undoCard.getCommand());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * Assert that {@code actualCard} displays the {@redoCard}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public static void assertRedoCardDisplay(String commandText, RedoCardHandle redoCard) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        assertEquals(commandText, redoCard.getCommand());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code participants} correctly and"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, Participant... participants) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        for (int i \u003d 0; i \u003c participants.length; i++) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            personListPanelHandle.navigateToCard(i);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            assertCardDisplaysPerson(participants[i], personListPanelHandle.getPersonCardHandle(i));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code participants} correctly and"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cParticipant\u003e participants) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertListMatching(personListPanelHandle, participants.toArray(new Participant[0]));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        int numberOfPeople \u003d personListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(size, numberOfPeople);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "     * Asserts the message shown in {@code textResultDisplayHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public static void assertResultMessage(TextResultDisplayHandle textResultDisplayHandle, String expected) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        assertEquals(expected, textResultDisplayHandle.getText());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 20,
      "-": 55,
      "weizhang05": 17
    }
  },
  {
    "path": "src/test/java/systemtests/AddCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GROUP_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GROUP_DESC_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MAJOR_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MAJOR_DESC_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MAJOR_DESC_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SEX_DESC_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SEX_DESC_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MAJOR_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Email;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Major;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Name;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Participant;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Phone;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        /* --------------------- Perform add operations on the shown unfiltered list -------------------------- */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        /* Case: add a participant without tags to a non-empty address book,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "         * command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Participant toAdd \u003d AMY;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + SEX_DESC_AMY + \"  \""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                + BIRTHDAY_DESC_AMY + \"  \" + PHONE_DESC_AMY + \"  \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                + EMAIL_DESC_AMY + \"  \" + MAJOR_DESC_AMY + \"  \" + GROUP_DESC_AMY + \"  \" + TAG_DESC_FRIEND + \" \";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo adding Amy to the list -\u003e Amy deleted */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo adding Amy to the list -\u003e Amy added again */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        model.addParticipant(toAdd);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        /* Case: add a participant with all fields same as another participant"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "         * in the address book except name -\u003e added"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "         */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + SEX_DESC_AMY + BIRTHDAY_DESC_AMY"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                + PHONE_DESC_AMY + EMAIL_DESC_AMY + MAJOR_DESC_AMY + GROUP_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        /* Case: add a participant with all fields same as another"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "         * participant in the address book except phone and email"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        toAdd \u003d new PersonBuilder(AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                .withBirthday(VALID_BIRTHDAY_BOB).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add to empty address book -\u003e added */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ALICE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        /* Case: add a participant with tags, command with parameters in random order -\u003e added */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d BOB;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FRIEND + SEX_DESC_BOB + PHONE_DESC_BOB + MAJOR_DESC_BOB"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                + NAME_DESC_BOB + BIRTHDAY_DESC_BOB + GROUP_DESC_BOB + TAG_DESC_HUSBAND + EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        /* Case: add a participant, missing tags -\u003e added */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(HOON);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        /* ----------------------- Perform add operation on the shown filtered list --------------------------- */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        /* Case: filters the participant list before adding -\u003e added */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(IDA);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        /* ------------------- Perform add operation while a participant card is selected ---------------------- */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        /* Case: selects first card in the participant list,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "         * add a participant -\u003e added, card selection remains unchanged"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "         */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(CARL);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        /* -------------------------------- Perform invalid add operations ------------------------------------ */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        /* Case: add a duplicate participant -\u003e rejected */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(HOON);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        /* Case: add a duplicate participant except with different phone -\u003e rejected */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        /* Case: add a duplicate participant except with different email -\u003e rejected */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        /* Case: add a duplicate participant except with different address -\u003e rejected */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withMajor(VALID_MAJOR_BOB).build();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        /* Case: add a duplicate participant except with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing name -\u003e rejected */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + SEX_DESC_AMY + BIRTHDAY_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                + MAJOR_DESC_AMY + GROUP_DESC_AMY;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing phone -\u003e rejected */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + SEX_DESC_AMY + BIRTHDAY_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                + MAJOR_DESC_AMY + GROUP_DESC_AMY;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing email -\u003e rejected */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + SEX_DESC_AMY + BIRTHDAY_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                + MAJOR_DESC_AMY + GROUP_DESC_AMY;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        /* Case: missing major -\u003e rejected */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + SEX_DESC_AMY + BIRTHDAY_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                + EMAIL_DESC_AMY + GROUP_DESC_AMY;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid keyword -\u003e rejected */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + SEX_DESC_AMY + BIRTHDAY_DESC_AMY"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                + PHONE_DESC_AMY + EMAIL_DESC_AMY + MAJOR_DESC_AMY + GROUP_DESC_AMY;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + SEX_DESC_AMY + BIRTHDAY_DESC_AMY"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                + INVALID_PHONE_DESC + EMAIL_DESC_AMY + MAJOR_DESC_AMY + GROUP_DESC_AMY;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + SEX_DESC_AMY + BIRTHDAY_DESC_AMY"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                + PHONE_DESC_AMY + INVALID_EMAIL_DESC + MAJOR_DESC_AMY + GROUP_DESC_AMY;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + SEX_DESC_AMY + BIRTHDAY_DESC_AMY"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                + PHONE_DESC_AMY + EMAIL_DESC_AMY + INVALID_MAJOR_DESC + GROUP_DESC_AMY;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        assertCommandFailure(command, Major.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + SEX_DESC_AMY + BIRTHDAY_DESC_AMY"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                + PHONE_DESC_AMY + EMAIL_DESC_AMY + MAJOR_DESC_AMY + GROUP_DESC_AMY"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    private void assertCommandSuccess(Participant toAdd) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Participant)}. Executes {@code command}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(Participant)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    private void assertCommandSuccess(String command, Participant toAdd) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        expectedModel.addParticipant(toAdd);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Participant)} except asserts that"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(String, Participant)"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 43,
      "-": 195,
      "weizhang05": 36
    }
  },
  {
    "path": "src/test/java/systemtests/AddressBookSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "//import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import guitests.guihandles.TextResultDisplayHandle;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.BrowserPanel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class AddressBookSystemTest {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        //Browser Remove"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        //waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    protected AddressBook getInitialData() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanelHandle getPersonListPanel() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getPersonListPanel();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getBrowserPanel();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "    public TextResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        //Browser Remove"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        //waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons in the address book."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showAllPersons() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertEquals(getModel().getAddressBook().getParticipantList().size(),"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                getModel().getFilteredParticipantList().size());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showPersonsWithName(String keyword) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertTrue(getModel().getFilteredParticipantList().size()"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                \u003c getModel().getAddressBook().getParticipantList().size());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Selects the participant at {@code index} of the displayed list."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void selectPerson(Index index) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes all persons in the address book."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void deleteAllPersons() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertEquals(0, getModel().getAddressBook().getParticipantList().size());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput},"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * the {@code TextResultDisplay} displays"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same participant objects as {@code expectedModel}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * and the participant list panel displays the persons in the model correctly."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(expectedModel.getAddressBook()), testApp.readStorageAddressBook());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertListMatching(getPersonListPanel(), expectedModel.getFilteredParticipantList());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        //Browser Remove"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        //getBrowserPanel().rememberUrl();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().rememberSelectedPersonCard();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the previously selected card is now deselected and the browser\u0027s url is now displaying the"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * default page."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        //Browser Remove"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        //assertEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Asserts that the browser\u0027s url is changed to display the details of the"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * participant in the participant list panel at"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().navigateToCard(getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        String selectedCardName \u003d getPersonListPanel().getHandleToSelectedCard().getName();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedUrl;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "            expectedUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                    + selectedCardName.replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (MalformedURLException mue) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"URL expected to be valid.\", mue);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        //Browser Remove"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        //assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Asserts that the browser\u0027s url and the selected card in the participant list panel remain unchanged."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        //Browser Remove"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        //assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        // assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertListMatching(getPersonListPanel(), getModel().getFilteredParticipantList());"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        //Browser Remove"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        //assertEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Paths.get(\".\").resolve(testApp.getStorageSaveLocation()).toString(),"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "                getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 19,
      "-": 263,
      "weizhang05": 17
    }
  },
  {
    "path": "src/test/java/systemtests/ClearCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        final Model defaultModel \u003d getModel();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear non-empty address book, command with leading spaces and trailing alphanumeric characters and"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "         * spaces -\u003e cleared"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo clearing address book -\u003e original address book restored */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, defaultModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo clearing address book -\u003e cleared */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        /* Case: selects first card in participant list and clears address book -\u003e cleared and no card selected */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        /* Case: filters the participant list before clearing -\u003e entire address book cleared */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear empty address book -\u003e cleared */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ClearCommandSystemTest#assertCommandSuccess(String)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 99,
      "weizhang05": 2
    }
  },
  {
    "path": "src/test/java/systemtests/DeleteCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getPerson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Participant;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void delete() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        /* -------------- Performing delete operation while an unfiltered list is being shown ----------------- */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        /* Case: delete the first participant in the list,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "         * command with leading spaces and trailing spaces -\u003e deleted"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "         */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        String command \u003d \"     \" + DeleteCommand.COMMAND_WORD + \"      \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \"       \";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Participant deletedParticipant \u003d removePerson(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedParticipant);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        /* Case: delete the last participant in the list -\u003e deleted */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Model modelBeforeDeletingLast \u003d getModel();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Index lastPersonIndex \u003d getLastIndex(modelBeforeDeletingLast);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(lastPersonIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        /* Case: undo deleting the last participant in the list -\u003e last participant restored */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        /* Case: redo deleting the last participant in the list -\u003e last participant deleted again */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        removePerson(modelBeforeDeletingLast, lastPersonIndex);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        /* Case: delete the middle participant in the list -\u003e deleted */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middlePersonIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(middlePersonIndex);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        /* --------------- Performing delete operation while a filtered list is being shown ------------------- */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        /* Case: filtered participant list,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "         * delete index within bounds of address book and participant list -\u003e deleted"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "         */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredParticipantList().size());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(index);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        /* Case: filtered participant list, delete index within bounds"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "         * of address book but out of bounds of participant list"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getParticipantList().size();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + invalidIndex;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        /* ------------------ Performing delete operation while a participant card is selected --------------------- */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        /* Case: delete the selected participant -\u003e participant list panel selects"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "         * the participant before the deleted participant"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "         */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Index selectedIndex \u003d getLastIndex(expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(selectedIndex);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        deletedParticipant \u003d removePerson(expectedModel, selectedIndex);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedParticipant);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        /* ------------------------------ Performing invalid delete operation --------------------------------- */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" 0\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" -1\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased("
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                getModel().getAddressBook().getParticipantList().size() + 1);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Removes the {@code Participant} at the specified {@code index} in {@code model}\u0027s address book."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * @return the removed participant"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    private Participant removePerson(Model model, Index index) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Participant targetParticipant \u003d getPerson(model, index);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        model.deleteParticipant(targetParticipant);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        return targetParticipant;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Deletes the participant at {@code toDelete} by creating"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * a default {@code DeleteCommand} using {@code toDelete} and"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Index toDelete) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Participant deletedParticipant \u003d removePerson(expectedModel, toDelete);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedParticipant);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(),"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * except that the browser url"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        //Browser Remove"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 3,
      "-": 161,
      "weizhang05": 43
    }
  },
  {
    "path": "src/test/java/systemtests/EditCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GROUP_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GROUP_DESC_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MAJOR_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MAJOR_DESC_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MAJOR_DESC_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SEX_DESC_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SEX_DESC_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_AMY;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tantantan277"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PARTICIPANTS;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Email;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Major;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Name;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Participant;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Phone;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void edit() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        /* -------------- Performing edit operation while an unfiltered list is being shown ------------------- */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                + SEX_DESC_BOB + \" \" + BIRTHDAY_DESC_BOB + \" \" + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                + \"  \" + MAJOR_DESC_BOB + \" \" + GROUP_DESC_BOB + \" \" + TAG_DESC_HUSBAND + \" \";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Participant editedParticipant \u003d new PersonBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertCommandSuccess(command, index, editedParticipant);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        /* Case: undo editing the last participant in the list -\u003e last participant restored */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        /* Case: redo editing the last participant in the list -\u003e last participant edited again */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        model.setParticipant(getModel().getFilteredParticipantList()"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                .get(INDEX_FIRST_PERSON.getZeroBased()), editedParticipant);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        /* Case: edit a participant with new values same as existing values -\u003e edited */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + SEX_DESC_BOB"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                + BIRTHDAY_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                + MAJOR_DESC_BOB + GROUP_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, BOB);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        /* Case: edit a participant with new values same as"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "         * another participant\u0027s values but with different name -\u003e edited"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "         */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertTrue(getModel().getAddressBook().getParticipantList().contains(BOB));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertNotEquals(getModel().getFilteredParticipantList().get(index.getZeroBased()), BOB);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + SEX_DESC_BOB"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                + BIRTHDAY_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                + MAJOR_DESC_BOB + GROUP_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        editedParticipant \u003d new PersonBuilder(BOB).withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertCommandSuccess(command, index, editedParticipant);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        /* Case: edit a participant with new values same as another"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "         * participant\u0027s values but with different phone and email"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + SEX_DESC_BOB"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                + BIRTHDAY_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                + MAJOR_DESC_BOB + GROUP_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        editedParticipant \u003d new PersonBuilder(BOB).withBirthday(VALID_BIRTHDAY_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertCommandSuccess(command, index, editedParticipant);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear tags -\u003e cleared */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Participant participantToEdit \u003d getModel().getFilteredParticipantList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        editedParticipant \u003d new PersonBuilder(participantToEdit).withTags().build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertCommandSuccess(command, index, editedParticipant);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        /* --------------- Performing edit operation while a filtered list is being shown --------------------- */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        /* Case: filtered participant list, edit index within bounds of address book and participant list -\u003e edited */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredParticipantList().size());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        participantToEdit \u003d getModel().getFilteredParticipantList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        editedParticipant \u003d new PersonBuilder(participantToEdit).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertCommandSuccess(command, index, editedParticipant);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        /* Case: filtered participant list, edit index within bounds of"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "         * address book but out of bounds of participant list"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getParticipantList().size();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        /* --------------- Performing edit operation while a participant card is selected -------------------- */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        /* Case: selects first card in the participant list, edit a participant -\u003e edited,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "         * card selection remains unchanged but"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "         * browser url changes"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(index);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + SEX_DESC_AMY"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                + BIRTHDAY_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                + MAJOR_DESC_AMY + GROUP_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // this can be misleading: card selection actually remains unchanged but the"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        // browser\u0027s url is updated to reflect the new participant\u0027s name"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, AMY, index);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        /* ------------------------------ Performing invalid edit operation ----------------------------------- */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredParticipantList().size() + 1;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing index -\u003e rejected */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing all fields -\u003e rejected */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                        + INDEX_FIRST_PERSON.getOneBased() + INVALID_NAME_DESC,"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                        + INDEX_FIRST_PERSON.getOneBased() + INVALID_PHONE_DESC,"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                        + INDEX_FIRST_PERSON.getOneBased() + INVALID_EMAIL_DESC,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "                Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                        + INDEX_FIRST_PERSON.getOneBased() + INVALID_MAJOR_DESC,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                Major.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                        + INDEX_FIRST_PERSON.getOneBased() + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        /* Case: edit a participant with new values same as another participant\u0027s values -\u003e rejected */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(PersonUtil.getAddCommand(BOB));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertTrue(getModel().getAddressBook().getParticipantList().contains(BOB));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertFalse(getModel().getFilteredParticipantList().get(index.getZeroBased()).equals(BOB));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + SEX_DESC_BOB"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                + BIRTHDAY_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                + MAJOR_DESC_BOB + GROUP_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        /* Case: edit a participant with new values same as another"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "         * participant\u0027s values but with different tags -\u003e rejected"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "         */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + SEX_DESC_BOB"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                + BIRTHDAY_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                + MAJOR_DESC_BOB + GROUP_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        /* Case: edit a participant with new values same as another"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "         * participant\u0027s values but with different address -\u003e rejected"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "         */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + SEX_DESC_BOB"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                + BIRTHDAY_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                + MAJOR_DESC_AMY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        /* Case: edit a participant with new values same as another"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "         * participant\u0027s values but with different phone -\u003e rejected"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "         */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased()"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                + MAJOR_DESC_BOB + GROUP_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        /* Case: edit a participant with new values same as another"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "         * participant\u0027s values but with different email -\u003e rejected"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "         */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + SEX_DESC_BOB"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                + BIRTHDAY_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "                + MAJOR_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Index, Participant, Index)} except that"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     * the browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Participant, Index)"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Participant editedParticipant) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertCommandSuccess(command, toEdit, editedParticipant, null);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Performs the same verification as"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     *"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * 2. Asserts that the model related components are updated to"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     *    reflect the participant at index {@code toEdit} being"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * updated to values specified {@code editedParticipant}.\u003cbr\u003e"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Participant editedParticipant,"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "shanseet"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        expectedModel.setParticipant(expectedModel.getFilteredParticipantList()"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                .get(toEdit.getZeroBased()), editedParticipant);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        expectedModel.updateFilteredParticipantList(PREDICATE_SHOW_ALL_PARTICIPANTS);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel,"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedParticipant), expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "     * browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card update accordingly depending on the card at"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        expectedModel.updateFilteredParticipantList(PREDICATE_SHOW_ALL_PARTICIPANTS);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        //Browser Remove"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        */"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 44,
      "shanseet": 1,
      "-": 214,
      "weizhang05": 86
    }
  },
  {
    "path": "src/test/java/systemtests/FindCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.DANIEL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void find() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        /* Case: repeat previous find command where participant list is displaying the persons we are finding"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        /* Case: find participant where participant list is not displaying the"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "         * participant we are finding -\u003e 1 participant found"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "         */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Carl\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, CARL);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords -\u003e 2 persons found */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Benson Daniel\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords in reversed order -\u003e 2 persons found */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords with 1 repeat -\u003e 2 persons found */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson Daniel\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 matching keywords and 1 non-matching keyword"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson NonMatchingKeyWord\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        /* Case: find same persons in address book after deleting 1 of them -\u003e 1 participant found */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertFalse(getModel().getAddressBook().getParticipantList().contains(BENSON));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        /* Case: find participant in address book, keyword is same as name"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "         * but of different case -\u003e 1 participant found"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "         */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" MeIeR\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        /* Case: find participant in address book, keyword is substring of name -\u003e 0 persons found */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Mei\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        /* Case: find participant in address book, name is substring of keyword -\u003e 0 persons found */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Meiers\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        /* Case: find participant not in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Mark\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        /* Case: find phone number of participant in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getPhone().value;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        /* Case: find address of participant in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getMajor().value;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        /* Case: find email of participant in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getEmail().value;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        /* Case: find tags of participant in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        /* Case: find while a participant is selected -\u003e selected card deselected */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel\";"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        /* Case: find participant in empty address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"FiNd Meier\";"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredParticipantList().size());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 1,
      "-": 179,
      "weizhang05": 19
    }
  },
  {
    "path": "src/test/java/systemtests/HelpCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "//import seedu.address.ui.BrowserPanel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for the help window, which contains interaction with other UI components."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void openHelpWindow() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        //use accelerator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        getCommandBox().click();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        getResultDisplay().click();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().click();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        //Browser Remove"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        getBrowserPanel().click();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowNotOpen();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        //use menu button"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        //use command box"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // open help window and give it focus"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that while the help window is open the UI updates correctly for a command execution"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        //Browser Remove"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        //assertNotEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertListMatching(getPersonListPanel(), getModel().getFilteredParticipantList());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that the status bar too is updated correctly while the help window is open"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // note: the select command tested above does not update the status bar"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void help_multipleCommands_onlyOneHelpWindowOpen() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, guiRobot.getNumberOfWindowsShown(HelpWindowHandle.HELP_WINDOW_TITLE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window is open, and closes it after checking."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowOpen() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window isn\u0027t open."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowNotOpen() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 6,
      "-": 103,
      "weizhang05": 1
    }
  },
  {
    "path": "src/test/java/systemtests/ModelHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Participant;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods to set up {@code Model} for testing."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelHelper {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    private static final Predicate\u003cParticipant\u003e PREDICATE_MATCHING_NO_PERSONS \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public static void setFilteredList(Model model, List\u003cParticipant\u003e toDisplay) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Optional\u003cPredicate\u003cParticipant\u003e\u003e predicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                toDisplay.stream().map(ModelHelper::getPredicateMatching).reduce(Predicate::or);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        model.updateFilteredParticipantList(predicate.orElse(PREDICATE_MATCHING_NO_PERSONS));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ModelHelper#setFilteredList(Model, List)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    public static void setFilteredList(Model model, Participant... toDisplay) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        setFilteredList(model, Arrays.asList(toDisplay));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * Returns a predicate that evaluates to true if this {@code Participant} equals to {@code other}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "    private static Predicate\u003cParticipant\u003e getPredicateMatching(Participant other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return person -\u003e person.equals(other);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 31,
      "weizhang05": 8
    }
  },
  {
    "path": "src/test/java/systemtests/SampleDataTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "import seedu.address.model.participant.Participant;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns null to force test app to load data of the file in {@code getDataFileLocation()}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    protected AddressBook getInitialData() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a non-existent file location to force test app to load sample data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFileIfExists(filePath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the file at {@code filePath} if it exists."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void deleteFileIfExists(Path filePath) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.deleteIfExists(filePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBook_dataFileDoesNotExist_loadSampleData() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        Participant[] expectedList \u003d SampleDataUtil.getSampleFreshmen();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), expectedList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 49,
      "weizhang05": 2
    }
  },
  {
    "path": "src/test/java/systemtests/SelectCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        /* --------------------- Perform select operations on the shown unfiltered list ----------------------- */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        /* Case: select the first card in the participant list, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e selected"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + \"   \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        /* Case: select the last card in the participant list -\u003e selected */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Index personCount \u003d getLastIndex(getModel());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + personCount.getOneBased();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, personCount);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous selection -\u003e rejected */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo selecting last card in the list -\u003e rejected */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        /* Case: select the middle card in the participant list -\u003e selected */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middleIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the current selected card -\u003e selected */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        /* --------------------- Perform select operations on the shown filtered list ------------------------- */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        /* Case: filtered participant list, select index within bounds of"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "         * address book but out of bounds of participant list"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getParticipantList().size();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        /* Case: filtered participant list, select index within bounds of"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "         * address book and participant list -\u003e selected"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "         */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Index validIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredParticipantList().size());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, validIndex);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        /* -------------------------------- Perform invalid select operations --------------------------------- */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredParticipantList().size() + 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "                MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select from empty address book -\u003e rejected */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing select command with the"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weizhang05"
        },
        "content": "     * {@code expectedSelectedCardIndex} of the selected participant.\u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                MESSAGE_SELECT_PERSON_SUCCESS, expectedSelectedCardIndex.getOneBased());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        int preExecutionSelectedCardIndex \u003d getPersonListPanel().getSelectedCardIndex();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        //Browser Remove"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tantantan277"
        },
        "content": "        */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tantantan277": 3,
      "-": 140,
      "weizhang05": 19
    }
  }
]
