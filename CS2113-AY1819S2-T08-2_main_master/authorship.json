[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "\u003d *LIFE* - Lifestyle Improvement For Everyone"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "https://travis-ci.org/cs2113-ay1819s2-t08-2/main[image:https://api.travis-ci.org/cs2113-ay1819s2-t08-2/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "https://ci.appveyor.com/project/damithc/addressbook-level4[image:https://ci.appveyor.com/api/projects/status/3boko2x2vr5cc3w2?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "https://coveralls.io/github/se-edu/addressbook-level4?branch\u003dmaster[image:https://coveralls.io/repos/github/se-edu/addressbook-level4/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "https://www.codacy.com/app/damith/addressbook-level4?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dse-edu/addressbook-level4\u0026utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/fc0b7775cf7f4fdeaf08776f3d8e364a[Codacy Badge]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "https://gitter.im/se-edu/Lobby[image:https://badges.gitter.im/se-edu/Lobby.svg[Gitter chat]]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "image::docs/images/readmeUI.PNG[width\u003d\"600\"]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "image::images/readmeUI.PNG[width\u003d\"600\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "* _LIFE_ is a desktop application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "It is a one stop application for NUS students to manage their student life in terms of"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "** Meeting deadlines"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "** Managing finances"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "** Planning and recording workouts"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "** Forming good habits to improve lifestyle"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "* Features: Task List, Expenditure List, Workout Tracker, Habit Tracker and Contact List."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "* *Written in OOP fashion*. It provides a *reasonably well-written* code example that is *significantly bigger* (around 6 KLoC)than what students usually write in beginner-level SE modules."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cLearningOutcomes#, Learning Outcomes\u003e\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TestFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "* This code was transformed from the great https://github.com/se-edu/addressbook-level4[AddressBook Level 4]."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d License : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "weizhonglauw": 13,
      "-": 30
    }
  },
  {
    "path": "data/addressbook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "  \"persons\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    \"name\" : \"Alex Yeoh\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    \"phone\" : \"87438807\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    \"email\" : \"alexyeoh@example.com\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    \"address\" : \"Blk 30 Geylang Street 29, #06-40\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    \"tagged\" : [ \"friends\" ]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    \"name\" : \"Bernice Yu\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    \"phone\" : \"99272758\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    \"email\" : \"berniceyu@example.com\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    \"address\" : \"Blk 30 Lorong 3 Serangoon Gardens, #07-18\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    \"tagged\" : [ \"colleagues\", \"friends\" ]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    \"name\" : \"Charlotte Oliveiro\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    \"phone\" : \"93210283\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    \"email\" : \"charlotte@example.com\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    \"address\" : \"Blk 11 Ang Mo Kio Street 74, #11-04\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    \"tagged\" : [ \"neighbours\" ]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    \"name\" : \"David Li\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    \"phone\" : \"91031282\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    \"email\" : \"lidavid@example.com\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    \"address\" : \"Blk 436 Serangoon Gardens Street 26, #16-43\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    \"tagged\" : [ \"family\" ]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    \"name\" : \"Irfan Ibrahim\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    \"phone\" : \"92492021\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    \"email\" : \"irfan@example.com\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    \"address\" : \"Blk 47 Tampines Street 20, #17-35\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    \"tagged\" : [ \"classmates\" ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    \"name\" : \"Roy Balakrishnan\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    \"phone\" : \"92624417\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    \"email\" : \"royb@example.com\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    \"address\" : \"Blk 45 Aljunied Street 85, #11-31\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    \"tagged\" : [ \"colleagues\" ]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    \"name\" : \"John Doe\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    \"phone\" : \"98765432\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    \"email\" : \"johnd@example.com\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    \"address\" : \"John street, block 123, #01-02\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    \"name\" : \"Bob\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    \"phone\" : \"99887766\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    \"email\" : \"bobiscool@example.com\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    \"address\" : \"123, Bobstreet Ave 3, #02-20\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    \"tagged\" : [ \"bobiscool\" ]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weizhonglauw": 6,
      "jayrometan": 45
    }
  },
  {
    "path": "data/tasklist.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "  \"tasks\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    \"taskName\" : \"CS2113T Milestone V13\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    \"deadlineDate\" : \"280319\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    \"deadlineTime\" : \"2359\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    } ,{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "      \"taskName\" : \"CS2101 OP2 \","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "      \"deadlineDate\" : \"290319\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "      \"deadlineTime\" : \"1000\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "      \"tagged\" : [ ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jayrometan": 15
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "StudentHandBook was developed by https://github.com/cs2113-ay1819s2-t08-2/main[StudentHandBook] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "\u003d\u003d\u003d TAN WEI SHENG, JEROME"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "image::jerome.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "{empty}[https://github.com/jayrometan[github]]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "Role: Team Leader, Developer +"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "Responsibilities: Developer Guide, Implementing Task Feature, Daily List Feature"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "\u003d\u003d\u003d WONG YU QI"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "image::yuqi.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "{empty}[https://github.com/wongyuqi[github]]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "Responsibilities: User Guide, Implementing Timer Feature and Journal Feature"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "\u003d\u003d\u003d PANG YONG JIA"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "image::yongjia.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "{empty}[https://github.com/yongjia96[github]]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "Responsibilities: Use Cases, Workout Feature"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "\u003d\u003d\u003d LAUW WEI ZHONG"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "image::weizhong.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "{empty}[https://github.com/weizhonglauw[github]]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "Responsibilities: Admin Information, Expenditure Tracker Feature"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "-": 28,
      "jayrometan": 18
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "* *Email us* : You can also reach us at `e0200817 [at] comp.nus.edu.sg`"
      }
    ],
    "authorContributionMap": {
      "-": 5,
      "jayrometan": 2
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "\u003d LIFE - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level4/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "By: `Team T08-2`  \tSince: `May 2019`  \tLicence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "\u003d\u003d\u003d What is LIFE"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "_LIFE_ - Lifestyle Improvement For Everyone +"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "It is a desktop application for students to easily manage their"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "tasks, expenditure and fitness."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "\u003d\u003d\u003d Core Team"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "_LIFE_ was developed and is continually being maintained and improved upon"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "by link:https://github.com/cs2113-ay1819s2-t08-2/main[Team T08-2]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "\u003d\u003d About this Developer Guide"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "This developer guide serves to assist you in making contributions to the _LIFE_ application."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "To get started, jump to \u003c\u003cSetting Up\u003e\u003e."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "Follow the instructions below to set up and configure _LIFE_ project files on your computer."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `8`* (revision `1.8.0_201` or later)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "If you do not"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "already have it installed, you can download it from"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "link:http://www.oracle.com/technetwork/java/javase/downloads/jre8-downloads-2133155.html[here]."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "+"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Only JDK 8 is supported. +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "This app will not work with later major JDK releases such as JDK 9, 10, 11, etc."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level4` repo."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level4`), you should do the following:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "image::classdiagramUI.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "* stores the _LIFE_ application data."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cTask\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change. +"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "(There exists `ObservableList\u003cPurchase\u003e`, `ObservableList\u003cWorkout\u003e` and `ObservableList\u003cHabit\u003e` as well)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "(This goes the same for each `Task`, `Purchase`, `Workout` and `Habit`)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "image:ModelClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "// tag::Task[]"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "\u003d\u003d\u003d Task Feature"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "\u003d\u003d\u003d\u003d `Task` package"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Reason for implementation"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "_LIFE_ is a tool for helping students manage their priorities, therefore the ability to help them document their tasks is highly essential."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "Each attribute of a Task, such as the task name, date of the deadline,"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "time of the deadline are classes in the `Task` package."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "Each of the classes provide utility methods to check the correctness of the string to be stored and to retrieve the string that is stored."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "The following classes are as such:"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "[width\u003d\"100%\", cols\u003d\"1,2,2\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "|Class |Constructor |Remark"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "|TaskName |new TaskName(\"CS2101 Developer Guide\")|Stores a `String` that represents the name"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "jayrometan"
        },
        "content": " of the task."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "|DeadlineDate|new DeadlineDate(\"020419\")|Stores a `String` that represents the deadline date of the task. String stored has to be in the DDMMYY format."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "|DeadlineTime|new DeadlineTime(\"2359\")|Stores a `String` that represents the deadline time of the task.  String stored has to be in the 24HRS format."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "|Tag|new Tag()|Stores a `String` that acts as a tag to the task. This field is *optional*."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "The `task` package includes the `Task` class which documents information about a task."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "jayrometan"
        },
        "content": " The `Task` class provides utility methods to retrieve the different objects (e.g. `DeadlineDate`)"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "[width\u003d\"100%\", cols\u003d\"1,2,2\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "|Class |Constructor |Remark"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "|Task |`new Task(TaskName, DeadlineDate, DeadlineTime, Tag)` |Stores `TaskName`, `DeadlineDate`,"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "jayrometan"
        },
        "content": " `DeadlineTime`, `Tag` objects to document a task\u0027s information."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "`Task` objects have to be unique. They are considered duplicates"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "jayrometan"
        },
        "content": " if they share the same TaskName and there is a check for duplicates when adding the task. This check"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "jayrometan"
        },
        "content": " is found in the `addTaskCommand.java` file which calls for `model` to verify any duplication"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "jayrometan"
        },
        "content": " before adding the `Task` instance into the `UniqueTaskList`."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Reasons for how it is implemented"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "The `task` package follows the model of the `person` package which existed before our"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "jayrometan"
        },
        "content": " team started this project. This made it easier for us to implement our features as we"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "  could follow the style of how the `person` package was implemented thereby"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "   improving the modularity and organization."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "//end::Task[]"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "\u003d\u003d\u003d\u003d Add Task"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Reason for implementation"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "To be able to document tasks, students should be able to add their tasks into the application."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "The `AddTaskCommand` is created when the command word `addTask` is detected in the user input."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "jayrometan"
        },
        "content": " Through the `AddTaskCommand`, the user input will then be split into its separate"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "  components(e.g. `TaskName`, `DeadlineDate`, `DeadlineTime`, `Tag`) through `ParserUtil`,"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "   creating a `Task` instance. This instance is then passed from the `logic` component to the `model` component."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "\u003d\u003d\u003d\u003d Model"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "In the `Model` component, the new `Task` object gets added to the list of tasks into the `UniqueTaskList`."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "Given below is an example usage scenario and how the `addTask` mechanism behaves at each step."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "Step 1. The user launches the application for the first time."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "_LIFE_ will initialize with the initial task list state and the currentStatePointer pointing to that single task li state."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "Step 2. The user executes the `addTask` command with `addTask n/Update User Documentation d/301219 e/2359`"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "Step 3. This command goes through the `AddTaskCommandParser` to extract the values of"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "the input string and to process it. It also searches for invalid input and duplicates."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "Step 4. Once valid, it passes the Task from the `logic` component to the `model` component into an ArrayList called `TaskList`."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "\u003d\u003d\u003d\u003d Alternatives considered"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "There is consideration for the use of hash map to hold the task list so that"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "we can easily implement a tag column. However, due to the lack of time and"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "the presence of already made list functions, we decided to stick with the arraylist"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "as our team is more familiar with it."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "// tag::Purchase[]"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "\u003d\u003d\u003d Expenditure List Feature"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "\u003d\u003d\u003d\u003d `Purchase` package"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Reason for implementation"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "_LIFE_ is also a tool for helping students manage their finances and spendings, therefore it is important to have a feature to help them record their expenditure regularly."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "Each attribute of a Purchase, the purchase name and price are classes in the `Purchase` package. Each class provides utility methods to check the correctness of the string to be stored and to retrieve the string that is stored."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "The following classes are as such:"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "[width\u003d\"100%\", cols\u003d\"1,2,2\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "|Class |Constructor |Remark"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "|PurchaseName |new PurchaseName(\"Ice cream\")|Stores a `String` that represents the name of the purchase."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "|Price|new Price(\"1.50\")|Stores a `String` that represents the price of the task. String stored has to be in the format of integers, followed by a decimal point then 2 integers."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "|Tag|new Tag()|Stores a `String` that acts as a tag to the new purchase. This field is *optional*."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "The `purchase` package includes the `Purchase` class which documents information about the a purchase. The `Purchase` class provided utility methods to retrieve the different objects (e.g. `Price`)"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "[width\u003d\"100%\", cols\u003d\"1,2,2\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "|Class |Constructor |Remark"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "|Purchase |`new Purchase(PurchaseName, Price, Tag)` |Stores `PurchaseName`, `Price`, `Tag` objects to document information of about a task."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Reasons for how it is implemented"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "The `purchase` package follows the model of the `person` package which existed before our team started this project. This made it easier for us to implement our features as we could follow the style of how the `person` package was implemented, improving the modularity and organization."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "//end::Purchase[]"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "\u003d\u003d\u003d\u003d Add Purchase"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Reason for implementation"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "To be able to track expenditure, students should be able to add the purchases bought, together with the prices."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "The `AddPurchaseCommand` is created when the command word `addPurchase` is detected in the user input. Through the `AddPurchaseCommand`, the user input will then be split into its seperate components(e.g. `PurchaseName`, `Price`, `Tag`) through `ParserUtil`, creating a `Purchase` instance and pass it from the `logic` component to the `model` component."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "\u003d\u003d\u003d\u003d Model"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "Given below is an example usage scenario and how the add mechanism behaves at each step."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "Step 1. The user launches the application for the first time."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "_LIFE_ will initialize with the initial expenditure list state."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "Step 2. The user executes the `addPurchase` command with `addPurchase pn/Ice Cream pr/$1.50`"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "Step 3. This command goes through the `AddPurchaseCommandParser` to extract the values of the input string and to process it. It also identifies invalid input."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "Step 4. Once valid, it passes the purchase from the `logic` component to the `model` component into an ArrayList called ExpenditureList."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "\u003d\u003d\u003d\u003d Alternatives considered"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "Similarly to the task list, a hash map could be considered, but the arraylist was decided to be used due to the lack of time and the presence of already made list functions."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "// tag::Workout[]"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "\u003d\u003d\u003d Workout Feature"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "\u003d\u003d\u003d\u003d `Workout` package"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Reason for implementation"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "_LIFE_ is a tool for helping students manage their workout records too, having this features will aid them in recording down their previous workouts."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "Each attribute of a Workout, such as the exercise, sets, reps and time are classes in the `Workout` package. Each of the class provide utility methods to check the correctness of the string to be stored and to retrieve the string that is stored."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "The following classes are as such:"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "[width\u003d\"100%\", cols\u003d\"1,2,2\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "|Class |Constructor |Remark"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "|Exercise |new Exercise(\"Push ups\")|Stores a `String` that represents the name of the exercise."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "|Sets|new Sets(\"1\")|Stores a `String` that represents the sets of the exercise done. Sets have to be integers only."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "|Reps|new Reps(\"20\")|Stores a `String` that represents the reps per set.  String stored has to be integers only."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "|Time|new Time(‘15’)|Stores a `String` that represent the time taken in minutes to finish the exercise. String stored has to be integers only."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "The `Workout` package includes the `Workout` class which documents information about the workout. The `Workout` class provides utility methods to retrieve the different objects (e.g. `Sets`)"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "[width\u003d\"100%\", cols\u003d\"1,2,2\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "|Class |Constructor |Remark"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "|Workout |`new Workout(Exercise, Sets, Reps, Time)` |Stores `Exercise`, `Sets`, `Reps`, `Time` objects to document information of about a workout."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Reasons for how it is implemented"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "The reason is the same for the implementation of the `Task` feature."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "//end::Workout[]"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "\u003d\u003d\u003d\u003d Add Workout"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Reason for implementation"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "To be able to document workout, students should be able to add the workouts into the application."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "The `RecordCommand` is created when the command word `record` is detected in the user input. Through the `RecordCommand`, the user input will then be split into its seperate components(e.g. `Exercise`, `Sets`, `Reps`, `Time`) through `ParserUtil`, creating a `Workout` instance and pass it from the `logic` component to the `model` component."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "\u003d\u003d\u003d\u003d Model"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "Given below is an example usage scenario and how the add mechanism behaves at each step."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "Step 1. The user launches the application for the first time."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "_LIFE_ will initialize with the initial workout list state and the currentStatePointer pointing to that single address book state."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "Step 2. The user executes the `record` command with `record e/push ups s/5 r/20 t/20`"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "Step 3. This command goes through the `RecordCommandParser` to extract the values of"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "the input string and to process it. It also searches for invalid input and duplicates."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "Step 4. Once valid, it passes the Workout from the `logic` component to the `model` component into an ArrayList called  ‘WorkoutList`."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the https://github.com/FasterXML/jackson[Jackson library] for JSON parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives:"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "[loweralpha]"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": ". Include those libraries in the repo (this bloats the repo size)"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": ". Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming]]"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Suggested Programming Tasks to Get Started"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "Suggested path for new programmers:"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-EachComponent]]"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Improving each component"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Logic` component"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the aliases that you have added."
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": "** Update the user guide to document the new aliases."
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Model` component"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": "** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each person, and remove the `tag` from each person."
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the new public methods that you have added."
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Ui` component"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": ". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-before.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-after.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": "** Use the .css attribute `-fx-background-color` to add a color."
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": "** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": "** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-before.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-after.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": "** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "** You can write two different kinds of tests to ensure that the functionality works:"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": "*** The unit tests for `ResultDisplay` can be modified to include verification of the color."
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": "*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": "*** Do read the commits one at a time if you feel overwhelmed."
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-before.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-after.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": "** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": "** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Storage` component"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": "* Hint"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": "** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/JsonAddressBookStorage.java[`JsonAddressBookStorage`] class."
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-RemarkCommand]]"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Creating a new command: `remark`"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": "By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Description"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for a person specified in the `INDEX`. +"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `remark INDEX r/[REMARK]`"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/Likes to drink coffee.` +"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for the first person to `Likes to drink coffee.`"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/` +"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": "Removes the remark for the first person."
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Step-by-step Instructions"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/Command.java[`Command`]. Upon execution, it should just throw an `Exception`."
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandTest` that tests that `execute()` throws an Exception."
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": ". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParserTest` that tests different boundary values"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": "for `RemarkCommandParser`."
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": ". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": "We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": ". Add test for `Remark`, to test the `Remark#equals()` method."
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": "Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": ". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `data/addressbook.json` so that the application will load the sample data when you launch it.)"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `JsonAdaptedPerson` class"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": "We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/JsonAdaptedPerson.java[`JsonAdaptedPerson`] to include a `Remark` field so that it will be saved."
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new JSON field for `Remark`."
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": ". Fix `invalidAndValidPersonAddressBook.json`, `typicalPersonsAddressBook.json`, `validAddressBook.json` etc., such that the JSON tests will not fail due to a missing `remark` field."
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": "Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": ". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": "Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": "We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": ". Update `RemarkCommandTest` to test that the `execute()` logic works."
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Full Solution"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": "See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "* student"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "* has a need to manage a significant number of contacts, tasks"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "* wishes to manage his/her expenditure"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "* likes to journal"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "*Value proposition*: One-stop application for students to improve their student life through"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "jayrometan"
        },
        "content": " documentation of their priorities and daily targets, enhancing their ability to manage their lives."
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "[width\u003d\"100%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "|`* * *` |user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "|`* * *` |user |create a list of daily tasks |form a habit"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "|`* * *` |user |tick off entries from the list of daily tasks |remove entries that I have accomplished"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "|`* * *` |user |view the list of daily tasks |remember what else I should accomplish"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "|`* * *` |user |clear the list of daily tasks |remove the all the tasks if I had accomplished them all"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "|`* * *` |user |add a new purchase I had spent on |keep a record of my expenditure"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "|`* * *` |user |delete a purchase made |remove items I had keyed n wrongly"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "|`* * *` |user |view list of expenses made |check on what i have spent on"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "|`* * *` |user |clear list of expenses made |have a new record of my expenditure"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "|`* * *` |user |find a purchase made |check back on the amount I had spent on a particular purchase"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "|`* * *` |user |view my previous workout logs |keep track of my workout history"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "|`* * *` |user |record a completed workout |refer back to it"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "|`* * *` |user |have a timer |keep track of the duration at which i spend doing certain activities"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "(For all use cases below, the *System* is the `_LIFE_` application and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "\u003d\u003d\u003d Use case: Add a  task"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ". User requests to add a new task  +"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "example: `addTask n/Update CS2113T Developer Guide"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "jayrometan"
        },
        "content": " d/311219 h/2359` +"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ". _LIFE_ adds the task into the array list +"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "\u003d\u003d\u003d Use case: Edit a task"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ". _LIFE_ already shows a list of daily tasks"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ". User requests to edit a specific task in the list via INDEX"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "e.g. `editTask INDEX n/REDO CS2113T`"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ". _LIFE_ edits the task"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "+"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "* 2a. Task List is empty."
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "+"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "* 3a. Index not in Task List."
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "** 3a1. _LIFE_ shows an error message."
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "+"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "\u003d\u003d\u003d Use Case: Delete a Task"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ". _LIFE_ already displays the task list"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ". User requests to remove the task with `deleteTask INDEX`"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ". _LIFE_ removes the task"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "* 1. Task List is empty."
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "+"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "* 2a. Index not in Task List."
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "** 2a1. _LIFE_ shows an error message."
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "+"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "\u003d\u003d\u003d Use Case: Add a new purchase"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ". User requests to add a new purchase into the Expenditure List"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ". _LIFE_ adds the purchase into the Expenditure List with name of purchase and its price"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "\u003d\u003d\u003d Use Case: View Expenditure List"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ". User requests to list expenditure"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ". _LIFE_ shows the Expenditure List"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "* 1a. Expenditure List is empty."
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "\u003d\u003d\u003d Use Case: Delete a purchase"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ". User requests to view Expenditure List"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ". _LIFE_ shows the Expenditure List"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ". User requests to delete a specific purchase on the list"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ". _LIFE_ deletes the purchase"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "+"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "* 2a. Daily List is empty."
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "+"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "* 3a. Index not in Daily List."
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "** 3a1. _LIFE_ shows an error message."
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "+"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "\u003d\u003d\u003d Use Case: Clear Expenditure List"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ". User requests to view Expenditure List"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ". _LIFE_ shows the Expenditure List"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ". User requests to clear the Expenditure List"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "+"
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "\u003d\u003d\u003d Use Case: Find a specific purchase"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ". User requests to see log of a specific purchase"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ". _LIFE_ shows this particular purchase with its price"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "* 1a. Expenditure List is empty."
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "* 2a. Index not in Daily List."
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "** 2a1. _LIFE_ shows an error message."
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "\u003d\u003d\u003d Use Case: Start Stopwatch"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ". User requests to start a stopwatch"
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ". _LIFE_ records the time"
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "\u003d\u003d\u003d Use Case: Stop Stopwatch"
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ". User requests to stop the running stopwatch"
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ". _LIFE_ retrieves the start time and shows the total time elapsed"
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "+"
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "* 1a. User did not start the stopwatch."
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "** 1a1. _LIFE_ shows an error message."
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "+"
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "\u003d\u003d\u003d Use Case: Record Completed Workout"
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ". User requests to add an entry of completed workout"
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ". _LIFE_ records the workout log"
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "+"
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "\u003d\u003d\u003d Use Case: View Workout Log"
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ". User requests to view Workout Log"
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ". _LIFE_ shows the Workout Log"
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "+"
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "* 1a. Workout Log is empty."
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "+"
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `8` (revision `1.8.0_201` or higher) installed."
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "*_LIFE_*"
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "Authors: Jerome, YuQi, Wei Zhong, YongJia link:https://github.com/cs2113-ay1819s2-t08-2/main[@T08-2]"
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "* Lots of features such as"
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "****"
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "* Task Management"
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "* Expenditure Management"
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "* Recording of Workouts"
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "* Documenting of Journal"
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "****"
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "* Information can be located easily"
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "* Non-interactive user interface, used a console based interface instead"
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "* Have to memorise commands"
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "weizhonglauw": 62,
      "-": 928,
      "jayrometan": 375
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "\u003d LIFE - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/cs2113-ay1819s2-t08-2/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "By: `CS2113-AY1819S2-T08-2`      Since: `Mar 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "*LIFE* - _Lifestyle Improvement For Everyone_ +"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "This is a one stop application made for NUS students to manage and improve their student lives amidst their hectic schedules. +"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "Interesting features include: +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "* Task List +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "* Expenditure List +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "* Workout Tracker +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "* Habit Tracker +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "* Contact List"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "Interested? Jump to Section 2, “Quick Start” to get started. Enjoy!"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java `8` (revision `1.8.0_201` or later) installed in your Computer."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Only Java 8 is supported. +"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "This app will not work with later major Java releases such as Java 9, 10, 11, etc."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".  Download the latest `addressbook.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for _LIFE_ application."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "image::startupGUI.PNG[width\u003d\"790\"]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* *`list`* : lists all contacts"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "* **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : adds a contact named `John Doe` to the Contact List."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* **`delete`**`3` : deletes the 3rd contact shown in the current list"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional e.g n/NAME [d/DEADLINE_DATE] can be used as n/CS2113 User Guide d/030919 or as n/CS2113 User Guide."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Task List"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "A feature to help you record your tasks at hand with the deadlines, say no more to procrastination! +"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a Task : `addTask`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "Adds a task to the daily list. +"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `addTask n/TAK d/DEADLINE_DATE h/DEADLINE_TIME`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "Words in `UPPER_CASE` are the parameters. +"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "All fields are compulsory +"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "TASK contains the name of the TASK +"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "DEADLINE_DATE should be in the DDMMYY format +"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "DEADLINE_TIME should be in 24HRS"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "* `addTask n/Complete CS2113T Assignment d/180319 h/2359`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "* `addTask n/Submit Exchange Application d/200319 h/0800`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Delete Task : `deleteTask` "
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the specified item off the Task List.  +"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `deleteTask INDEX`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "Words in `UPPER_CASE` are the parameters."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the item at the specified `INDEX`. +"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "The `INDEX` can be found just by looking at the INDEX of the task displayed in the GUI +"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "The `INDEX` must be a positive integer 1,2,3 ..."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "* `deleteTask 5` +"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the task at INDEX 5"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Edit Task : `editTask` "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "Edits an existing specified task on the Task List.  +"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `editTask 1 [n/Jerome] [d/DEADLINE_DATE] [h/DEADLINE_TIME]`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "Words in `UPPER_CASE` are the parameters."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the task at the specified INDEX. +"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "The index needs to be provided +"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "At least one of the optional fields must be provied +"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "Existing values will be replaced with the input values +"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "DEADLINE_DATE should be in the DDMMYY format +"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "DEADLINE_TIME should be in the 24HRS format"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "* `editTask 2 n/Banana` +"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "Change the task name of the task specified at INDEX 2 to Banana."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* `editTask 2 d/300219` +"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "Change the deadline date of the task specified at INDEX 2 to 300219."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "\u003d\u003d\u003d\u003d Clear Task : `clearTask` [coming soon]"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "Clears off all the tasks from the Task List. +"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clearTask`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "\u003d\u003d\u003d Expenditure List"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "A list to help you keep track of all your expenses so that you can better manage your finances! +"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a purchase: `addpurchase`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "Adds a new purchase to the expenditure list +"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `addpurchase n/NAME pr/PRICE [t/TAG]...`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "* Only SGD currency is supported."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "* You only have to input the value (see example)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "* `addpurchase n/Ice cream pr/1.50`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "* `addpurchase n/Bicycle rental pr/10.00 t/family t/eastcoastpark`"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "\u003d\u003d\u003d\u003d Listing all past expenditures: `explist`"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "Shows a list of all recorded purchases with the corresponding price in the expenditure list. +"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `explist`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting a purchase: `deletepurchase` [coming soon]"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes an existing purchase in the expenditure list. +"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `deletepurchase INDEX`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "* Deletes the purchase at the specified `INDEX`."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the displayed expenditure list."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* (1, 2, 3, …) ."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "* `explist` +"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "`deletepurchase 2` +"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the 2nd purchase in the expenditure list."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "\u003d\u003d\u003d\u003d Clearing expenditure list: `clearexplist`"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "Clears all past purchases recorded from the expenditure list. +"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "Format: `clearexplist`"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "\u003d\u003d\u003d\u003d Calculating total expenditure for the day: `totalexpday` [coming soon]"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "Views total expenditure for the day +"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `totalexpday DATE`"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "DATE should be in the DDMMYY format"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "`totalexpday 191218`"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "\u003d\u003d\u003d\u003d Set spending limit: `setlimit` [coming soon]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "Sets a spending limit for one day to control expenditure. +"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `setlimit VALUE`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "* Only SGD currency is supported."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "* You only have to input the value (see example)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "`setlimit 20.00`"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "\u003d\u003d\u003d Contact List"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "Manage all your contacts easily in this ultimate list holding your contacts with their information! +"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a person : `add`"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "Adds a person to the contact list +"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...`"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "A person can have any number of tags (including 0)"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01`"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "* `add n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 t/criminal`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "\u003d\u003d\u003d\u003d Listing all persons : `list`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "Shows a list of all persons in the contact list. +"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "\u003d\u003d\u003d\u003d Editing a person : `edit`"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "Edits an existing person in the contact list. +"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]...`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "* Edits the person at the specified `INDEX`. The index refers to the index number shown in the displayed person list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "* You can remove all the person\u0027s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "* `edit 1 p/91234567 e/johndoe@example.com` +"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "* `edit 2 n/Betsy Crower t/` +"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "\u003d\u003d\u003d\u003d Locating persons by name: `find`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "Finds persons whose names contain any of the given keywords. +"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "* Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "* `find John` +"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Returns `john` and `John Doe`"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy Tim John` +"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "Returns any person having names `Betsy`, `Tim`, or `John`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting a person : `delete`"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "Deletes the specified person from the contact list. +"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "* Deletes the person at the specified `INDEX`."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "Deletes the 2nd person in the contact list."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "\u003d\u003d\u003d\u003d Selecting a person : `select`"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "Selects the person identified by the index number used in the displayed person list. +"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `select INDEX`"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "* Selects the person and loads the Google search page the person at the specified `INDEX`."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* `1, 2, 3, ...`"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "`select 2` +"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "Selects the 2nd person in the contact list."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "`select 1` +"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "Selects the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "\u003d\u003d\u003d Habit Tracker [coming in v1.4]"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "Change your lifestyle now by recording an activity regularly to turn it into a habit! +"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "\u003d\u003d\u003d\u003d Add desired Habits: `addHabit` [coming soon]"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "Add habit which you wish to track into your monthly habit tracker. +"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "Format: \u0027addHabit d/DATE h/HABIT a/ACCOMPLISHED\u0027"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "A calendar of the month is shown, along with previous records of the month."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "* `addHabit d/010119 n/SleepBefore12am a/Done`"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "\u003d\u003d\u003d Workout Tracker [coming in v1.4]"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "Record your workouts and reps so that you can make the most out of the exercises! +"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "\u003d\u003d\u003d\u003d View workout: `workout` [coming soon]"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "View the past 5 most recent workout. +"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `workout`"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "Only the most recent 5 workout will be displayed, older workout will not be shown"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "* `workout`"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "\u003d\u003d\u003d\u003d Record workout : `record` [coming soon]"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "Record your current workout and add them into your workout records. +"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `record e/EXERCISE s/SETS r/REPS t/TIME`"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "Words in `UPPER_CASE` are the parameters."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "EXERCISE must only contain alphanumeric. +"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "SETS, REPS and TIME must only contain integer, and TIME must be in minutes +"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "* `record e/SIT UPS s/5 r/20 t/10`"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "Record the workout of doing 5 SETS of 20 REPS of SIT UPS in 10 MINUTES"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d General Commands"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "Use this if you face trouble navigating the application or entering the correct commands!"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing entered commands : `history`"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order (most recent at the top). +"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undoing previous command : `undo`"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "Restores _LIFE_ application to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "Undoable commands: those commands that modify the _LIFE_\u0027s content (`add`, `delete`, `edit` and `clear`)."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "* `select 1` +"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Redoing the previously undone command : `redo`"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `clear` command) +"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "Data of _LIFE_ are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Encrypting data files `[coming in v2.0]`"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "_{explain how the user can enable/disable data encryption}_"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous _LIFE_ folder."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "* *Add* : `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...` +"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague`"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "* *List* : `list`"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "* *Edit* : `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]...` +"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `edit 2 n/James Lee e/jameslee@example.com`"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `find James Jake`"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "* *Delete* : `delete INDEX` +"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `delete 3`"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "* *Select* : `select INDEX` +"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "e.g.`select 2`"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "* *Add Task* : `addTask  n/TASK d/DEADLINE_DATE h/DEADLINE_TIME` +"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "e.g. `addTask n/Submit Exchange Application d/200319 h/0800`"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "* *Add Purchase* : `addpurchase n/NAME pr/PRICE [t/TAG]...` +"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "e.g. `addpurchase n/Bicycle rental pr/10.00 t/3hrs at East Coast Park`"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "* *View Purchases*: `explist`"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "* *Clear Expenditure List*: `clearexplist`"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "* *History* : `history`"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "* *Undo* : `undo`"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "* *Redo* : `redo`"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "* *Exit* : `exit`"
      }
    ],
    "authorContributionMap": {
      "weizhonglauw": 77,
      "-": 404
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.model.*;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.storage.*;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    private Optional\u003cReadOnlyTaskList\u003e taskListOptional;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    private Optional\u003cReadOnlyExpenditureList\u003e expListOptional;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    private Optional\u003cReadOnlyWorkoutBook\u003e workoutBookOptional;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        TaskListStorage taskListStorage \u003d new JsonTaskListStorage(userPrefs.getTaskListFilePath());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        ExpenditureListStorage expenditureListStorage \u003d new JsonExpenditureListStorage(userPrefs.getExpenditureListFilePath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        WorkoutBookStorage workoutBookStorage \u003d new JsonWorkoutBookStorage(userPrefs.getWorkoutBookFilePath());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage, taskListStorage, expenditureListStorage, workoutBookStorage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        Optional\u003cReadOnlyTaskList\u003e taskListOptional;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        Optional\u003cReadOnlyExpenditureList\u003e expenditureListOptional;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        ReadOnlyTaskList initialTasks;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        ReadOnlyExpenditureList initialPurchases;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        ReadOnlyWorkoutBook initialWorkout;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            taskListOptional \u003d storage.readTaskList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            if (!taskListOptional.isPresent()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            initialTasks \u003d taskListOptional.orElseGet(SampleDataUtil::getSampleTaskList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            initialTasks \u003d new TaskList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            initialTasks \u003d new TaskList();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            expenditureListOptional \u003d storage.readExpenditureList();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            if (!expenditureListOptional.isPresent()) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample ExpenditureList\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            initialPurchases \u003d expenditureListOptional.orElseGet(SampleDataUtil::getSampleExpenditureList);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty ExpenditureList\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            initialPurchases \u003d new ExpenditureList();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty ExpenditureList\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            initialPurchases \u003d new ExpenditureList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "            workoutBookOptional \u003d storage.readWorkoutBook();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "            if (!workoutBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample WorkoutList\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "            initialWorkout \u003d workoutBookOptional.orElseGet(SampleDataUtil::getSampleWorkoutBook);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty WorkoutList\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "            initialWorkout \u003d new WorkoutBook();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty WorkoutList\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "            initialWorkout \u003d new WorkoutBook();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        return new ModelManager(initialData, userPrefs, initialTasks, initialPurchases, initialWorkout);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yongjia96": 19,
      "-": 168,
      "weizhonglauw": 18,
      "jayrometan": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public static final String MESSAGE_INVALID_TASK_DISPLAYED_INDEX \u003d \"The task index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "//    public static final String MESSAGE_INVALID_PURCHASE_DISPLAYED_INDEX \u003d \"The purchase index provided is invalid\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 13,
      "weizhonglauw": 1,
      "jayrometan": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.model.ReadOnlyTaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import seedu.address.model.ReadOnlyExpenditureList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import seedu.address.model.ReadOnlyWorkoutBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import seedu.address.model.purchase.Purchase;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import seedu.address.model.workout.Workout;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredTaskList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    ObservableList\u003cWorkout\u003e getFilteredWorkoutList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of commands entered by the user."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * The list is ordered from the least recent command to the most recent command."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cString\u003e getHistory();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selected person in the filtered person list."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * null if no person is selected."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#selectedPersonProperty()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyProperty\u003cPerson\u003e selectedPersonProperty();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the selected person in the filtered person list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#setSelectedPerson(Person)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    void setSelectedPerson(Person person);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    ReadOnlyProperty\u003cTask\u003e selectedTaskProperty();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    void setSelectedTask(Task task);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "     ReadOnlyTaskList getTaskList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * Returns the ExpenditureList."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * @see seedu.address.model.Model#getExpenditureList()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    ReadOnlyExpenditureList getExpenditureList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of purchases */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    ObservableList\u003cPurchase\u003e getFilteredPurchaseList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * Selected purchase in the filtered purchase list."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * null if no purchase is selected."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * @see seedu.address.model.Model#selectedPurchaseProperty()"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    ReadOnlyProperty\u003cPurchase\u003e selectedPurchaseProperty();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * Sets the selected person in the filtered purchase list."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * @see seedu.address.model.Model#setSelectedPurchase(Purchase)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    void setSelectedPurchase(Purchase purchase);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    ReadOnlyProperty\u003cWorkout\u003e selectedWorkoutProperty();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    void setSelectedWorkout(Workout workout);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    ReadOnlyWorkoutBook getWorkoutList();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yongjia96": 14,
      "-": 72,
      "weizhonglauw": 25,
      "jayrometan": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import seedu.address.model.ReadOnlyExpenditureList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.model.ReadOnlyTaskList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import seedu.address.model.ReadOnlyWorkoutBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import seedu.address.model.purchase.Purchase;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import seedu.address.model.workout.Workout;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean addressBookModified;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    private boolean taskListModified;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    private boolean expenditureListModified;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    private boolean workoutBookModified;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set addressBookModified to true whenever the models\u0027 address book is modified."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        model.getAddressBook().addListener(observable -\u003e addressBookModified \u003d true);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        model.getTaskList().addListener(observable -\u003e taskListModified \u003d true);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        model.getExpenditureList().addListener(observable -\u003e expenditureListModified \u003d true);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        model.getWorkoutList().addListener(observable -\u003e workoutBookModified \u003d true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookModified \u003d false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        taskListModified \u003d false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        expenditureListModified \u003d false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        workoutBookModified \u003d false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            commandResult \u003d command.execute(model, history);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        if (taskListModified){"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            logger.info(\"Task list modified, saving to file.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "                storage.saveTaskList(model.getTaskList());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "                throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        if (expenditureListModified) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            logger.info(\"Expenditure list modified, saving to file.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "                storage.saveExpenditureList(model.getExpenditureList());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "                throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        if (workoutBookModified) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (addressBookModified) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Address book modified, saving to file.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public ReadOnlyTaskList getTaskList(){"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        return model.getTaskList();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public ReadOnlyExpenditureList getExpenditureList(){"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        return model.getExpenditureList();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public ReadOnlyWorkoutBook getWorkoutList() { return model.getWorkoutList(); }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList() { return model.getFilteredTaskList(); }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public ObservableList\u003cPurchase\u003e getFilteredPurchaseList() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        return model.getFilteredPurchaseList();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public ObservableList\u003cWorkout\u003e getFilteredWorkoutList() {return model.getFilteredWorkoutList(); }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        return history.getHistory();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyProperty\u003cPerson\u003e selectedPersonProperty() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.selectedPersonProperty();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public ReadOnlyProperty\u003cTask\u003e selectedTaskProperty(){"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        return model.selectedTaskProperty();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public ReadOnlyProperty\u003cWorkout\u003e selectedWorkoutProperty() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        return model.selectedWorkoutProperty();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public ReadOnlyProperty\u003cPurchase\u003e selectedPurchaseProperty() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        return model.selectedPurchaseProperty();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setSelectedPerson(Person person) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setSelectedPerson(person);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public void setSelectedTask(Task task){"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        model.setSelectedTask(task);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public void setSelectedPurchase(Purchase purchase) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        model.setSelectedPurchase(purchase);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public void setSelectedWorkout(Workout workout) {model.setSelectedWorkout(workout);}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yongjia96": 20,
      "-": 108,
      "weizhonglauw": 43,
      "jayrometan": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the contact list. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the contact list.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 67,
      "weizhonglauw": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddPurchaseCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PURCHASENAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import seedu.address.model.purchase.Purchase;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": " * Adds a purchase to the expenditure list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "public class AddPurchaseCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addpurchase\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a purchase to the expenditure list. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            + PREFIX_PURCHASENAME + \"NAME \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            + PREFIX_PRICE + \"PRICE \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            + PREFIX_PURCHASENAME + \"Chicken rice \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            + PREFIX_PRICE + \"4.50 \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            + PREFIX_TAG + \"food\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New purchase added: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    private final Purchase toAddPurchase;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * Creates an AddPurchaseCommand to add the specified {@code Purchase}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public AddPurchaseCommand(Purchase purchase) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        requireNonNull(purchase);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        toAddPurchase \u003d purchase;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        model.addPurchase(toAddPurchase);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        model.commitExpenditureList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAddPurchase));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "                || (other instanceof AddPurchaseCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "                \u0026\u0026 toAddPurchase.equals(((AddPurchaseCommand) other).toAddPurchase));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weizhonglauw": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddTaskCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "public class AddTaskCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addTask\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a task to the task list.\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            + PREFIX_DEADLINE_DATE + \"DEADLINE_DATE\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            + PREFIX_DEADLINE_TIME + \"DEADLINE_TIME\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            + \u0027[\u0027 + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            + PREFIX_NAME + \"CS2113T MILESTONE V5 \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            + PREFIX_DEADLINE_DATE + \"290319 \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            + PREFIX_DEADLINE_TIME + \"2359 \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            + PREFIX_TAG + \"HIGH\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "  //  public static final String MESSAGE_SUCCESS \u003d \"New task added: \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New task added: %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"This task already exists in the task list\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    private final Task newTask;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "     * @param task that is being added."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public AddTaskCommand(Task task) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        newTask \u003d task;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    /*private final Task toAdd;*/"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        if (model.hasTask(newTask)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        model.addTask(newTask);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        model.commitTaskList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        //String toBePrinted \u003d MESSAGE_SUCCESS  + newTask.getTaskName() + \" | \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "           //     + \"DEADLINE: \" + newTask.getDeadlineDate() + \u0027 \u0027 + newTask.getDeadlineTime() + \"HRS\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, newTask));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                || (other instanceof AddTaskCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                \u0026\u0026 newTask.equals(((AddTaskCommand) other).newTask));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jayrometan": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearExpListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import seedu.address.model.ExpenditureList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": " * Clears the expenditure list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "public class ClearExpListCommand extends Command{"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clearexplist\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Expenditure List has been cleared!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        model.setExpenditureList(new ExpenditureList());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        model.commitExpenditureList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weizhonglauw": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteTaskCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "public class DeleteTaskCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteTask\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            + \": Deletes a task identified by the index number used in the displayed task list.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public static final String MESSAGE_DELETE_TASK_SUCCESS \u003d \"Deleted Task: %1$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public DeleteTaskCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        Task taskToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        model.deleteTask(taskToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        model.commitTaskList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_TASK_SUCCESS, taskToDelete));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                || (other instanceof DeleteTaskCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteTaskCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jayrometan": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the contact list.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 227,
      "weizhonglauw": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditTaskCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.model.task.DeadlineDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.model.task.DeadlineTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.model.task.TaskName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.*;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "public class EditTaskCommand extends Command{"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editTask\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD +"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            \": Edits the details of the task identified \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            + \"by the index number used in the displayed task list. \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            + \"[\" + PREFIX_DEADLINE_TIME + \"DeadlineTime] \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            + \"[\" + PREFIX_DEADLINE_DATE + \"DeadlineDate] \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"1\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            + PREFIX_DEADLINE_DATE + \"311219 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            + PREFIX_DEADLINE_TIME + \"2359\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public static final String MESSAGE_EDIT_TASK_SUCCESS \u003d \"Edited Task: %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"This task already exists in the task book\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    private final EditTaskDescriptor editTaskDescriptor;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public EditTaskCommand(Index index, EditTaskDescriptor editTaskDescriptor){"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        requireNonNull(editTaskDescriptor);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        this.editTaskDescriptor \u003d editTaskDescriptor;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()){"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        Task taskToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        Task editedTask \u003d createEditedTask(taskToEdit, editTaskDescriptor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        if (!taskToEdit.isSameTask(editedTask) \u0026\u0026 model.hasTask(editedTask)){"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        model.setTask(taskToEdit, editedTask);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        model.commitTaskList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_TASK_SUCCESS, editedTask));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    private Task createEditedTask(Task taskToEdit, EditTaskDescriptor editTaskDescriptor) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        assert taskToEdit !\u003d null;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        TaskName updatedTaskName \u003d editTaskDescriptor.getTaskName().orElse(taskToEdit.getTaskName());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        DeadlineTime updatedDeadlineTime \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                editTaskDescriptor.getDeadlineTime().orElse(taskToEdit.getDeadlineTime());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        DeadlineDate updatedDeadlineDate \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                editTaskDescriptor.getDeadlineDate().orElse(taskToEdit.getDeadlineDate());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                editTaskDescriptor.getTags().orElse(taskToEdit.getTags());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        return new Task(updatedTaskName, updatedDeadlineTime, updatedDeadlineDate, updatedTags);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        if (other \u003d\u003d this){"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        if (!(other instanceof EditTaskCommand)){"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        EditTaskCommand e \u003d (EditTaskCommand) other;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                \u0026\u0026 editTaskDescriptor.equals(e.editTaskDescriptor);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public static class EditTaskDescriptor{"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        private TaskName taskName;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        private DeadlineTime deadlineTime;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        private DeadlineDate deadlineDate;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        public EditTaskDescriptor(){}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        public EditTaskDescriptor(EditTaskDescriptor toCopy){"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            setTaskName(toCopy.taskName);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            setDeadlineDate(toCopy.deadlineDate);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            setDeadlineTime(toCopy.deadlineTime);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        public boolean isAnyFieldEdited(){ return CollectionUtil.isAnyNonNull(taskName, deadlineDate, deadlineTime, tags); }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        public void setTaskName(TaskName taskName){ this.taskName \u003d taskName;}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        public Optional\u003cTaskName\u003e getTaskName() {return Optional.ofNullable(taskName); }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        public void setDeadlineDate(DeadlineDate deadlineDate){ this.deadlineDate \u003d deadlineDate;}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        public Optional\u003cDeadlineDate\u003e getDeadlineDate() { return Optional.ofNullable(deadlineDate);}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        public void setDeadlineTime(DeadlineTime deadlineTime){ this.deadlineTime \u003d deadlineTime;}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        public Optional\u003cDeadlineTime\u003e getDeadlineTime() { return Optional.ofNullable(deadlineTime);}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "         */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "         */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            if (!(other instanceof EditTaskDescriptor)) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            EditTaskDescriptor e \u003d (EditTaskDescriptor) other;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            return getTaskName().equals(e.getTaskName())"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                    \u0026\u0026 getDeadlineDate().equals(e.getDeadlineDate())"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                    \u0026\u0026 getDeadlineTime().equals(e.getDeadlineTime())"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jayrometan": 169
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting LIFE application as requested ...\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "weizhonglauw": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExpListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PURCHASES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": " * Lists all purchases in the expenditure list to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "public class ExpListCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"explist\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all purchases\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        model.updateFilteredPurchaseList(PREDICATE_SHOW_ALL_PURCHASES);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weizhonglauw": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RecordCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import seedu.address.model.workout.Workout;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "public class RecordCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"record\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New workout added: \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"dummy string\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    private final Workout newWorkout;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     * @param workout that is being added."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public RecordCommand(Workout workout) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        requireNonNull(workout);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        newWorkout \u003d workout;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    /*private final Task toAdd;*/"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "//        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "//            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        model.addWorkout(newWorkout);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        model.commitWorkoutBook();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        //model.commitAddressBook();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        String toBePrinted \u003d MESSAGE_SUCCESS  + newWorkout.getExercise() + \" | \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "                + \"SETS: \" + newWorkout.getSets() + \u0027 \u0027 + newWorkout.getReps() + \"REPS\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "                + \"TIME: \" + newWorkout.getTime();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        return new CommandResult(String.format(toBePrinted, newWorkout));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "   // @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "   // public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     //   return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "       //         || (other instanceof AddTaskCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "         //       \u0026\u0026 newTask.equals(((AddTaskCommand) other).newTask));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yongjia96": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddPurchaseCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PURCHASENAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import seedu.address.logic.commands.AddPurchaseCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import seedu.address.model.purchase.PurchaseName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import seedu.address.model.purchase.Purchase;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import seedu.address.model.purchase.Price;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": " * Parses input arguments and creates a new AddPurchaseCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "public class AddPurchaseCommandParser implements Parser\u003cAddPurchaseCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddPurchaseCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * and returns an AddPurchaseCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public AddPurchaseCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_PURCHASENAME, PREFIX_PRICE, PREFIX_TAG);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_PURCHASENAME, PREFIX_PRICE)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPurchaseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        PurchaseName name \u003d ParserUtil.parsePurchaseName(argMultimap.getValue(PREFIX_PURCHASENAME).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        Price price \u003d ParserUtil.parsePrice(argMultimap.getValue(PREFIX_PRICE).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        Purchase purchase \u003d new Purchase(name, price, tagList);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        return new AddPurchaseCommand(purchase);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weizhonglauw": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddTaskCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.logic.commands.AddTaskCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.model.task.DeadlineDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.model.task.DeadlineTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.model.task.TaskName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.*;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "/* Add RemarkCommandParser that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027 */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "public class AddTaskCommandParser implements Parser\u003cAddTaskCommand\u003e{"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of adding something"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "     * and returns an ADdTaskCommand object for execution"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public AddTaskCommand parse(String args) throws ParseException{"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DEADLINE_DATE, PREFIX_DEADLINE_TIME, PREFIX_TAG);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_DEADLINE_DATE, PREFIX_DEADLINE_TIME)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTaskCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        TaskName taskName \u003d ParserUtil.parseTaskName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        DeadlineDate deadlineDate \u003d ParserUtil.parseDeadlineDate(argMultimap.getValue(PREFIX_DEADLINE_DATE).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        DeadlineTime deadlineTime \u003d ParserUtil.parseDeadlineTime(argMultimap.getValue(PREFIX_DEADLINE_TIME).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        Task task \u003d new Task(taskName, deadlineTime, deadlineDate, tagList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "       // logger.info(\"Task Name DeadlineTime DeadlineDate\" + taskName.fullName + \u0027 \u0027 + deadlineTime + \" \" + deadlineDate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        return new AddTaskCommand(task);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jayrometan": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.logic.commands.*;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        case AddTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            return new AddTaskCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            case DeleteTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                return new DeleteTaskCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            case EditTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                return new EditTaskCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        case AddPurchaseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            return new AddPurchaseCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            case ExpListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "                return new ExpListCommand();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            case ClearExpListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "                return new ClearExpListCommand();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "            case RecordCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "                return new RecordCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yongjia96": 4,
      "-": 79,
      "weizhonglauw": 9,
      "jayrometan": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public static final Prefix PREFIX_PURCHASENAME \u003d new Prefix(\"pn/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public static final Prefix PREFIX_DEADLINE_DATE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public static final Prefix PREFIX_DEADLINE_TIME \u003d new Prefix(\"h/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public static final Prefix PREFIX_PRICE \u003d new Prefix(\"pr/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public static final Prefix PREFIX_EXERCISE \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public static final Prefix PREFIX_SETS \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public static final Prefix PREFIX_REPS \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public static final Prefix PREFIX_TIME \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yongjia96": 4,
      "-": 14,
      "weizhonglauw": 2,
      "jayrometan": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteTaskCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.logic.commands.DeleteTaskCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "public class DeleteTaskCommandParser implements Parser\u003cDeleteTaskCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteTaskCommand"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "     * and returns an DeleteTaskCommand object for execution."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public DeleteTaskCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            return new DeleteTaskCommand(index);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                    DeleteTaskCommand.MESSAGE_USAGE, pe));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jayrometan": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditTaskCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.logic.commands.EditTaskCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.logic.commands.EditTaskCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.*;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "public class EditTaskCommandParser implements Parser\u003cEditTaskCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public EditTaskCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DEADLINE_DATE,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                        PREFIX_DEADLINE_TIME, PREFIX_TAG);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditTaskCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        EditTaskDescriptor editTaskDescriptor \u003d new EditTaskDescriptor();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            editTaskDescriptor.setTaskName(ParserUtil.parseTaskName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DEADLINE_DATE).isPresent()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            editTaskDescriptor.setDeadlineDate(ParserUtil.parseDeadlineDate(argMultimap.getValue(PREFIX_DEADLINE_DATE).get()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DEADLINE_TIME).isPresent()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            editTaskDescriptor.setDeadlineTime(ParserUtil.parseDeadlineTime(argMultimap.getValue(PREFIX_DEADLINE_TIME).get()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editTaskDescriptor::setTags);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        if (!editTaskDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            throw new ParseException(EditTaskCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        return new EditTaskCommand(index, editTaskDescriptor);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jayrometan": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.model.task.DeadlineDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.model.task.DeadlineTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.model.task.TaskName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import seedu.address.model.purchase.PurchaseName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import seedu.address.model.purchase.Price;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import seedu.address.model.workout.Exercise;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import seedu.address.model.workout.Sets;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import seedu.address.model.workout.Reps;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import seedu.address.model.workout.Time;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public static TaskName parseTaskName(String name) throws ParseException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        if (!TaskName.isValidName(name)){"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            throw new ParseException(TaskName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        return new TaskName(name);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public static DeadlineDate parseDeadlineDate(String date) throws ParseException{"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        if (!DeadlineDate.isValidDeadlineDate(date)){"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            throw new ParseException(DeadlineDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "      //  Integer newDate \u003d Integer.parseInt(date);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        //need to add in commands to check valid deadline date if it is before this date or something"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        return new DeadlineDate(date);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public static DeadlineTime parseDeadlineTime(String time) throws ParseException{"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "       // Integer newTime \u003d Integer.parseInt(time);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        if (!DeadlineTime.isValidDeadlineTime(time)){"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            throw new ParseException((DeadlineTime.MESSAGE_CONSTRAINTS));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        return new DeadlineTime(time);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public static PurchaseName parsePurchaseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        String trimmedPurchaseName \u003d name.trim();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        if (!PurchaseName.isValidName(trimmedPurchaseName)) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            throw new ParseException(PurchaseName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        return new PurchaseName(trimmedPurchaseName);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * Parses a {@code String price} into a {@code Price}."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * @throws ParseException if the given {@code price} is invalid."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public static Price parsePrice(String price) throws ParseException {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        requireNonNull(price);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        String trimmedPrice \u003d price.trim();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        if (!Price.isValidPrice(trimmedPrice)) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            throw new ParseException(Price.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        return new Price(trimmedPrice);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public static Exercise parseExercise(String exercise) throws ParseException {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        requireNonNull(exercise);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        String trimmedExercise \u003d exercise.trim();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        if (!Exercise.isValidExercise(trimmedExercise)) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "            throw new ParseException(Exercise.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        return new Exercise(trimmedExercise);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public static Sets parseSets(String sets) throws ParseException {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        requireNonNull(sets);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        String trimmedSets \u003d sets.trim();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        if (!Sets.isValidSets(trimmedSets)) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "            throw new ParseException(Sets.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        return new Sets(trimmedSets);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public static Reps parseReps(String reps) throws ParseException {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        requireNonNull(reps);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        String trimmedReps \u003d reps.trim();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        if (!Reps.isValidReps(trimmedReps)) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "            throw new ParseException(Reps.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        return new Reps(trimmedReps);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public static Time parseTime(String time) throws ParseException {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        String trimmedTime \u003d time.trim();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        if (!Time.isValidTime(trimmedTime)) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "            throw new ParseException(Time.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        return new Time(trimmedTime);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yongjia96": 37,
      "-": 124,
      "weizhonglauw": 28,
      "jayrometan": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/RecordCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXERCISE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REPS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SETS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import seedu.address.logic.commands.RecordCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import seedu.address.model.workout.Exercise;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import seedu.address.model.workout.Sets;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import seedu.address.model.workout.Reps;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import seedu.address.model.workout.Workout;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import seedu.address.model.workout.Time;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yongjia96"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yongjia96"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "public class RecordCommandParser implements Parser\u003cRecordCommand\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public RecordCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_EXERCISE, PREFIX_SETS, PREFIX_REPS, PREFIX_TIME);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_EXERCISE, PREFIX_SETS, PREFIX_REPS, PREFIX_TIME)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RecordCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        Exercise exercise \u003d ParserUtil.parseExercise(argMultimap.getValue(PREFIX_EXERCISE).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        Sets sets \u003d ParserUtil.parseSets(argMultimap.getValue(PREFIX_SETS).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        Reps reps \u003d ParserUtil.parseReps(argMultimap.getValue(PREFIX_REPS).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        Time time \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_TIME).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        Workout workout \u003d new Workout(exercise, sets, reps, time);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        return new RecordCommand(workout);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yongjia96": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.InvalidationListenerManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.model.task.UniqueTaskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final InvalidationListenerManager invalidationListenerManager \u003d new InvalidationListenerManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.removeListener(listener);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Notifies listeners that the address book has been modified."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void indicateModified() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.callListeners(this);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 persons.equals(((AddressBook) other).persons));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 144,
      "jayrometan": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ExpenditureList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import seedu.address.commons.util.InvalidationListenerManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import seedu.address.model.purchase.Purchase;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import seedu.address.model.purchase.PurchaseList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": " * Wraps all data at the expenditure list level"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "public class ExpenditureList implements ReadOnlyExpenditureList {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    private final PurchaseList purchases;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    private final InvalidationListenerManager invalidationListenerManager \u003d new InvalidationListenerManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "         {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "           purchases \u003d new PurchaseList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "      }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public ExpenditureList() {}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * Creates an ExpenditureList using the Purchases in the {@code toBeCopied}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public ExpenditureList(ReadOnlyExpenditureList toBeCopied) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * Replaces the contents of the purchase list with {@code purchases}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public void setPurchases(List\u003cPurchase\u003e purchases) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        this.purchases.setPurchases(purchases);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * Resets the existing data of this {@code ExpenditureList} with {@code newData}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public void resetData(ReadOnlyExpenditureList newData) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        setPurchases(newData.getPurchaseList());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    //// purchase-level operations"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public void addPurchase(Purchase p) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        purchases.add(p);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "  /*      public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            indicateModified();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "*/"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * Removes {@code key} from this {@code ExpenditureList}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * {@code key} must exist in the expenditure list."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public void removePurchase(Purchase key) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        purchases.remove(key);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        invalidationListenerManager.removeListener(listener);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * Notifies listeners that the expenditure list has been modified."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    protected void indicateModified() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        invalidationListenerManager.callListeners(this);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        return purchases.asUnmodifiableObservableList().size() + \" purchases\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public ObservableList\u003cPurchase\u003e getPurchaseList() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        return purchases.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "                || (other instanceof ExpenditureList // instanceof handles nulls"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "                \u0026\u0026 purchases.equals(((ExpenditureList) other).purchases));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        return purchases.hashCode();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weizhonglauw": 141
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import seedu.address.model.purchase.Purchase;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import seedu.address.model.workout.Workout;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    ReadOnlyTaskList getTaskList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    Predicate\u003cTask\u003e PREDICATE_SHOW_ALL_TASKS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    void addTask(Task task);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    boolean hasTask(Task task);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    void deleteTask(Task task);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    void commitTaskList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "     void updateFilteredTaskList(Predicate\u003cTask\u003e predicate);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has previous address book states to restore."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canUndoAddressBook();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has undone address book states to restore."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canRedoAddressBook();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previous state."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    void undoAddressBook();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    void redoAddressBook();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current address book state for undo/redo."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    void commitAddressBook();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selected person in the filtered person list."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * null if no person is selected."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyProperty\u003cPerson\u003e selectedPersonProperty();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the selected person in the filtered person list."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * null if no person is selected."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    Person getSelectedPerson();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the selected person in the filtered person list."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    void setSelectedPerson(Person person);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public ReadOnlyProperty\u003cTask\u003e selectedTaskProperty();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    void setSelectedTask(Task task);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    void setTask(Task target, Task editedTask);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    Predicate\u003cPurchase\u003e PREDICATE_SHOW_ALL_PURCHASES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * Replaces expenditure list with the data in {@code expenditureList}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    void setExpenditureList(ReadOnlyExpenditureList expenditureList);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    /** Returns the ExpenditureList */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    ReadOnlyExpenditureList getExpenditureList();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * Adds the given purchase."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    void addPurchase(Purchase purchase);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    /** Returns an unmodifiable view of the filtered purchase list */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    ObservableList\u003cPurchase\u003e getFilteredPurchaseList();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * Updates the filter of the filtered purchase list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    void updateFilteredPurchaseList(Predicate\u003cPurchase\u003e predicate);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * Saves the current expenditure list state for undo/redo."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    void commitExpenditureList();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * Selected purchase in the filtered purchase list."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * null if no purchase is selected."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    ReadOnlyProperty\u003cPurchase\u003e selectedPurchaseProperty();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * Returns the selected purchase in the filtered purchase list."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * null if no purchase is selected."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    Purchase getSelectedPurchase();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * Sets the selected purchase in the filtered purchase list."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    void setSelectedPurchase(Purchase purchase);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    void addWorkout(Workout workout);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    void commitWorkoutBook();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    void setSelectedWorkout(Workout workout);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    ReadOnlyProperty\u003cWorkout\u003e selectedWorkoutProperty();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    ObservableList\u003cWorkout\u003e getFilteredWorkoutList();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    ReadOnlyWorkoutBook getWorkoutList();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    void updateFilteredWorkoutList(Predicate\u003cWorkout\u003e predicate);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    void setWorkoutBook(ReadOnlyWorkoutBook workoutBook);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yongjia96": 22,
      "-": 130,
      "weizhonglauw": 52,
      "jayrometan": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import seedu.address.model.purchase.Purchase;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import seedu.address.model.purchase.exceptions.PurchaseNotFoundException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.model.task.exceptions.InvalidDateException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import seedu.address.model.workout.Workout;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import sun.java2d.pipe.SpanShapeRenderer;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private final VersionedAddressBook versionedAddressBook;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    private final VersionedExpenditureList versionedExpenditureList;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    private final VersionedWorkoutBook versionedWorkoutBook;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    private final FilteredList\u003cTask\u003e filteredTasks;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    private final FilteredList\u003cPurchase\u003e filteredPurchases;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    private final FilteredList\u003cWorkout\u003e filteredWorkout;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    private final VersionedTaskList versionedTaskList;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private final SimpleObjectProperty\u003cPerson\u003e selectedPerson \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    private final SimpleObjectProperty\u003cTask\u003e selectedTask \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    private final SimpleObjectProperty\u003cPurchase\u003e selectedPurchase \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    private final SimpleObjectProperty\u003cWorkout\u003e selectedWorkout \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs, ReadOnlyTaskList taskList,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "                        ReadOnlyExpenditureList expenditureList, ReadOnlyWorkoutBook workoutBook) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs, taskList, expenditureList, workoutBook);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        versionedTaskList \u003d new VersionedTaskList(taskList);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook \u003d new VersionedAddressBook(addressBook);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        versionedExpenditureList \u003d new VersionedExpenditureList(expenditureList);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        versionedWorkoutBook \u003d new VersionedWorkoutBook(workoutBook);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(versionedAddressBook.getPersonList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.addListener(this::ensureSelectedPersonIsValid);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        filteredTasks \u003d new FilteredList\u003c\u003e(versionedTaskList.getTaskList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        filteredWorkout \u003d new FilteredList\u003c\u003e(versionedWorkoutBook.getWorkoutList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        filteredPurchases \u003d new FilteredList\u003c\u003e(versionedExpenditureList.getPurchaseList());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        filteredPurchases.addListener(this::ensureSelectedPurchaseIsValid);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        this(new AddressBook(), new UserPrefs(), new TaskList(), new ExpenditureList(), new WorkoutBook());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public ReadOnlyTaskList getTaskList() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        return versionedTaskList;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.hasPerson(person);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.removePerson(target);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.addPerson(person);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "//\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dExpenditure List\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public void setExpenditureList(ReadOnlyExpenditureList expenditureList) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        versionedExpenditureList.resetData(expenditureList);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public ReadOnlyExpenditureList getExpenditureList() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        return versionedExpenditureList;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public void addPurchase(Purchase purchase) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        versionedExpenditureList.addPurchase(purchase);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "       // updateFilteredPurhaseList(PREDICATE_SHOW_ALL_PURCHASES);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public ObservableList\u003cPurchase\u003e getFilteredPurchaseList() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        return filteredPurchases;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public void updateFilteredPurchaseList(Predicate\u003cPurchase\u003e predicate) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        filteredPurchases.setPredicate(predicate);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Task List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList(){"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        return filteredTasks;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate){"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        filteredTasks.setPredicate(predicate);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        versionedTaskList.addTask(task);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        return versionedTaskList.hasTask(task);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        requireAllNonNull(target, editedTask);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        versionedTaskList.setTask(target, editedTask);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public void deleteTask(Task target) { versionedTaskList.removeTask(target);}"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public void commitExpenditureList(){"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        versionedExpenditureList.commit();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public ReadOnlyProperty\u003cPurchase\u003e selectedPurchaseProperty() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        return selectedPurchase;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public Purchase getSelectedPurchase() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        return selectedPurchase.getValue();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public void setSelectedPurchase(Purchase purchase) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        if (purchase !\u003d null \u0026\u0026 !filteredPurchases.contains(purchase)) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            throw new PurchaseNotFoundException();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        selectedPurchase.setValue(purchase);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canUndo();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canRedo();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undoAddressBook() {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redoAddressBook() {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commitAddressBook() {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public void commitTaskList() {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        versionedTaskList.commit();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Selected person \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyProperty\u003cPerson\u003e selectedPersonProperty() {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "        return selectedPerson;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public ReadOnlyProperty\u003cTask\u003e selectedTaskProperty() {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        return selectedTask;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person getSelectedPerson() {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "        return selectedPerson.getValue();"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setSelectedPerson(Person person) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "        if (person !\u003d null \u0026\u0026 !filteredPersons.contains(person)) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "        selectedPerson.setValue(person);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public void setSelectedTask(Task task) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        selectedTask.setValue(task);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "     * Ensures {@code selectedPerson} is a valid person in {@code filteredPersons}."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    private void ensureSelectedPersonIsValid(ListChangeListener.Change\u003c? extends Person\u003e change) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "        while (change.next()) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "            if (selectedPerson.getValue() \u003d\u003d null) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "                // null is always a valid selected person, so we do not need to check that it is valid anymore."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "            boolean wasSelectedPersonReplaced \u003d change.wasReplaced() \u0026\u0026 change.getAddedSize() \u003d\u003d change.getRemovedSize()"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 change.getRemoved().contains(selectedPerson.getValue());"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "            if (wasSelectedPersonReplaced) {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "                // Update selectedPerson to its new value."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "                int index \u003d change.getRemoved().indexOf(selectedPerson.getValue());"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "                selectedPerson.setValue(change.getAddedSubList().get(index));"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "            boolean wasSelectedPersonRemoved \u003d change.getRemoved().stream()"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "                    .anyMatch(removedPerson -\u003e selectedPerson.getValue().isSamePerson(removedPerson));"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "            if (wasSelectedPersonRemoved) {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "                // Select the person that came before it in the list,"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "                // or clear the selection if there is no such person."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "                selectedPerson.setValue(change.getFrom() \u003e 0 ? change.getList().get(change.getFrom() - 1) : null);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * Ensures {@code selectedPurchase} is a valid purchase in {@code filteredPurchases}."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    private void ensureSelectedPurchaseIsValid(ListChangeListener.Change\u003c? extends Purchase\u003e change) {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        while (change.next()) {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            if (selectedPurchase.getValue() \u003d\u003d null) {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "                // null is always a valid selected purchase, so we do not need to check that it is valid anymore."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            boolean wasSelectedPurchaseReplaced \u003d change.wasReplaced() \u0026\u0026 change.getAddedSize() \u003d\u003d change.getRemovedSize()"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "                    \u0026\u0026 change.getRemoved().contains(selectedPurchase.getValue());"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            if (wasSelectedPurchaseReplaced) {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "                // Update selectedPurchase to its new value."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "                int index \u003d change.getRemoved().indexOf(selectedPurchase.getValue());"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "                selectedPurchase.setValue(change.getAddedSubList().get(index));"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            boolean wasSelectedPurchaseRemoved \u003d change.getRemoved().stream()"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "                    .anyMatch(removedPurchase -\u003e selectedPurchase.getValue().isSamePurchase(removedPurchase));"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            if (wasSelectedPurchaseRemoved) {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "                // Select the purchase that came before it in the list,"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "                // or clear the selection if there is no such purchase."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "                selectedPurchase.setValue(change.getFrom() \u003e 0 ? change.getList().get(change.getFrom() - 1) : null);"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dWorkout Book\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public void setWorkoutBook(ReadOnlyWorkoutBook workoutBook) {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        versionedWorkoutBook.resetData(workoutBook);"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public ReadOnlyWorkoutBook getWorkoutList() {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        return versionedWorkoutBook;"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public void addWorkout(Workout workout) {"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        versionedWorkoutBook.addWorkout(workout);"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        // updateFilteredPurhaseList(PREDICATE_SHOW_ALL_PURCHASES);"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public ObservableList\u003cWorkout\u003e getFilteredWorkoutList() {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        return filteredWorkout;"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public void updateFilteredWorkoutList(Predicate\u003cWorkout\u003e predicate) {"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        filteredWorkout.setPredicate(predicate);"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public void commitWorkoutBook() {"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        versionedWorkoutBook.commit();"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public void setSelectedWorkout(Workout workout){"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        selectedWorkout.setValue(workout);"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public ReadOnlyProperty\u003cWorkout\u003e selectedWorkoutProperty() {"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        return selectedWorkout;"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.equals(other.versionedAddressBook)"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons)"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(selectedPerson.get(), other.selectedPerson.get());"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "//    \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public static boolean isValidTime(String string){"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        DateFormat format \u003d new SimpleDateFormat(\"HHmm\");"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        format.setLenient(false);"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            format.parse(string);"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        } catch (ParseException e){"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public static boolean isValidDate(String date) {"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        DateFormat format \u003d new SimpleDateFormat(\"ddMMyy\");"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        format.setLenient(false);"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            format.parse(date);"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yongjia96": 55,
      "-": 231,
      "weizhonglauw": 94,
      "jayrometan": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyExpenditureList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import javafx.beans.Observable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import seedu.address.model.purchase.Purchase;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": " * Unmodifiable view of the expenditure list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "public interface ReadOnlyExpenditureList extends Observable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * Returns an unmodifiable view of the purchase list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    ObservableList\u003cPurchase\u003e getPurchaseList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weizhonglauw": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyTaskList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import javafx.beans.Observable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "public interface ReadOnlyTaskList extends Observable {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    ObservableList\u003cTask\u003e getTaskList();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jayrometan": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    Path getTaskListFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    Path getExpenditureListFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    Path getWorkoutBookFilePath();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yongjia96": 2,
      "-": 16,
      "weizhonglauw": 1,
      "jayrometan": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyWorkoutBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import javafx.beans.Observable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import seedu.address.model.workout.Workout;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yongjia96"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yongjia96"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "public interface ReadOnlyWorkoutBook extends Observable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    ObservableList\u003cWorkout\u003e getWorkoutList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yongjia96": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/model/TaskList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.commons.util.InvalidationListenerManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.model.task.UniqueTaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "public class TaskList implements seedu.address.model.ReadOnlyTaskList {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    private final UniqueTaskList tasks;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    private final InvalidationListenerManager invalidationListenerManager \u003d new InvalidationListenerManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    protected void indicateModified() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "      //  invalidationListenerManager.callListeners(this);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public TaskList(){}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        invalidationListenerManager.removeListener(listener);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public TaskList(ReadOnlyTaskList toBeCopied) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public void resetData(ReadOnlyTaskList newData){"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        setTasks(newData.getTaskList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public void setTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        this.tasks.setTasks(tasks);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public void setTask(Task target, Task editedTask){"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        requireNonNull(editedTask);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        tasks.setTask(target, editedTask);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public void addTask(Task task){"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        return tasks.contains(task);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public void removeTask(Task task){"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        tasks.remove(task);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public boolean equals(Object other){"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        return other \u003d\u003d this || (other instanceof TaskList)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                \u0026\u0026 tasks.equals((((TaskList) other).tasks));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        return tasks.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public ObservableList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        return tasks.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        tasks  \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public int hashCode() { return tasks.hashCode(); }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jayrometan": 100
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    private Path taskListFilePath \u003d Paths.get(\"data\", \"tasklist.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    private Path expenditureListFilePath \u003d Paths.get(\"data\" , \"expenditurelist.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    private Path workoutBookFilePath \u003d Paths.get(\"data\" , \"workoutbook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        setTaskListFilePath(newUserPrefs.getTaskListFilePath());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        setExpenditureListFilePath(newUserPrefs.getExpenditureListFilePath());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        setWorkoutBookFilePath(newUserPrefs.getWorkoutBookFilePath());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public Path getTaskListFilePath(){"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        return taskListFilePath;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public void setTaskListFilePath(Path taskListFilePath){"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        requireNonNull(taskListFilePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        this.taskListFilePath \u003d taskListFilePath;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public Path getExpenditureListFilePath() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        return expenditureListFilePath;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public void setExpenditureListFilePath(Path expenditureListFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        requireNonNull(expenditureListFilePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        this.expenditureListFilePath \u003d expenditureListFilePath;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public Path getWorkoutBookFilePath() { return workoutBookFilePath;}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public void setWorkoutBookFilePath (Path workoutBookFilePath) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        requireNonNull(workoutBookFilePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        this.workoutBookFilePath \u003d workoutBookFilePath;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yongjia96": 8,
      "-": 87,
      "weizhonglauw": 12,
      "jayrometan": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/VersionedExpenditureList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": " * {@code ExpenditureList} that keeps track of its own history."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "public class VersionedExpenditureList extends ExpenditureList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    private final List\u003cReadOnlyExpenditureList\u003e expenditureListStateList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public VersionedExpenditureList(ReadOnlyExpenditureList initialState) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        expenditureListStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        expenditureListStateList.add(new ExpenditureList(initialState));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * Saves a copy of the current {@code ExpenditureList} state at the end of the state list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * Undone states are removed from the state list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        expenditureListStateList.add(new ExpenditureList(this));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        expenditureListStateList.subList(currentStatePointer + 1, expenditureListStateList.size()).clear();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * Restores the expenditure list to its previous state."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        resetData(expenditureListStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * Restores the expenditure list to its previously undone state."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        resetData(expenditureListStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * Returns true if {@code undo()} has expenditure list states to undo."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * Returns true if {@code redo()} has expenditure list states to redo."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        return currentStatePointer \u003c expenditureListStateList.size() - 1;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        if (!(other instanceof VersionedExpenditureList)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        VersionedExpenditureList otherVersionedExpenditureList \u003d (VersionedExpenditureList) other;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        return super.equals(otherVersionedExpenditureList)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "                \u0026\u0026 expenditureListStateList.equals(otherVersionedExpenditureList.expenditureListStateList)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "                \u0026\u0026 currentStatePointer \u003d\u003d otherVersionedExpenditureList.currentStatePointer;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * Thrown when trying to {@code undo()} but can\u0027t."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public static class NoUndoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        private NoUndoableStateException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            super(\"Current state pointer at start of expenditureListState list, unable to undo.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * Thrown when trying to {@code redo()} but can\u0027t."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public static class NoRedoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        private NoRedoableStateException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            super(\"Current state pointer at end of expenditureListState list, unable to redo.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weizhonglauw": 109
    }
  },
  {
    "path": "src/main/java/seedu/address/model/VersionedTaskList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "public class VersionedTaskList extends TaskList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    private final List\u003cReadOnlyTaskList\u003e taskListStateList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public VersionedTaskList(ReadOnlyTaskList initialState){"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        taskListStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        taskListStateList.add(new TaskList(initialState));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "     * Saves a copy of the current {@code AddressBook} state at the end of the state list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "     * Undone states are removed from the state list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        taskListStateList.add(new TaskList(this));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public void resetData(ReadOnlyTaskList newData) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        setTasks(newData.getTaskList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        taskListStateList.subList(currentStatePointer + 1, taskListStateList.size()).clear();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jayrometan": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/model/VersionedWorkoutBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "public class VersionedWorkoutBook extends WorkoutBook {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    private final List\u003cReadOnlyWorkoutBook\u003e workoutBookStateList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public VersionedWorkoutBook(ReadOnlyWorkoutBook initialState){"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        workoutBookStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "       workoutBookStateList.add(new WorkoutBook(initialState));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     * Saves a copy of the current {@code AddressBook} state at the end of the state list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     * Undone states are removed from the state list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        workoutBookStateList.add(new WorkoutBook(this));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public void resetData(ReadOnlyWorkoutBook newData) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        setWorkouts(newData.getWorkoutList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        workoutBookStateList.subList(currentStatePointer + 1, workoutBookStateList.size()).clear();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yongjia96": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/model/WorkoutBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import seedu.address.commons.util.InvalidationListenerManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import seedu.address.model.task.UniqueTaskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import seedu.address.model.workout.Workout;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import seedu.address.model.workout.WorkoutList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yongjia96"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yongjia96"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yongjia96"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "public class WorkoutBook implements ReadOnlyWorkoutBook {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    private final WorkoutList workouts;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    private final InvalidationListenerManager invalidationListenerManager \u003d new InvalidationListenerManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        workouts \u003d new WorkoutList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public WorkoutBook() {}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public WorkoutBook(ReadOnlyWorkoutBook toBeCopied) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public void setWorkouts(List\u003cWorkout\u003e workouts) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        this.workouts.setWorkout(workouts);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public void resetData(ReadOnlyWorkoutBook newData){"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "            requireNonNull(newData);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "            setWorkouts(newData.getWorkoutList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "   // public boolean hasWorkout(Workout workout) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     //   requireNonNull(workout);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "       // return workouts.contains(workout);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public void addWorkout(Workout w) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        workouts.add(w);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    //public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "       // requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        //persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        //indicateModified();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "   // }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    //public void removeWorkout(Person key) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "      //  persons.remove(key);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        //indicateModified();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        invalidationListenerManager.removeListener(listener);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     * Notifies listeners that the address book has been modified."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    protected void indicateModified() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        invalidationListenerManager.callListeners(this);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        return workouts.asUnmodifiableObservableList().size() + \" workouts\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public ObservableList\u003cWorkout\u003e getWorkoutList() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        return workouts.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    //@Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    //public boolean equals(Object other) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "      //  return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        //        || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "          //      \u0026\u0026 persons.equals(((AddressBook) other).persons));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        return workouts.hashCode();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yongjia96": 154
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/NameContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 31,
      "jayrometan": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/purchase/Price.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "package seedu.address.model.purchase;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": " * Represents a Purchase\u0027s price in the expenditure list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPrice(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "public class Price {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            \"Price should contain numbers for dollars, followed by one decimal point then followed by two numbers for cents.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d+\\\\.\\\\d{2}\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * Constructs a {@code Price}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * @param price A valid price."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public Price(String price) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        requireNonNull(price);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        checkArgument(isValidPrice(price), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        value \u003d price;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * Returns true if a given string is a valid price."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public static boolean isValidPrice(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "                || (other instanceof Price // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "                \u0026\u0026 value.equals(((Price) other).value)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weizhonglauw": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/purchase/Purchase.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "package seedu.address.model.purchase;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": " * Represents a Purchase in the expenditure list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "public class Purchase {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    private final PurchaseName name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    private final Price price;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public Purchase(PurchaseName name, Price price, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        requireAllNonNull(name, price, tags);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public PurchaseName getPurchaseName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public Price getPrice() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        return price;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public boolean isSamePurchase(Purchase otherPurchase) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        if (otherPurchase \u003d\u003d this) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        return otherPurchase !\u003d null"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "                \u0026\u0026 otherPurchase.getPurchaseName().equals(getPurchaseName())"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "                \u0026\u0026 (otherPurchase.getPrice().equals(getPrice()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * Returns true if both purchases have the same identity and data fields."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * This defines a stronger notion of equality between two purchases."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": " /*   @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        if (!(other instanceof Purchase)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        Purchase otherPurchase \u003d (Purchase) other;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        return otherPurchase.getPurchaseName().equals(getPurchaseName())"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "                \u0026\u0026 otherPurchase.getPrice().equals(getPrice())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "                \u0026\u0026 otherPurchase.getTags().equals(getTags());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "*/"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        return Objects.hash(name, price, tags);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        builder.append(getPurchaseName())"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "                .append(\" Price: $\")"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "                .append(getPrice())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weizhonglauw": 99
    }
  },
  {
    "path": "src/main/java/seedu/address/model/purchase/PurchaseList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "package seedu.address.model.purchase;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import seedu.address.model.purchase.exceptions.PurchaseNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": " * A list of purchases that does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "public class PurchaseList implements Iterable\u003cPurchase\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    private final ObservableList\u003cPurchase\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    private final ObservableList\u003cPurchase\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * Returns true if the list contains an equivalent purchase as the given argument."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public boolean contains(Purchase toCheck) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePurchase);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * Adds a purchase to the list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public void add(Purchase toAdd) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * Replaces the purchase {@code target} in the list with {@code editedPurchase}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public void setPurchase(Purchase target, Purchase editedPurchase) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        requireAllNonNull(target, editedPurchase);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            throw new PurchaseNotFoundException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        internalList.set(index, editedPurchase);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * Removes the equivalent purchase from the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * The purchase must exist in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public void remove(Purchase toRemove) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            throw new PurchaseNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public void setPurchases(PurchaseList replacement) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * Replaces the contents of this list with {@code purchases}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * {@code purchases} must not contain duplicate purchases."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public void setPurchases(List\u003cPurchase\u003e purchases) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        requireAllNonNull(purchases);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        internalList.setAll(purchases);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public ObservableList\u003cPurchase\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public Iterator\u003cPurchase\u003e iterator() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "                || (other instanceof PurchaseList // instanceof handles nulls"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "                \u0026\u0026 internalList.equals(((PurchaseList) other).internalList));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weizhonglauw": 102
    }
  },
  {
    "path": "src/main/java/seedu/address/model/purchase/PurchaseName.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "package seedu.address.model.purchase;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": " * Represents a Purchase\u0027s name in the expenditure list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "public class PurchaseName {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public PurchaseName(String name) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "                || (other instanceof PurchaseName // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "                \u0026\u0026 fullName.equals(((PurchaseName) other).fullName)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weizhonglauw": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/purchase/exceptions/PurchaseNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "package seedu.address.model.purchase.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "public class PurchaseNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "weizhonglauw": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/DeadlineDate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import static seedu.address.model.ModelManager.isValidDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "public class DeadlineDate {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d  \"Deadline Date should only contain 6 integers in the ddMMyy format\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{6}\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "     * Constructs a {@code DeadlineDate}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "     * @param deadlineDate a valid date"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public DeadlineDate(String deadlineDate) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        requireNonNull(deadlineDate);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        checkArgument(isValidDeadlineDate(deadlineDate), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        value \u003d deadlineDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "     * @param deadlineDate a valid deadlineDate"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "     * @return Returns true if a given string is a valid time"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public static boolean isValidDeadlineDate(String deadlineDate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        return deadlineDate.matches(VALIDATION_REGEX) \u0026\u0026 isValidDate(deadlineDate);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                || (other instanceof DeadlineDate // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                \u0026\u0026 value.equals(((DeadlineDate) other).value)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jayrometan": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/DeadlineTime.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import static seedu.address.model.ModelManager.isValidTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "public class DeadlineTime {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d  \"Deadline Time should contain 4 Integers and be in the 24HRS format\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    /* The input time should contain exactly 4 digits */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{4}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "     * Constructs an {@code DeadlineTime}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "     * @param deadlineTime a valid deadlineTime"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public DeadlineTime(String deadlineTime) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        requireNonNull(deadlineTime);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        checkArgument(isValidDeadlineTime(deadlineTime), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        value \u003d deadlineTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "     * Returns true if a given string is a valid time"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public static boolean isValidDeadlineTime(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        return test.matches(VALIDATION_REGEX) \u0026\u0026 isValidTime(test);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                || (other instanceof DeadlineTime // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                \u0026\u0026 value.equals(((DeadlineTime) other).value)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jayrometan": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Task.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    private final DeadlineDate deadlineDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    private final DeadlineTime deadlineTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    private final TaskName taskName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public Task (TaskName taskName, DeadlineTime deadlineTime, DeadlineDate deadlineDate"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    , Set\u003cTag\u003e tags){"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        requireAllNonNull(taskName, deadlineTime, deadlineDate);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        this.deadlineDate \u003d deadlineDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        this.deadlineTime \u003d deadlineTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        this.taskName  \u003d taskName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public TaskName getTaskName() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        return taskName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public DeadlineDate getDeadlineDate() { return deadlineDate;}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public DeadlineTime getDeadlineTime() { return deadlineTime;}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public boolean isSameTask(Task otherTask) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        if (otherTask \u003d\u003d this) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        return otherTask!\u003d null"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                \u0026\u0026 otherTask.getTaskName().equals(getTaskName());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "//                || (otherTask.getDeadlineDate().equals(getDeadlineDate()) || otherTask.getDeadlineTime().equals(getDeadlineTime()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        if (!(other instanceof Task)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        Task otherTask \u003d (Task) other;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        return otherTask.getTaskName().equals(getTaskName())"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                \u0026\u0026 otherTask.getDeadlineTime().equals(getDeadlineTime())"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                \u0026\u0026 otherTask.getDeadlineDate().equals(getDeadlineDate())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                \u0026\u0026 otherTask.getTags().equals(getTags());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        return Objects.hash(taskName, deadlineDate, deadlineTime, tags);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        builder.append(getTaskName())"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                .append(\" DeadlineDate: \")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                .append(getDeadlineDate())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                .append(\" DeadlineTime: \")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                .append(getDeadlineTime());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jayrometan": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/TaskName.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jayrometan"
        },
        "content": " * Represents a Person\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jayrometan"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jayrometan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "public class TaskName {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "     * Constructs a {@code TaskName}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public TaskName(String name) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                || (other instanceof TaskName // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                \u0026\u0026 fullName.equals(((TaskName) other).fullName)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jayrometan": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/UniqueTaskList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import static jdk.nashorn.internal.runtime.regexp.joni.Config.log;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.model.task.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import sun.rmi.runtime.Log;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "public class UniqueTaskList implements Iterable\u003cTask\u003e{"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    private final ObservableList\u003cTask\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    private final ObservableList\u003cTask\u003e internalUnmodifiableList \u003d FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public boolean contains(Task toCheck) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameTask);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public void add(Task toAdd) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "//        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "//            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        logger.log(Level.FINE, \"PROCESSINGT THROUGH UNIQUE TASK LIST\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public ObservableList\u003cTask\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public Iterator\u003cTask\u003e iterator() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        requireAllNonNull(target, editedTask);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            Logger.getLogger(\"task not found\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        if (!editedTask.isSameTask(editedTask) \u0026\u0026"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        contains(editedTask)){"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            Logger.getLogger(\"Duplicate task\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        internalList.set(index, editedTask);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public void setTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        requireAllNonNull(tasks);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        if (!tasksAreUnique(tasks)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "//            logger.info(\"FUCKING DUPLICATE BITCH\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        internalList.setAll(tasks);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public void setTasks(UniqueTaskList replacement){"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public void remove(Task toRemove){"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        if (!internalList.remove(toRemove)){"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                || (other instanceof UniqueTaskList // instanceof handles nulls"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueTaskList) other).internalList));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    private boolean tasksAreUnique(List\u003cTask\u003e tasks){"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        for (int i\u003d0;i\u003ctasks.size()-1;i++){"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            for (int j\u003di+1;j\u003ctasks.size();j++){"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                if (tasks.get(i).isSameTask(tasks.get(j))){"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jayrometan": 115
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/exceptions/DuplicateTaskException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "package seedu.address.model.task.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "public class DuplicateTaskException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public DuplicateTaskException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        super(\"Operation would result in duplicate tasks\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jayrometan": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/exceptions/InvalidDateException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "package seedu.address.model.task.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "public class InvalidDateException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public InvalidDateException() { super(\"Date is either invalid or not in the ddMMyy format.\");}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jayrometan": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/exceptions/TaskNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "package seedu.address.model.task.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "public class TaskNotFoundException extends RuntimeException{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jayrometan": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.model.ReadOnlyTaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import seedu.address.model.ReadOnlyWorkoutBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.model.TaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import seedu.address.model.ExpenditureList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import seedu.address.model.ReadOnlyExpenditureList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import seedu.address.model.purchase.Purchase;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import seedu.address.model.purchase.PurchaseName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import seedu.address.model.purchase.Price;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import seedu.address.model.WorkoutBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import seedu.address.model.ReadOnlyWorkoutBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            new Person(new Name(\"Alexis Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"family\")),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "   /* public static Purchase[] getSamplePurchases() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        return new Purchase[]{"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "                new Purchase(new PurchaseName(\"Chicken rice\"), new Price(\"3.50\"),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "                        getTagSet(\"very nice\"))"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        };"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    } */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public static ReadOnlyTaskList getSampleTaskList() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        //TODO"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "  /*  public static ReadOnlyExpenditureList getSampleExpenditureList() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        ExpenditureList sampleExplist \u003d new ExpenditureList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        for (Purchase samplePurchase : getSamplePurchases()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            sampleExplist.addPurchase(samplePurchase);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        return sampleExplist;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public static ReadOnlyExpenditureList getSampleExpenditureList() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        ExpenditureList expenditureList \u003d new ExpenditureList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        //TODO"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        return expenditureList;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public static ReadOnlyWorkoutBook getSampleWorkoutBook() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        WorkoutBook workoutBook \u003d new WorkoutBook();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        //TODO"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        return workoutBook;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yongjia96": 8,
      "-": 59,
      "weizhonglauw": 27,
      "jayrometan": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/workout/Exercise.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "package seedu.address.model.workout;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "public class Exercise {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "            \"Exercise should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public final String exerciseName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public Exercise(String exercise) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        requireNonNull(exercise);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        checkArgument(isValidExercise(exercise), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        exerciseName \u003d exercise;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public static boolean isValidExercise(String test) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        return exerciseName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yongjia96": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/model/workout/Reps.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "package seedu.address.model.workout;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "public class Reps {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "            \"Reps should only contain numbers\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public Reps(String reps) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        requireNonNull(reps);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        checkArgument(isValidReps(reps), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        value \u003d reps;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public static boolean isValidReps(String test) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yongjia96": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/workout/Sets.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "package seedu.address.model.workout;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "public class Sets {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "            \"Sets should only contain numbers\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public Sets(String sets) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        requireNonNull(sets);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        checkArgument(isValidSets(sets), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        value \u003d sets;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public static boolean isValidSets(String test) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yongjia96": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/workout/Time.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "package seedu.address.model.workout;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "public class Time {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "            \"Time should only contain numbers, in minutes\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public Time(String time) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        checkArgument(isValidTime(time), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        value \u003d time;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public static boolean isValidTime(String test) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yongjia96": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/workout/Workout.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "package seedu.address.model.workout;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "public class Workout {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    private final Exercise exercise;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    private final Sets sets;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    private final Reps reps;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    private final Time time;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public Workout (Exercise exercise, Sets sets, Reps reps, Time time) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        requireAllNonNull(exercise, sets, reps, time);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        this.exercise \u003d exercise;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        this.sets \u003d sets;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        this.reps \u003d reps;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public Exercise getExercise() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        return exercise;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public Sets getSets() { return sets; }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public Reps getReps() {return reps; }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public Time getTime() {return time;}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        builder.append(\"Exercise: \")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "                .append(getExercise())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "                .append(\"Sets: \")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "                .append(getSets())"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "                .append(\"Reps: \")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "                .append(getReps())"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "                .append(\"Duration: \")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "                .append(getTime());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yongjia96": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/workout/WorkoutList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "package seedu.address.model.workout;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "public class WorkoutList implements Iterable\u003cWorkout\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    private final ObservableList\u003cWorkout\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    private final ObservableList\u003cWorkout\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "   // public boolean contains(Workout toCheck) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     //   requireNonNull(toCheck);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "       // return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public void add(Workout toAdd) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "       // if (contains(toAdd)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "         //   throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        //}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "  //  public void setWorkout(Workout target, Workout editedPerson) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    //    requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "      //  int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        //if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "          //  throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        //}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "       // if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "         //   throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        //}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        //internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    //public void remove(Person toRemove) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "      //  requireNonNull(toRemove);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        //if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "          //  throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        //}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "   // public void setPersons(UniquePersonList replacement) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     //   requireNonNull(replacement);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "       // internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public void setWorkout(List\u003cWorkout\u003e workouts) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        requireAllNonNull(workouts);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        //if (!personsAreUnique(persons)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "          //  throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        //}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        internalList.setAll(workouts);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public ObservableList\u003cWorkout\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public Iterator\u003cWorkout\u003e iterator() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "  //  @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "   // public boolean equals(Object other) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     //   return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "       //         || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "         //       \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    //private boolean personsAreUnique(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "      //  for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        //    for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "          //      if (persons.get(i).isSamePerson(persons.get(j))) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "            //        return false;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "              //  }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "            //}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        //}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "       // return true;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yongjia96": 126
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/ExpenditureListStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import seedu.address.model.ReadOnlyExpenditureList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": " * Represents a storage for {@link seedu.address.model.ExpenditureList}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "public interface ExpenditureListStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    Path getExpenditureListFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * Returns ExpenditureList data as a {@link ReadOnlyExpenditureList}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    Optional\u003cReadOnlyExpenditureList\u003e readExpenditureList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * @see #getExpenditureListFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    Optional\u003cReadOnlyExpenditureList\u003e readExpenditureList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * Saves the given {@link ReadOnlyExpenditureList} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * @param expenditureList cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    void saveExpenditureList(ReadOnlyExpenditureList expenditureList) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * @see #saveExpenditureList(ReadOnlyExpenditureList)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    void saveExpenditureList(ReadOnlyExpenditureList expenditureList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weizhonglauw": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPurchase.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import seedu.address.model.purchase.PurchaseName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import seedu.address.model.purchase.Purchase;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import seedu.address.model.purchase.Price;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": " * Jackson-friendly version of {@link Purchase}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "public class JsonAdaptedPurchase {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Purchase\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    private final String price;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * Constructs a {@code JsonAdaptedPurchase} with the given purchase details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public JsonAdaptedPurchase(@JsonProperty(\"name\") String name, @JsonProperty(\"price\") String price,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "                             @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * Converts a given {@code Purchase} into this class for Jackson use."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public JsonAdaptedPurchase(Purchase source) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        name \u003d source.getPurchaseName().fullName;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        price \u003d source.getPrice().value;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * Converts this Jackson-friendly adapted purchase object into the model\u0027s {@code Purchase} object."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted purchase."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public Purchase toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        final List\u003cTag\u003e purchaseTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            purchaseTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, PurchaseName.class.getSimpleName()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        if (!PurchaseName.isValidName(name)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            throw new IllegalValueException(PurchaseName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        final PurchaseName modelName \u003d new PurchaseName(name);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        if (price \u003d\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Price.class.getSimpleName()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        if (!Price.isValidPrice(price)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            throw new IllegalValueException(Price.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        final Price modelPrice \u003d new Price(price);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(purchaseTags);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        return new Purchase(modelName, modelPrice, modelTags);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weizhonglauw": 88
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedTask.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.model.person.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.model.task.DeadlineDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.model.task.DeadlineTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.model.task.TaskName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "public class JsonAdaptedTask {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Task\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    private final String taskName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    private final String deadlineDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    private final String deadlineTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public JsonAdaptedTask(@JsonProperty(\"taskName\") String taskName, @JsonProperty(\"deadlineDate\") String deadlineDate,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                             @JsonProperty(\"deadlineTime\") String deadlineTime,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                             @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        this.deadlineDate \u003d deadlineDate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        this.deadlineTime \u003d deadlineTime;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public JsonAdaptedTask(Task source) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        taskName \u003d source.getTaskName().fullName;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        deadlineTime \u003d source.getDeadlineTime().value;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        deadlineDate \u003d source.getDeadlineDate().value;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public Task toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        final List\u003cTag\u003e taskTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            taskTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        if (taskName \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        if (!TaskName.isValidName(taskName)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        final TaskName modelTaskName \u003d new TaskName(taskName);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        if (deadlineDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "//        if (!DeadlineDate.(deadlineDate)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "//            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        final DeadlineDate modelDeadlineDate \u003d new DeadlineDate(deadlineDate);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        if (deadlineTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "//        if (!Email.isValidEmail(deadlineTime)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "//            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        final DeadlineTime modelDeadlineTime  \u003d new DeadlineTime(deadlineTime);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(taskTags);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        return new Task(modelTaskName,modelDeadlineTime, modelDeadlineDate, modelTags);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jayrometan": 97
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedWorkout.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import seedu.address.model.workout.Exercise;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import seedu.address.model.workout.Reps;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import seedu.address.model.workout.Sets;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import seedu.address.model.workout.Time;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import seedu.address.model.workout.Workout;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "class JsonAdaptedWorkout {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Workout\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    private final String exercise;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    private final String sets;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    private final String reps;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    private final String time;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public JsonAdaptedWorkout(@JsonProperty(\"exercise\") String exercise, @JsonProperty(\"sets\") String sets,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "                              @JsonProperty(\"reps\") String reps, @JsonProperty(\"time\") String time) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        this.exercise \u003d exercise;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        this.sets \u003d sets;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        this.reps \u003d reps;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public JsonAdaptedWorkout(Workout source) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        exercise \u003d source.getExercise().exerciseName;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        sets \u003d source.getSets().value;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        reps \u003d source.getReps().value;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        time \u003d source.getTime().value;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public Workout toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        if (exercise \u003d\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        if (!Exercise.isValidExercise(exercise)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        final Exercise modelExercise \u003d new Exercise(exercise);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        if (sets \u003d\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        if (!Sets.isValidSets(sets)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        final Sets modelSets \u003d new Sets(sets);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        if (reps \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        if (!Reps.isValidReps(reps)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        final Reps modelReps \u003d new Reps(reps);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        if (time \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        if (!Time.isValidTime(time)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        final Time modelTime \u003d new Time(time);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        return new Workout(modelExercise, modelSets, modelReps, modelTime);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yongjia96": 100
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonExpenditureListStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import seedu.address.model.ReadOnlyExpenditureList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": " * A class to access ExpenditureList data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "public class JsonExpenditureListStorage implements ExpenditureListStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonExpenditureListStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public JsonExpenditureListStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public Path getExpenditureListFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public Optional\u003cReadOnlyExpenditureList\u003e readExpenditureList() throws DataConversionException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        return readExpenditureList(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * Similar to {@link #readExpenditureList()}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public Optional\u003cReadOnlyExpenditureList\u003e readExpenditureList(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        Optional\u003cJsonSerializableExpenditureList\u003e jsonExpenditureList \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "                filePath, JsonSerializableExpenditureList.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        if (!jsonExpenditureList.isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            return Optional.of(jsonExpenditureList.get().toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public void saveExpenditureList(ReadOnlyExpenditureList expenditureList) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        saveExpenditureList(expenditureList, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * Similar to {@link #saveExpenditureList(ReadOnlyExpenditureList)}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public void saveExpenditureList(ReadOnlyExpenditureList expenditureList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        requireNonNull(expenditureList);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableExpenditureList(expenditureList), filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weizhonglauw": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableExpenditureList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import seedu.address.model.ExpenditureList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import seedu.address.model.ReadOnlyExpenditureList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import seedu.address.model.purchase.Purchase;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": " * An Immutable ExpenditureList that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "@JsonRootName(value \u003d \"expenditurelist\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "public class JsonSerializableExpenditureList {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    private final List\u003cJsonAdaptedPurchase\u003e purchases \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * Constructs a {@code JsonSerializableExpenditureList} with the given purchases."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public JsonSerializableExpenditureList(@JsonProperty(\"purchases\") List\u003cJsonAdaptedPurchase\u003e purchases) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        this.purchases.addAll(purchases);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * Converts a given {@code ReadOnlyExpenditureList} into this class for Jackson use."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableExpenditureList}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public JsonSerializableExpenditureList(ReadOnlyExpenditureList source) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        purchases.addAll(source.getPurchaseList().stream().map(JsonAdaptedPurchase::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * Converts this expenditure list into the model\u0027s {@code ExpenditureList} object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public ExpenditureList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        ExpenditureList expenditureList \u003d new ExpenditureList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        for (JsonAdaptedPurchase jsonAdaptedPurchase : purchases) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            Purchase purchase\u003d jsonAdaptedPurchase.toModelType();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            expenditureList.addPurchase(purchase);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        return expenditureList;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weizhonglauw": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableTaskList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.model.ReadOnlyTaskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.model.TaskList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jayrometan"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jayrometan"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "@JsonRootName(value \u003d \"tasklist\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "class JsonSerializableTaskList {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    private final List\u003cJsonAdaptedTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given persons."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public JsonSerializableTaskList(@JsonProperty(\"tasks\") List\u003cJsonAdaptedTask\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                                                tasks) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        this.tasks.addAll(tasks);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public JsonSerializableTaskList(ReadOnlyTaskList source) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        tasks.addAll(source.getTaskList().stream().map(JsonAdaptedTask::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public TaskList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        for (JsonAdaptedTask jsonAdaptedTask : tasks) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            Task task \u003d jsonAdaptedTask.toModelType();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            if (taskList.hasTask(task)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            taskList.addTask(task);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jayrometan": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableWorkoutBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import seedu.address.model.WorkoutBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import seedu.address.model.ReadOnlyWorkoutBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import seedu.address.model.workout.Workout;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yongjia96"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yongjia96"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "@JsonRootName(value \u003d \"workoutbook\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "class JsonSerializableWorkoutBook {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    private final List\u003cJsonAdaptedWorkout\u003e workouts \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given persons."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public JsonSerializableWorkoutBook(@JsonProperty(\"workouts\") List\u003cJsonAdaptedWorkout\u003e workouts) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        this.workouts.addAll(workouts);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public JsonSerializableWorkoutBook(ReadOnlyWorkoutBook source) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        workouts.addAll(source.getWorkoutList().stream().map(JsonAdaptedWorkout::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public WorkoutBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        WorkoutBook workoutBook \u003d new WorkoutBook();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        for (JsonAdaptedWorkout jsonAdaptedWorkout : workouts) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "            Workout workout \u003d jsonAdaptedWorkout.toModelType();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "            // if (workoutBook.hasWorkout(workout)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "            //   throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "            //}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "            workoutBook.addWorkout(workout);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        return workoutBook;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yongjia96": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonTaskListStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import com.fasterxml.jackson.databind.JsonSerializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.model.ReadOnlyTaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "public class JsonTaskListStorage implements TaskListStorage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAddressBookStorage.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public JsonTaskListStorage(Path filePath) {this.filePath \u003d filePath; }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public Path getTaskListFilePath(){ return filePath; }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public Optional\u003cReadOnlyTaskList\u003e readTaskList() throws DataConversionException{"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        return readTaskList(filePath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public Optional\u003cReadOnlyTaskList\u003e readTaskList(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        Optional\u003cJsonSerializableTaskList\u003e jsonTaskList \u003d JsonUtil.readJsonFile(filePath, JsonSerializableTaskList.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        if (!jsonTaskList.isPresent()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            return Optional.of(jsonTaskList.get().toModelType());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public void saveTaskList(ReadOnlyTaskList taskList) throws IOException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        saveTaskList(taskList, filePath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "     * Similar to {@link #saveTaskList(ReadOnlyTaskList)}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public void saveTaskList(ReadOnlyTaskList taskList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        requireNonNull(taskList);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableTaskList(taskList), filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jayrometan": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonWorkoutBookStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import seedu.address.model.ReadOnlyWorkoutBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yongjia96"
        },
        "content": " * A class to access AddressBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yongjia96"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "public class JsonWorkoutBookStorage implements WorkoutBookStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonWorkoutBookStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public JsonWorkoutBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public Path getWorkoutBookFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public Optional\u003cReadOnlyWorkoutBook\u003e readWorkoutBook() throws DataConversionException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        return readWorkoutBook(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     * Similar to {@link #readWorkoutBook()}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public Optional\u003cReadOnlyWorkoutBook\u003e readWorkoutBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        Optional\u003cJsonSerializableWorkoutBook\u003e jsonWorkoutBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "                filePath, JsonSerializableWorkoutBook.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        if (!jsonWorkoutBook.isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "            return Optional.of(jsonWorkoutBook.get().toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public void saveWorkoutBook(ReadOnlyWorkoutBook workoutBook)throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        saveWorkoutBook(workoutBook, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     * Similar to {@link #saveWorkoutBook(ReadOnlyWorkoutBook)}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public void saveWorkoutBook(ReadOnlyWorkoutBook workoutBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        requireNonNull(workoutBook);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableWorkoutBook(workoutBook), filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yongjia96": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.model.ReadOnlyTaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import seedu.address.model.ReadOnlyExpenditureList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import seedu.address.model.ReadOnlyWorkoutBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "public interface Storage extends AddressBookStorage, UserPrefsStorage, TaskListStorage, WorkoutBookStorage, ExpenditureListStorage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    /* -----------------------Address Book ---------------------------------------------*/"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    /* -----------------------Task List ---------------------------------------------*/"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    Path getTaskListFilePath();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    Optional\u003cReadOnlyTaskList\u003e readTaskList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    void saveTaskList (ReadOnlyTaskList taskList) throws IOException;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    /* ----------------------Workout Book ----------------------------------------------*/"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    Path getWorkoutBookFilePath();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    Optional\u003cReadOnlyWorkoutBook\u003e readWorkoutBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    void saveWorkoutBook(ReadOnlyWorkoutBook workoutBook) throws IOException;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    /* -----------------------Expenditure List ---------------------------------------------*/"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    Path getExpenditureListFilePath();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    Optional\u003cReadOnlyExpenditureList\u003e readExpenditureList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    void saveExpenditureList(ReadOnlyExpenditureList expenditureList) throws IOException;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yongjia96": 12,
      "-": 32,
      "weizhonglauw": 13,
      "jayrometan": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.model.ReadOnlyTaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import seedu.address.model.ReadOnlyExpenditureList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import seedu.address.model.ReadOnlyWorkoutBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    private TaskListStorage taskListStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    private WorkoutBookStorage workoutBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    private ExpenditureListStorage expenditureListStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "                          TaskListStorage taskListStorage, ExpenditureListStorage expenditureListStorage, WorkoutBookStorage workoutBookStorage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        this.taskListStorage \u003d taskListStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        this.workoutBookStorage \u003d workoutBookStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        this.expenditureListStorage \u003d expenditureListStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dTask List methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public Path getTaskListFilePath(){ return taskListStorage.getTaskListFilePath(); }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public Optional\u003cReadOnlyTaskList\u003e readTaskList() throws DataConversionException, IOException{"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        return readTaskList(taskListStorage.getTaskListFilePath());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public Optional\u003cReadOnlyTaskList\u003e readTaskList(Path filePath) throws DataConversionException, IOException{"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        return taskListStorage.readTaskList(filePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public void saveTaskList(ReadOnlyTaskList taskList) throws IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        saveTaskList(taskList, taskListStorage.getTaskListFilePath());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public void saveTaskList(ReadOnlyTaskList taskList, Path filePath) throws IOException{"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        taskListStorage.saveTaskList(taskList, filePath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "// \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Expenditure List methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public Path getExpenditureListFilePath() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        return expenditureListStorage.getExpenditureListFilePath();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public Optional\u003cReadOnlyExpenditureList\u003e readExpenditureList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        return readExpenditureList(expenditureListStorage.getExpenditureListFilePath());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public Optional\u003cReadOnlyExpenditureList\u003e readExpenditureList(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        return expenditureListStorage.readExpenditureList(filePath);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public void saveExpenditureList(ReadOnlyExpenditureList expenditureList) throws IOException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        saveExpenditureList(expenditureList, expenditureListStorage.getExpenditureListFilePath());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public void saveExpenditureList(ReadOnlyExpenditureList expenditureList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        expenditureListStorage.saveExpenditureList(expenditureList, filePath);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dWorkoutBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public Path getWorkoutBookFilePath() { return workoutBookStorage.getWorkoutBookFilePath();}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public Optional\u003cReadOnlyWorkoutBook\u003e readWorkoutBook() throws DataConversionException, IOException{"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        return readWorkoutBook(workoutBookStorage.getWorkoutBookFilePath());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public Optional\u003cReadOnlyWorkoutBook\u003e readWorkoutBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        return workoutBookStorage.readWorkoutBook(filePath);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public void saveWorkoutBook(ReadOnlyWorkoutBook workoutList) throws IOException {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        saveWorkoutBook(workoutList, workoutBookStorage.getWorkoutBookFilePath());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    public void saveWorkoutBook(ReadOnlyWorkoutBook workoutList, Path filePath) throws IOException{"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "        workoutBookStorage.saveWorkoutBook(workoutList, filePath);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yongjia96": 29,
      "-": 76,
      "weizhonglauw": 30,
      "jayrometan": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/TaskListStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.model.ReadOnlyTaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "public interface TaskListStorage {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    Path getTaskListFilePath();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    Optional\u003cReadOnlyTaskList\u003e readTaskList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    Optional\u003cReadOnlyTaskList\u003e readTaskList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    void saveTaskList(ReadOnlyTaskList taskList) throws IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    void saveTaskList(ReadOnlyTaskList taskList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jayrometan": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/WorkoutBookStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "import seedu.address.model.ReadOnlyWorkoutBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yongjia96"
        },
        "content": " * Represents a storage for {@link seedu.address.model.WorkoutBook}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yongjia96"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "public interface WorkoutBookStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    Path getWorkoutBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     * Returns AddressBook data as a {@link ReadOnlyWorkoutBook}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    Optional\u003cReadOnlyWorkoutBook\u003e readWorkoutBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     * @see #getWorkoutBookFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    Optional\u003cReadOnlyWorkoutBook\u003e readWorkoutBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     * Saves the given {@link ReadOnlyWorkoutBook} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     * @param workoutBook cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    void saveWorkoutBook(ReadOnlyWorkoutBook workoutBook) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     * @see #saveWorkoutBook(ReadOnlyWorkoutBook)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "    void saveWorkoutBook(ReadOnlyWorkoutBook workoutBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yongjia96"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yongjia96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yongjia96": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BrowserPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * The Browser Panel of the App."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final URL DEFAULT_PAGE \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(MainApp.class.getResource(FXML_FILE_FOLDER + \"default.html\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SEARCH_PAGE_URL \u003d \"https://se-education.org/dummy-search-page/?name\u003d\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"BrowserPanel.fxml\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanel(ObservableValue\u003cPerson\u003e selectedPerson) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // To prevent triggering events for typing inside the loaded Web page."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().setOnKeyPressed(Event::consume);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // Load person page when selected person changes."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        selectedPerson.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                loadDefaultPage();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            loadPersonPage(newValue);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        loadDefaultPage();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadPersonPage(Person person) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        loadPage(SEARCH_PAGE_URL + person.getName().fullName);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void loadPage(String url) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e browser.getEngine().load(url));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads a default HTML file with a background that matches the general theme."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadDefaultPage() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        loadPage(DEFAULT_PAGE.toExternalForm());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 67,
      "weizhonglauw": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    private TaskListPanel taskListPanel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    private PurchaseListPanel purchaseListPanel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    private PersonListPanel personListPanel2;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane browserPlaceholder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    private StackPane taskListPanelPlaceholder;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    private StackPane purchaseListPanelPlaceholder;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel \u003d new BrowserPanel(logic.selectedPersonProperty());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPlaceholder.getChildren().add(browserPanel.getRoot());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList(), logic.selectedPersonProperty(),"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                logic::setSelectedPerson);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        taskListPanel \u003d new TaskListPanel(logic.getFilteredTaskList(), logic.selectedTaskProperty(),"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                logic::setSelectedTask);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        taskListPanelPlaceholder.getChildren().add(taskListPanel.getRoot());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        purchaseListPanel \u003d new PurchaseListPanel(logic.getFilteredPurchaseList(), logic.selectedPurchaseProperty(),"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "                logic::setSelectedPurchase);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        purchaseListPanelPlaceholder.getChildren().add(purchaseListPanel.getRoot());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath(), logic.getAddressBook());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand, logic.getHistory());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public TaskListPanel getTaskListPanel(){"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        return taskListPanel;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public PurchaseListPanel getPurchaseListPanel() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        return purchaseListPanel;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 201,
      "weizhonglauw": 12,
      "jayrometan": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PurchaseCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import seedu.address.model.purchase.Purchase;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": " * An UI component that displays information of a {@code Purchase}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "public class PurchaseCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    private static final String FXML \u003d \"PurchaseListCard.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public final Purchase purchase;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    private Label price;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public PurchaseCard(Purchase purchase, int displayedIndex) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        this.purchase \u003d purchase;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        name.setText(purchase.getPurchaseName().fullName);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        price.setText(\"$\" + purchase.getPrice().value);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        purchase.getTags().stream()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        if (!(other instanceof PurchaseCard)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        PurchaseCard card \u003d (PurchaseCard) other;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "                \u0026\u0026 purchase.equals(card.purchase);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weizhonglauw": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PurchaseListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import seedu.address.model.purchase.Purchase;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": " * Panel containing the list of purchases."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "public class PurchaseListPanel extends UiPart\u003cRegion\u003e{"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    private static final String FXML \u003d \"PurchaseListPanel.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PurchaseListPanel.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    private ListView\u003cPurchase\u003e purchaseListView;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public PurchaseListPanel(ObservableList\u003cPurchase\u003e purchaseList, ObservableValue\u003cPurchase\u003e selectedPurchase,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "                           Consumer\u003cPurchase\u003e onSelectedPurchaseChange) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        purchaseListView.setItems(purchaseList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        purchaseListView.setCellFactory(listView -\u003e new PurchaseListViewCell());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        purchaseListView.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            logger.fine(\"Selection in purchase list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            onSelectedPurchaseChange.accept(newValue);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        });"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        selectedPurchase.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            logger.fine(\"Selected purchase changed to: \" + newValue);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            // Don\u0027t modify selection if we are already selecting the selected purchase,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            // otherwise we would have an infinite loop."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            if (Objects.equals(purchaseListView.getSelectionModel().getSelectedItem(), newValue)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "                purchaseListView.getSelectionModel().clearSelection();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "                int index \u003d purchaseListView.getItems().indexOf(newValue);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "                purchaseListView.scrollTo(index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "                purchaseListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        });"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Purchase} using a {@code PurchaseCard}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    class PurchaseListViewCell extends ListCell\u003cPurchase\u003e {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        protected void updateItem(Purchase purchase, boolean empty) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            super.updateItem(purchase, empty);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            if (empty || purchase \u003d\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "                setGraphic(new PurchaseCard(purchase, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weizhonglauw": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TaskCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "public class TaskCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    private static final String FXML \u003d \"TaskListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public final Task task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    private HBox cardPane2;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    private Label time;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public TaskCard(Task task, int displayedIndex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "//        logger.info(\"TASK NAME IS \" + task.getDeadlineDate());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        name.setText(task.getTaskName().fullName);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        date.setText(task.getDeadlineDate().value);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        time.setText(task.getDeadlineTime().value + \"HRS\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        task.getTags().stream()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        if (!(other instanceof TaskCard)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        TaskCard card \u003d (TaskCard) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                \u0026\u0026 task.equals(card.task);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jayrometan": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TaskListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "public class TaskListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    private static final String FXML \u003d \"TaskListPanel.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TaskListPanel.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    @javafx.fxml.FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    private ListView\u003cTask\u003e taskListView;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public TaskListPanel(ObservableList\u003cTask\u003e taskList, ObservableValue\u003cTask\u003e selectedTask,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                           Consumer\u003cTask\u003e onSelectedTaskChange) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        taskListView.setItems(taskList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        taskListView.setCellFactory(listView -\u003e new TaskListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        taskListView.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            logger.fine(\"Selection in person list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            onSelectedTaskChange.accept(newValue);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        });"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        selectedTask.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            logger.fine(\"Selected person changed to: \" + newValue);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            // Don\u0027t modify selection if we are already selecting the selected person,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            // otherwise we would have an infinite loop."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            if (Objects.equals(taskListView.getSelectionModel().getSelectedItem(), newValue)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                taskListView.getSelectionModel().clearSelection();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                int index \u003d taskListView.getItems().indexOf(newValue);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                taskListView.scrollTo(index);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                taskListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        });"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    class TaskListViewCell extends ListCell\u003cTask\u003e {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        protected void updateItem(Task task, boolean empty) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            super.updateItem(task, empty);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            if (empty || task \u003d\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                setGraphic(new TaskCard(task, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jayrometan": 71
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "         title\u003d\"LIFE\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cVBox fx:id\u003d\"personList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            \u003cText fill\u003d\"WHITE\" strokeType\u003d\"OUTSIDE\"  wrappingWidth\u003d\"300\" text\u003d\"Contact List\" textAlignment\u003d\"CENTER\" textOrigin\u003d\"TOP\"  /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "          \u003cVBox fx:id\u003d\"taskList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            \u003cText fill\u003d\"WHITE\" strokeType\u003d\"OUTSIDE\"  wrappingWidth\u003d\"300\" text\u003d\"Task List\" textAlignment\u003d\"CENTER\" textOrigin\u003d\"TOP\"  /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            \u003cStackPane fx:id\u003d\"taskListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "          \u003cVBox fx:id\u003d\"purchaseList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            \u003cText fill\u003d\"WHITE\" strokeType\u003d\"OUTSIDE\"  wrappingWidth\u003d\"300\" text\u003d\"Expenditure List\" textAlignment\u003d\"CENTER\" textOrigin\u003d\"TOP\"  /\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            \u003cStackPane fx:id\u003d\"purchaseListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cStackPane fx:id\u003d\"browserPlaceholder\" prefWidth\u003d\"340\" \u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 67,
      "weizhonglauw": 10,
      "jayrometan": 9
    }
  },
  {
    "path": "src/main/resources/view/PurchaseListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            \u003cLabel fx:id\u003d\"price\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$price\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "weizhonglauw": 34
    }
  },
  {
    "path": "src/main/resources/view/PurchaseListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    \u003cListView fx:id\u003d\"purchaseListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "weizhonglauw": 8
    }
  },
  {
    "path": "src/main/resources/view/TaskListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "\u003cHBox id\u003d\"cardPane2\" fx:id\u003d\"cardPane2\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"cell_medium_label\" text\u003d\"\\$date\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            \u003cLabel fx:id\u003d\"time\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$time\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jayrometan": 35
    }
  },
  {
    "path": "src/main/resources/view/TaskListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    \u003cListView fx:id\u003d\"taskListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jayrometan": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import systemtests.ModelHelper;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import static seedu.address.testutil.TypicalPurchases.getTypicalExpenditureList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import static seedu.address.testutil.TypicalWorkouts.getTypicalWorkoutList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.json\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier \u003d () -\u003e null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp(Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier, Path saveFileLocation) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initialDataSupplier \u003d initialDataSupplier;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.saveFileLocation \u003d saveFileLocation;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (initialDataSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(saveFileLocation);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                jsonAddressBookStorage.saveAddressBook(initialDataSupplier.get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(600.0, 600.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(saveFileLocation);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the address book data stored inside the storage file."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook readStorageAddressBook() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook(storage.readAddressBook().get());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Data is not in the AddressBook format.\", dce);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Storage file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the storage file."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getStorageSaveLocation() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return storage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the model."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        Model copy \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                getTypicalTaskList(), getTypicalExpenditureList(),getTypicalWorkoutList());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(copy, model.getFilteredPersonList());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 108,
      "weizhonglauw": 2,
      "jayrometan": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.storage.*;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder temporaryFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        JsonTaskListStorage taskListStorage \u003d new JsonTaskListStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        JsonExpenditureListStorage expenditureListStorage \u003d new JsonExpenditureListStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        JsonWorkoutBookStorage workoutBookStorage \u003d new JsonWorkoutBookStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                taskListStorage, expenditureListStorage, workoutBookStorage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(deleteCommand);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(listCommand);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        JsonTaskListStorage taskListStorage \u003d new JsonTaskListStorage(temporaryFolder.newFile().toPath());  //TODO"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        JsonExpenditureListStorage expenditureListStorage \u003d new JsonExpenditureListStorage(temporaryFolder.newFile().toPath());  //TODO"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        JsonWorkoutBookStorage workoutBookStorage \u003d new JsonWorkoutBookStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                taskListStorage, expenditureListStorage, workoutBookStorage);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(CommandException.class, addCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(addCommand);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.getFilteredPersonList().remove(0);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                model.getTaskList(), model.getExpenditureList(), model.getWorkoutList());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - {@code expectedModel}\u0027s address book was saved to the storage file."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                                           String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 183,
      "weizhonglauw": 5,
      "jayrometan": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import static seedu.address.testutil.TypicalPurchases.getTypicalExpenditureList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import static seedu.address.testutil.TypicalWorkouts.getTypicalWorkoutList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), getTypicalTaskList(), getTypicalExpenditureList(), getTypicalWorkoutList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), getTypicalTaskList(), getTypicalExpenditureList(), getTypicalWorkoutList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new AddCommand(validPerson), model, commandHistory,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new AddCommand(personInList), model, commandHistory,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 46,
      "weizhonglauw": 1,
      "jayrometan": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.model.*;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import seedu.address.model.purchase.Purchase;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.model.workout.Workout;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        public ReadOnlyTaskList getTaskList() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        public void addTask(Task task) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        public void deleteTask(Task task) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        public void commitTaskList() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        public void undoAddressBook() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        public void redoAddressBook() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyProperty\u003cPerson\u003e selectedPersonProperty() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        public Person getSelectedPerson() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setSelectedPerson(Person person) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        public ReadOnlyProperty\u003cTask\u003e selectedTaskProperty() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        public void setSelectedTask(Task task) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        public void addPurchase(Purchase purchase) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        public void setExpenditureList(ReadOnlyExpenditureList newData) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        public ReadOnlyExpenditureList getExpenditureList() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        public ObservableList\u003cPurchase\u003e getFilteredPurchaseList() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        public void updateFilteredPurchaseList(Predicate\u003cPurchase\u003e predicate) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        public void commitExpenditureList() {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        public ReadOnlyProperty\u003cPurchase\u003e selectedPurchaseProperty() {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        public void setSelectedPurchase(Purchase purchase) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        public void addWorkout(Workout workout) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        public void commitWorkoutBook() {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        public void setSelectedWorkout(Workout workout) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        public ReadOnlyProperty\u003cWorkout\u003e selectedWorkoutProperty() {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        public ObservableList\u003cWorkout\u003e getFilteredWorkoutList() {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        public ReadOnlyWorkoutBook getWorkoutList() {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        public void updateFilteredWorkoutList(Predicate\u003cWorkout\u003e predicate) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        public void setWorkoutBook(ReadOnlyWorkoutBook workoutBook) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        public Purchase getSelectedPurchase() {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 249,
      "weizhonglauw": 50,
      "jayrometan": 93
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import static seedu.address.testutil.TypicalPurchases.getTypicalExpenditureList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import static seedu.address.testutil.TypicalWorkouts.getTypicalWorkoutList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                getTypicalTaskList(), getTypicalExpenditureList(), getTypicalWorkoutList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                getTypicalTaskList(), getTypicalExpenditureList(), getTypicalWorkoutList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 35,
      "weizhonglauw": 3,
      "jayrometan": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import static seedu.address.testutil.TypicalPurchases.getTypicalExpenditureList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import static seedu.address.testutil.TypicalWorkouts.getTypicalWorkoutList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    private Model model \u003d  new ModelManager(getTypicalAddressBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            getTypicalTaskList(), getTypicalExpenditureList(), getTypicalWorkoutList());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                model.getTaskList(), model.getExpenditureList(), model.getWorkoutList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                model.getTaskList(), model.getExpenditureList(), model.getWorkoutList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                model.getTaskList(), model.getExpenditureList(), model.getWorkoutList());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // delete -\u003e first person deleted"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e same first person deleted again"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Deletes a {@code Person} from a filtered list."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted person in the"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the person object regardless of indexing."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonDeleted() throws Exception {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                model.getTaskList(), model.getExpenditureList(), model.getWorkoutList());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // delete -\u003e deletes second person in unfiltered person list / first person in filtered person list"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(personToDelete, model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e deletes same second person in unfiltered person list"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 171,
      "weizhonglauw": 6,
      "jayrometan": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import static seedu.address.testutil.TypicalPurchases.getTypicalExpenditureList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import static seedu.address.testutil.TypicalWorkouts.getTypicalWorkoutList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    private Model model \u003d  new ModelManager(getTypicalAddressBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            getTypicalTaskList(), getTypicalExpenditureList(), getTypicalWorkoutList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs(),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                model.getTaskList(), model.getExpenditureList(), model.getWorkoutList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs(),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                model.getTaskList(), model.getExpenditureList(), model.getWorkoutList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs(),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                model.getTaskList(), model.getExpenditureList(), model.getWorkoutList());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs(),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                model.getTaskList(), model.getExpenditureList(), model.getWorkoutList());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs(),"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                model.getTaskList(), model.getExpenditureList(), model.getWorkoutList());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit -\u003e first person edited"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e same first person edited again"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Edits a {@code Person} from a filtered list."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited person in the"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Redo the edit. This ensures {@code RedoCommand} edits the person object regardless of indexing."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonEdited() throws Exception {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs(),"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                model.getTaskList(), model.getExpenditureList(), model.getWorkoutList());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit -\u003e edits second person in unfiltered person list / first person in filtered person list"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), personToEdit);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e edits same second person in unfiltered person list"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 241,
      "weizhonglauw": 8,
      "jayrometan": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import static seedu.address.testutil.TypicalPurchases.getTypicalExpenditureList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import static seedu.address.testutil.TypicalWorkouts.getTypicalWorkoutList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.model.ReadOnlyTaskList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            getTypicalTaskList(), getTypicalExpenditureList(), getTypicalWorkoutList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            getTypicalTaskList(), getTypicalExpenditureList(),getTypicalWorkoutList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 83,
      "weizhonglauw": 3,
      "jayrometan": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import static seedu.address.testutil.TypicalPurchases.getTypicalExpenditureList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import static seedu.address.testutil.TypicalWorkouts.getTypicalWorkoutList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        model \u003d  new ModelManager(getTypicalAddressBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                getTypicalTaskList(), getTypicalExpenditureList(), getTypicalWorkoutList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        expectedModel \u003d  new ModelManager(getTypicalAddressBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                getTypicalTaskList(), getTypicalExpenditureList(), getTypicalWorkoutList());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 38,
      "weizhonglauw": 3,
      "jayrometan": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RedoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import static seedu.address.testutil.TypicalPurchases.getTypicalExpenditureList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import static seedu.address.testutil.TypicalWorkouts.getTypicalWorkoutList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    private final Model model \u003d  new ModelManager(getTypicalAddressBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            getTypicalTaskList(), getTypicalExpenditureList(), getTypicalWorkoutList());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    private final Model expectedModel \u003d  new ModelManager(getTypicalAddressBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            getTypicalTaskList(), getTypicalExpenditureList(), getTypicalWorkoutList());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of both models\u0027 undo/redo history"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple redoable states in model"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // single redoable state in model"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // no redoable state in model"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 47,
      "weizhonglauw": 3,
      "jayrometan": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SelectCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import static seedu.address.testutil.TypicalPurchases.getTypicalExpenditureList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import static seedu.address.testutil.TypicalWorkouts.getTypicalWorkoutList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SelectCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            getTypicalTaskList(), getTypicalExpenditureList(), getTypicalWorkoutList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    private Model expectedModel \u003d  new ModelManager(getTypicalAddressBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            getTypicalTaskList(), getTypicalExpenditureList(), getTypicalWorkoutList());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_THIRD_PERSON);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(lastPersonIndex);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommand));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(1));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(selectSecondCommand));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index},"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * and checks that the model\u0027s selected person is set to the person at {@code index} in the filtered person list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionSuccess(Index index) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS, index.getOneBased());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setSelectedPerson(model.getFilteredPersonList().get(index.getZeroBased()));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(selectCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionFailure(Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(selectCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 106,
      "weizhonglauw": 3,
      "jayrometan": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UndoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import static seedu.address.testutil.TypicalPurchases.getTypicalExpenditureList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import static seedu.address.testutil.TypicalWorkouts.getTypicalWorkoutList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            getTypicalTaskList(), getTypicalExpenditureList(), getTypicalWorkoutList());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "            getTypicalTaskList(), getTypicalExpenditureList(),getTypicalWorkoutList());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of models\u0027 undo/redo history"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple undoable states in model"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // single undoable state in model"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // no undoable states in model"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 43,
      "weizhonglauw": 3,
      "jayrometan": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import static seedu.address.testutil.TypicalPurchases.getTypicalExpenditureList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import static seedu.address.testutil.TypicalWorkouts.getTypicalWorkoutList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.model.workout.WorkoutList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(null, modelManager.getSelectedPerson());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(null);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(null);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(null);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.hasPerson(null);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson_personIsSelectedAndFirstPersonInFilteredPersonList_selectionCleared() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setSelectedPerson(ALICE);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.deletePerson(ALICE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(null, modelManager.getSelectedPerson());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson_personIsSelectedAndSecondPersonInFilteredPersonList_firstPersonSelected() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(BOB);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(ALICE, BOB), modelManager.getFilteredPersonList());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setSelectedPerson(BOB);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.deletePerson(BOB);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(ALICE, modelManager.getSelectedPerson());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_personIsSelected_selectedPersonUpdated() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setSelectedPerson(ALICE);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        Person updatedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setPerson(ALICE, updatedAlice);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(updatedAlice, modelManager.getSelectedPerson());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.getFilteredPersonList().remove(0);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setSelectedPerson_personNotInFilteredPersonList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(PersonNotFoundException.class);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setSelectedPerson(ALICE);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setSelectedPerson_personInFilteredPersonList_setsSelectedPerson() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.singletonList(ALICE), modelManager.getFilteredPersonList());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setSelectedPerson(ALICE);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(ALICE, modelManager.getSelectedPerson());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        TaskList taskList \u003d getTypicalTaskList(); //TODO"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        TaskList differentTaskList \u003d new TaskList(); //TODO"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        ExpenditureList expenditureList \u003d getTypicalExpenditureList(); //TODO"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        ExpenditureList differentExpenditureList \u003d new ExpenditureList(); //TODO"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        WorkoutBook workoutBook \u003d getTypicalWorkoutList();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        WorkoutBook differentWorkoutBook \u003d new WorkoutBook();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs, taskList, expenditureList,workoutBook);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs, taskList, expenditureList, workoutBook);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                differentTaskList, differentExpenditureList, differentWorkoutBook)));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs, taskList, expenditureList,workoutBook)));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                taskList, expenditureList, workoutBook)));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 180,
      "weizhonglauw": 6,
      "jayrometan": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        JsonTaskListStorage taskListStorage \u003d new JsonTaskListStorage(getTempFilePath(\"\")); // TODO"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        JsonWorkoutBookStorage workoutBookStorage \u003d new JsonWorkoutBookStorage(getTempFilePath(\"\")); //TODO"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        JsonExpenditureListStorage expenditureListStorage \u003d new JsonExpenditureListStorage(getTempFilePath(\"\")); // TODO"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                taskListStorage, expenditureListStorage, workoutBookStorage);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 69,
      "weizhonglauw": 2,
      "jayrometan": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPurchases.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import seedu.address.model.ExpenditureList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "import seedu.address.model.purchase.Purchase;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "public class TypicalPurchases {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "//    public static final Task taskOne \u003d"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    public static ExpenditureList getTypicalExpenditureList(){"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        ExpenditureList expl \u003d new ExpenditureList();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        return expl;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weizhonglauw": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalTasks.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.model.TaskList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "public class TypicalTasks {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "//    public static final Task taskOne \u003d"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public static TaskList getTypicalTaskList(){"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        TaskList tl \u003d new TaskList();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        return tl;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jayrometan": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalWorkouts.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.model.WorkoutBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.model.workout.WorkoutList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "public class TypicalWorkouts {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    public static WorkoutBook getTypicalWorkoutList(){"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        WorkoutBook expl \u003d new WorkoutBook();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        return expl;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jayrometan": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/MainWindowCloseTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StageHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.WindowEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.storage.*;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains tests for closing of the {@code MainWindow}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowCloseTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public final TemporaryFolder temporaryFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private EmptyMainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage stage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        JsonTaskListStorage jsonTaskListStorage \u003d new JsonTaskListStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        JsonExpenditureListStorage jsonExpenditureListStorage \u003d new JsonExpenditureListStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "        JsonWorkoutBookStorage jsonWorkoutBookStorage \u003d new JsonWorkoutBookStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weizhonglauw"
        },
        "content": "        StorageManager storageManager \u003d new StorageManager(jsonAddressBookStorage, jsonUserPrefsStorage,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "                jsonTaskListStorage, jsonExpenditureListStorage,jsonWorkoutBookStorage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.setupStage(stage -\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            this.stage \u003d stage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(stage, new LogicManager(new ModelManager(), storageManager));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle \u003d new EmptyMainWindowHandle(stage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle.focus();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_menuBarExitButton_allWindowsClosed() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.clickOnMenuExitButton();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // The application will exit when all windows are closed."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), guiRobot.listWindows());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_externalRequest_exitAppRequestEventPosted() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.clickOnMenuHelpButton();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.closeMainWindowExternally();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // The application will exit when all windows are closed."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), guiRobot.listWindows());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * A handle for an empty {@code MainWindow}. The components in {@code MainWindow} are not initialized."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    private class EmptyMainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        private EmptyMainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            super(stage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} by clicking on the menu bar\u0027s exit button."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        private void clickOnMenuExitButton() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"File\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"Exit\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} through an external request {@code MainWindow} (e.g pressing the \u0027X\u0027 button on"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "         * the {@code MainWindow} or closing the app through the taskbar)."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        private void closeMainWindowExternally() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(() -\u003e stage.fireEvent(new WindowEvent(stage, WindowEvent.WINDOW_CLOSE_REQUEST)));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * Opens the {@code HelpWindow} by clicking on the menu bar\u0027s help button."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        private void clickOnMenuHelpButton() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"Help\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"F1\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 94,
      "weizhonglauw": 2,
      "jayrometan": 4
    }
  },
  {
    "path": "src/test/java/systemtests/AddressBookSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.logic.commands.*;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.BrowserPanel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class AddressBookSystemTest {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    protected AddressBook getInitialData() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanelHandle getPersonListPanel() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getPersonListPanel();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getBrowserPanel();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons in the address book."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showAllPersons() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(getModel().getAddressBook().getPersonList().size(), getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showPersonsWithName(String keyword) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(getModel().getFilteredPersonList().size() \u003c getModel().getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selects the person at {@code index} of the displayed list."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void selectPerson(Index index) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes all persons in the address book."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void deleteAllPersons() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, getModel().getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same person objects as {@code expectedModel}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the person list panel displays the persons in the model correctly."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(expectedModel.getAddressBook()), testApp.readStorageAddressBook());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        getBrowserPanel().rememberUrl();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().rememberSelectedPersonCard();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the previously selected card is now deselected and the browser\u0027s url is now displaying the"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * default page."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the browser\u0027s url is changed to display the details of the person in the person list panel at"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().navigateToCard(getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        String selectedCardName \u003d getPersonListPanel().getHandleToSelectedCard().getName();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedUrl;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + selectedCardName.replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (MalformedURLException mue) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"URL expected to be valid.\", mue);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Paths.get(\".\").resolve(testApp.getStorageSaveLocation()).toString(),"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "                getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "//     * Testing for AddTask Command"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "//    protected void assertAddTaskThrowsException(){"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "//      //  executeCommand(AddTaskCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "//        assertEquals(new AddTaskCommand(),\"AddTask\");"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jayrometan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jayrometan"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 283,
      "jayrometan": 18
    }
  }
]
