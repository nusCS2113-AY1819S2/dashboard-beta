[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003d Tasketch"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "https://travis-ci.org/CS2113-AY1819S2-T09-2/main[image:https://travis-ci.org/CS2113-AY1819S2-T09-2/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Tasketch is an application that helps you to manage your daily time by managing your tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* Tasketch is a CLI (Command Line Interface) application with GUI output so that you can have best of the both worlds."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* Tasketch is a Java application that you can run on any machine with Java Runtime Environment installed."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* What makes Tasketch special:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Daily Time Planner monitors your time planned for different task categories of a day."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Reminder reminds you of the important tasks."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Command Suggestion suggests you the possible commands that you can enter."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "** Auto Complete Command helps you to enter commands faster and easier."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cLearningOutcomes#, Learning Outcomes\u003e\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* This application is built on the sample application https://github.com/nusCS2113-AY1819S2/addressbook-level4[Address Book (Level 4)]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX],"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5], http://opencsv.sourceforge.net/[opencsv]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 7,
      "-": 30
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    archiveName \u003d \u0027Tasketch.jar\u0027"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        \u0027site-name\u0027: \u0027Tasketch\u0027,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/CS2113-AY1819S2-T09-2/main\u0027,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 4,
      "-": 232
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Tasketch was developed by the C2113T-T09-2 team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003d\u003d\u003d Cheah Zhi Kang"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "image::cheahzk.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "{empty}[https://github.com/cheahzk[github]] [\u003c\u003ccheahzk#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Role: Team Leader +"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Responsibilities: Deliverables and deadlines +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "\u003d\u003d\u003d Zhang Jingchen"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "image::jingchen-z.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "{empty}[https://github.com/jingchen-z[github]] [\u003c\u003cjingchen-z#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "Responsibilities: Design UI and the format of Data Storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d Jin Shibo"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "image::brittonalone.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "{empty}[http://github.com/BrittonAlone[github]] [\u003c\u003cBrittonAlone#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Responsibilities: Data + Documentation"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "\u003d\u003d\u003d Wan Chunwei"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "image::wanchunwei.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "{empty}[https://github.com/Wanchunwei[github]] [\u003c\u003cWanchunwei#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Responsibilities: Code quality + Integration"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d Li Zeyang"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "image::zeyang-li.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "{empty}[https://github.com/Zeyang-Li[github]] [\u003c\u003cZeyang-Li#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Responsibilities: Scheduling and tracking + Testing"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 1,
      "cheahzk": 8,
      "jingchen-z": 3,
      "Zeyang-Li": 10,
      "-": 33
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/cs2113-ay1819s2-t09-2/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "* *Contributing* : We do not suggest making pull requests from students not enrolled in this module \u003d(."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "* *Email us* : You can also reach us at `https://github.com/cs2113-ay1819s2-t09-2`"
      }
    ],
    "authorContributionMap": {
      "jingchen-z": 3,
      "-": 4
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003d Tasketch - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ":repoURL: https://github.com/CS2113-AY1819S2-T09-2/main/tree/master"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "By: `T09-2`      Since: `Feb 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "\u003d\u003d\u003d What is Tasketch"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Tasketch is an application that helps you to manage your everyday time by giving you an overview of all the time planned"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "for all the tasks in a daily manner. It also helps you to be aware of all the tasks dateline too. +"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "This application is designed for the busy NUS students who have many tasks, assignments and datelines everyday. +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Tasketch uses minimal (GUI) elements, instead opting for a faster Command Line Interface (CLI) while maintaining the"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "benefits of the GUI. So, if you are used to the command line, Tasketch is sure to help manage your time effectively. +"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "This developer guide is introducing the development structure of Tasketch and provide a better understanding of how this project works. Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ". Open link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow.java`] and check for any code errors"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ".. Due to an ongoing https://youtrack.jetbrains.com/issue/IDEA-189060[issue] with some of the newer versions of IntelliJ, code errors may be detected even if the project can be built and run successfully"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ".. To resolve this, place your cursor over any of the code section highlighted in red. Press kbd:[ALT + ENTER], and select `Add \u0027--add-modules\u003d...\u0027 to module compiler options` for each error"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat this for the test folder as well (e.g. check link:{repoURL}/src/test/java/seedu/address/ui/HelpWindowTest.java[`HelpWindowTest.java`] for code errors, and if so, resolve it the same way)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "image::architecture.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `TaskListPanel`, `StatusBarFooter`, `DefaultPage` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "* Listens for changes to `Model` data and feedback to user so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "* Consists of 5 parts in MainWindow, 1 part in HelpWindow."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "** The default page consists of UpperPart and Timeline."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "** UpperPart consists of Calendar, Reminder and Planner which are arranged in sequence."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "** Timeline and reminder are exceptions for updating with model\u0027s changes, please see the implementation for these two part."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ".  `Logic` uses the `TaskBookParser` class to parse the user command."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person) and `UI` since some UI parts depends on the execution result."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "add n/CS2113 task sd/13-03-19 st/12.00 ed/13-03-19 et/14.00 d/Talk about version control c/a\")` API call."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ".Interactions Inside the Logic Component for the `add n/CS2113...` Command"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "image::AddTaskSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* stores the Task Book and Account List data."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* stores currently logged in Account."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cTask\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cDay\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Task Book`, which `Task` can reference. This would allow `Task Book` to only require one `Tag` object per unique `Tag`, instead of each `Task` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "image:ModelClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* can save the Task Book data in json format and read it back."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* can save the Account List data in json format and read it back."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "//tag::Login[]"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "\u003d\u003d\u003d Login feature"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "The login feature will unlock all commands for the users, otherwise the user can only execute following commands:"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "* `login`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "* `loginStatus`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "* `listAccounts`"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "* `findAccount`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "* `help`"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "* `history`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "* `exist`"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "The login mechanism is facilitated by `LoginCommand`. It extends Command and implements the following operations:"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "* `LoginCommand#modifyLoginStatus()` — checks whether there exists such username and corresponding password in accountlist. If troue, updates the logged in account status in Model accordingly."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "* `LoginCommand#execute()` — calls LoginCommand#modifyLoginStatus(). Then, checks login status in Model and displays a login success message if true and displays a failure message otherwise."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "These operations are exposed in the Model interface as Model#setLoggedInUser() and Model#getLoginStatus() respectively."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "Given below is an example usage scenario and how the LoginCommand mechanism behaves at each step."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "*Step 1*: The user executes `login u/admin p/admin` command to log into Tasketch. The username and admin are both \"admin\"."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "*Step 2*: The execute command calls `Model#getLoginStatus()` and checks whether the user has already logged in with an account. If true, execute throws a CommandException notifying the user that he is already logged in."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "*Step 3*: The execute command then calls `LoginCommand#modifyLoginStatus()`.It checks whether the username \"admin\" and its corresponding password \"admin\" exists in the accountlist."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "*Step 4*: If there exists such an account, `LoginCommand#modifyLoginStatus()` calls `Model#setLoggedInUser()` which updates the logged in account status in model with the logged in account set to admin and logged in status set to true."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "*Step 5*: The login command checks the login status according to `Model#getLoginStatus()`. A success message is printed if true; otherwise a failure message is printed."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "The following sequence diagram shows how the login operation works:"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "image::LoginSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How login executes"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "* **Alternative 1 (current choice):** Check against various accounts stored in a file and allow access if match."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "** Pros: It allows multiple accounts to access to Taskbook."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "** Cons: It may cost more memory to store the account list."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "* **Alternative 2:** Checks against a single account that can be modified."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "** Pros: It will use less memory."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "** Cons: Only one account can access to Taskbook. If the user accidently loses the account, the whole application may be locked up."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "//end::Login[]"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d Versioned Tasketch feature"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedTaskBook`."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "It extends `TaskBook` with an undo/redo history, stored internally as an `taskBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* `VersionedTaskBook#commit()` -- Saves the current task book state in its history."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* `VersionedTaskBook#undo()` -- Restores the previous task book state from its history."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* `VersionedTaskBook#redo()` -- Restores a previously undone task book state from its history."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitTaskBook()`, `Model#undoTaskBook()` and `Model#redoTaskBook()` respectively."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*Step 1*: The user launches the application for the first time. The `VersionedTaskBook` will be initialized with the initial task book state, and the `currentStatePointer` pointing to that single task book state."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "*Step 2*: The user executes `delete 5` command to delete the 5th task in the task book. The `delete` command calls `Model#commitTaskBook()`, causing the modified state of the task book after the `delete 5` command executes to be saved in the `taskBookStateList`, and the `currentStatePointer` is shifted to the newly inserted task book state."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*Step 3*: The user executes `add n/Do CS2113 ...` to add a new task. The `add` command also calls `Model#commitTaskBook()`, causing another modified task book state to be saved into the `taskBookStateList`."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "If a command fails its execution, it will not call `Model#commitTaskBook()`, so the task book state will not be saved into the `taskBookStateList`."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "*Step 4*: The user now decides that adding the task was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoTaskBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous task book state, and restores the task book to that state."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial task book state, then there are no previous task book states to restore. The `undo` command uses `Model#canUndoTaskBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoTaskBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the task book to that state."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "If the `currentStatePointer` is at index `taskBookStateList.size() - 1`, pointing to the latest task book state, then there are no undone task book states to restore. The `redo` command uses `Model#canRedoTaskBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "*Step 5*: The user then decides to execute the command `list`. Commands that do not modify the task book, such as `list`, will usually not call `Model#commitTaskBook()`, `Model#undoTaskBook()` or `Model#redoTaskBook()`. Thus, the `taskBookStateList` remains unchanged."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Step 6. The user executes `clear` with no parameter, which calls `Model#commitTaskBook()`. Since the `currentStatePointer` is not pointing at the end of the `taskBookStateList`, all task book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/CS2113 ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire task book."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the task being deleted)."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of task book states."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedTaskBook`."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//tag::autoComplete[]"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d Automatically complete input command feature"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "Auto-complete uses tab as a signal to trigger auto-complete and the command box will automatically complete the incomplete input."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "When a user press TAB key, if the command is incomplete, Auto-complete feature will fulfill the automatically. If the command is completed, Auto- complete feature will fulfill the format string of corresponding parameters of the command."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "Given below is an example usage of how the WrongCommandSuggestion behaves at each step."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "*Step 1*: The user type an command in command line and press `TAB` from keyboard."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "*Step 2*: The command will be compared with `CommandBox#CommandList`. If the typed command is in `CommandBox#CommandList`, which means it is a valid command, then call `CommandBox#showParameterForCommand()` to fulfill the format string of parameters of the command."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "*Step 3*: Otherwise, `TAB` will call `CommandBox#autoCompleteInputCommand()` to fulfill the incomplete command."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "*Step 4*: `CommandBox#autoCompleteInputCommand()` will call `CommandBox#getMostSimilarCommand()` to get the most similar command from `Comm,andBox#CommandList`."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "*Step 4*: `CommandBox#getMostSimilarCommand()` will call `CommandBox#compare()` to get the similarity by caculating the times of editing needed for changing the input command into command in `CommandBox#CommandList`."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "*Step 5*:  If the similarity between the input command and the most similar command is more than 0.5, then replace the incomplete command with the most similar command. Otherwise, fulfill the command line with \"No matched command\"."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "The following sequence diagram shows an example of how the Auto-complete operation works with incomplete command `histoe` (closest command is `history`):"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "image::Auto-completeSequenceDiagram_01.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "* **Alternative 1:** Auto-complete the input command by that if the input incomplete command is a substring of a command in CommandList, fulfill the input command with that command."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "** Pros: Simple."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "** Cons: If the user wrongly types the incomplete command, it can not correct them."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "* **Alternative 2(current choice):**if the input incomplete command is a substring of a command in CommandList, fulfill the input command with that command. If the input incomplete command is not a substring of any commands in CommandList, caculate the similarity and return the most similar command by applying a math concept: Levenshtein Distance."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "** Pros: Even if the user wrongly type a command, Auto-complete feature can correct it."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "** Cons: Difficult to design the algorithm."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//end::autoComplete[]"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "// tag::wrongCommandSuggestion[]"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d Wrong Command Suggestion feature"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "The suggestions feature gives users helpful suggestions on what command to type, and corrections for commands when incorrect commands are being entered."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "When a user completes entering a command (after pressing ENTER key), if the command typed is invalid, the system will suggest a similar command based on the edit distance (which will be explained later)."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Given below is an example usage of how the WrongCommandSuggestion behaves at each step."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*Step 1*: The user would type in the command string wrongly."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*Step 2*: The command would be parsed into the TaskBookParser class. Since no commands match the word exactly, it would fall into the default case."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*Step 3*: The default case would extract out only the command portion of the user input, and input it into the WrongCommandSuggestion class."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*Step 4*: WrongCommandSuggestion would first check the alphabets occurrence in the command word typed by users, if there is any correct command word has the same alphabets occurrence, WrongCommandSuggestion will return this command word immediately."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*Step 5*: Otherwise, WrongCommandSuggestion then would then instantiate the StringSimilarity class to find the nearest match of a word."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*Step 6*: editDistance in StringSimliarity class would be called to find out the edit distance between two words. These two words would be the wrong command the user has input, and the list of available commands in the whole application."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*Step 7*: WrongCommandSuggestion would then compare if the edit distance of the current command is shorter than the current shortest edit distance command (which is initialised to 3 edits). If it is shorter, it would then suggest the current command."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*Step 8*: WrongCommandSuggestion would then return the suggestion in a string, which would then be inputted into the CommandException, to be thrown to the LogicManager class."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "The following sequence diagram shows an example of how the WrongCommandSuggestion operation works with wrongly spelt command `clarr` (closest command is `clear`):"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "image::WrongCommandSuggestionSequenceDiagram.png[width\u003d\"850\"]"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* **Alternative 1:** Compare the input command and the actual command character by character and see which command has the most matches."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "** Cons: Not as accurate or reliable in terms of giving a correct match of command."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* **Alternative 2:** Use a string matching algorithm to implement the matching and difference calculation between the command and the user input."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "** Pros: Accurate prediction or suggestions from actual commands."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "** Cons: Difficult to implement, and might require more processing overhead."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* **Alternative 3(current choice):** Combination of the two."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "** Pros: More accurate prediction."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "** Cons: More difficult to implement."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "// end::wrongCommandSuggestion[]"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::reminder[]"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Reminder feature"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "This feature will show user a remind list when remind command is requested. The remind list is a task list sorted by start time or deadline."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "We maintain a reminder list in each model. Note that each time user can ask for any category of tasks to be reminded, which means the remind list should contains all the tasks in Tasketch to be filtered. When the app runs, remind list will be initialised to be a **FXCollections list** of all the tasks in Tasketch."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "Remind feature has two formats of command:"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "* a) `remind [start/ddl]`"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "* b) `remind [category] [start/ddl]`"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "they follows the following steps:"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "** *Step 1* : **Sort remind list.** +"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "*** When `remind [start/ddl]` is requested, **sortRemindListByStart() / sortRemindListByEnd()** will be called. These two method will sort the remind list by start time or deadline of a task."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "*** When `remind [category] [start/ddl]` is requested, Tasketh will first do the same thing as described above. In addition, it will call **filterRemindList()** method to filter the remind list to contain only tasks with the specified category."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "** **Step 2** : **Update the UI.** +"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "The UI part of reminder is managed by **ReminderPane** class. After remind list is sorted. We update the UI of reminder in **MainWindow** by calling **setReminder()** method. **setReminder()** is implemented using **ReminderPane**."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "** **Step 3** : **Re-initialize remind list.** +"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "Call **reinitialzeRemindList()** method in **MainWindow** to set remind list to be a FXCollections list of all the tasks."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "The reason of doing this is when we show the remind list in UI, we change it from FXCollections list to a Observable list. However, in current implementation, sorting method can only be applied to FXCollections list. So we need to re-initialize remind list to be a FXCollections list containing all the tasks after each call of remind command."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "image::RemindSequenceDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "\u003d\u003d\u003d\u003d Design Consideration"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "* **Alternative 1:** Use filteredTaskList as the remind list and all operations which are related to reminder are done to filteredTaskList."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "** Pros: Very easy to implement."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "** Cons: It is not user friendly. When user execute command like \"list\", \"filteredTaskList\" will change and as a result the remind list will also change. However, remind list is expected to be concise and up-to-date. It should point to all tasks in storage instead of filteredTaskList and only change when commands like \"add\" and \"delete\" are executed."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "* **Alternative 2 (current choice):** Implement a separate remind list in model and maintain the remind list whenever the tasks in storage change."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "** Pros: It is user friendly. As long as users don\u0027t change the tasks in the storage, remind list will remain the same. When users make change to tasks, remind command will update remind list."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "** Cons: Hard to implement. Developers need to implement a separate bunch of methods in logic and model interface and class to maintain the remind list."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "\u003d\u003d\u003d Effective Visualization feature"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "There are mainly two parts in this features, **calendar** and **timeline arrangement**"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "These two parts will help the user better arrange their time usage by visualization of time."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "***"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "* **There are currently two commands with parameters to help achieve this, `month` and `timeline`.**"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "** **Implementation for Calendar: ** Using `GridPane` to separate the whole calendar area into 35 grids."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "*** Each one of the 35 grids is filled with PaneNode which is defined as area for a day."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "*** PaneNode extends AnchorPane."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "** **Implementation for Timeline:** Using JavaFx and segment each part of the browserPanel."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "*** First, separate the whole `browserPanel` into 2 parts: `upperPane` and `timelinePane`."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "*** Second, separate the `upperPane` into `calendarPane` and `reminderPane`."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "*** The whole implementation of `timeline` is in `timelinePane` using JavaFx."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "*** The overall structure is JavaFx VBox, which is a vertical arrangement structure."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "*** Inside the VBox, there are key time points for interval of 2 hours. Then the next is timeline for each category."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "***"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How timeline executes"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "* **Alternative 1 (current choice):** Delete current timeline area and re-render timeline."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "** Pros: Easy to implement. User has the freedom to choose which day to display."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "** Cons: May have performance issues in terms of execution and computation power."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "* **Alternative 2:** The timeline is auto-updated after each `add` or `edit` command."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "** Pros: More intuitive to use."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "** Cons: User lost the freedom to choose which day to display the timeline."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Special Data structure to support timeline commands"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "* **Alternative 1 (current choice):** Use a 2-D array to store of PreTask objects instead of using Task objects."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "** Pros: Saves memory since filtering requires a copy of task details."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "** Cons: Similar class is created. Not very friendly to maintain."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "* **Alternative 2:** Use a 2-D array to store Task objects."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "** Pros: More intuitive and easy to implement since no new class is created."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "** Cons: Requires more memory and computational power."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "// end::Effective Visualization[]"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::timeplanner[]"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003d\u003d\u003d Daily Time Planner feature"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Daily Time Planner uses the information of tasks added, such as start date, end date, start time, end time"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "and category."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Start date and end date are used to identify whether the task added is a daily task, same dates mean that it is a daily"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "task or else it is a long term task which is not meant for daily time planning. Thus, that task will be added to"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Daily Time Planner for monitoring. +"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Start time and end time are used for calculating the time period of that task and to be added into the accumulated time"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "for a category for that date of a task. ( eg. if the task with date 13-03-19 is a category academic task, its calculated"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "time period will be added to the academic accumulated time in the day 13-03-19. ) These information is passed to the"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "`calculateTime()` method in Day object in the form of string."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Besides `Task` model being used to represent all the tasks added, there is also `Day` model to represent all the days"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "which stores information (date and accumulated time of that 5 task categories) of the tasks added to that day."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Each new `Task` added will not create new `Day` objects, instead it will either update the category times of that `Day`"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "if the new task added has the same date (same start date), or create a new `Day` only if there no days that have the same"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "date."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "*Data Structure* +"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "`TaskBook` needs data structure to store data. Besides the ObservableList named `UniqueTaskList` to store all the tasks,"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "there is also another ObservableList named `UniqueDayList` to store all the days."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Observable List is used to observe a list so that when there is change in the list, it will notified (listeners) all the other"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "components that utilizing this Observable List data and do the necessary updates in their own data."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Besides those 2 mentioned above, a HashMap named `dayMap` is used to store another set of `Day` objects which are"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "identical to the `UniqueDayList`."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* **Alternative 1 (current choice): As described above**"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "** Pros: Faster in finding a `Day` object as it uses a key (start date of a task) to add into and find in the hash map."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "** Cons: Double work as it needs to add into and remove the `Day` object from both `UniqueDayList` and `dayMap`."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* **Alternative 2: Using the `UniqueDayList` only**"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "** Pros: No extra work needed as adding and removing happens only to one data structure."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "** Cons: Finding a `Day` object will be slower when there are large amount `Day` objects, as it needs to iterate through"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "the list."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "However, `dayMap` cannot be implemented alone as it doesn\u0027t have the ability to observe and notified the listeners when"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "there is a change and to update the UI. So, it has to be implemented with an ObservableList."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Since a new `TaskBook` is created each time `undo` and `redo` command executed as `VersionedTaskBook` extends `TaskBook`,"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "the data of the latest `UniqueTaskList` and `UniqueDayList` will need to transferred to the new `TaskBook` through"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "`resetData(ReadOnlyTaskBook newData)`."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "`dayMap` will be a reinitialised to new `HashMap` as the data in `UniqueDayList` is inaccurate during `resetData(ReadOnlyTaskBook newData)`."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "So, it is better to start in clean state and re-add all the time period of all tasks in the `UniqueTaskList`. The"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "`UniqueDayList` will be updated as well."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003d\u003d\u003d\u003d Enhancement to `add` Command"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "To ensure the Daily Time Planner works as it intended, some input checks have been implemented to properly guide and to"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "ensure the user to input the `add` command correctly."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "*Adding Daily Task* +"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "With the user inputs, the app will check the start and end dates. If the dates are identical, meaning it is a daily task,"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "then the start and end times will be checked through `CheckValidTime(Task)` because it is not correct to have a task to"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "end even before it starts. +"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "If the `CheckValidTime(Task)` results false, the system will throw exception and inform the"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "user that it is an invalid command and tell the user that start time must be before the end time."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "*Adding Long Term Task* +"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "If the dates are not identical, it only means that the task ends after few days from the start date or it can be end date"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "is before start date. In order to verify this, the start and end dates need to be checked through `CheckValidDate(Task)`. +"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "If `CheckValidDate(Task)` results negative, the system will throw exception and inform the user that it is an invalid"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "command and tell the user that start date must be before the end date. If it results positive, the system will proceed to"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "check the start and end times through `CheckValidTime(Task)` to ensure that the end time is after the start time. If it"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "results negative, the system will throw exception and inform the user that it is an invalid command and tell the user"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "that start time must be before the end time."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "If both `CheckValidDate(Task)` and `CheckValidTime(Task)` are passed, then it is a valid command."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "The system will also check for the date and time format. For dates (dd-mm-yy), the days should be more than 0 and less than 32,"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "months should be more than 0 and less than 13. For times (hh.mm), the hours should range from 0 to 23, while"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "the minutes range from 0 to 59. +"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "If the formats are violated, error message with correct usage will be prompted."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "// end::timeplanner[]"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::import/export[]"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d Import/Export feature"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Import"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "This operation is exposed in the Model interface as `Model#importTaskBook()`."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Given below is an example usage scenario and how the export mechanism behaves at each step."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*Step 1*: The user calls the import command."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*Step 2*: The LogicManager calls parseCommand with the user input."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*Step 3*: The TaskBookParser is called and it returns a ImportCommand object to LogicManager."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*Step 4*: The LogicManager calls execute() on the ImportCommand object"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*Step 5*: The Logic component then interacts with the Model component by calling `Model#importTasksFromTaskBook()`."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*Step 6*: The Model interface creates a new Import object and then pass the filePath to the ImportManager."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*Step 7*: The ModelManager will call `ImportManager#readTaskBook()` and get a ReadOnlyTaskBook object."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "The ImportManager class will first check whether the task in the file exists in Tasketch, if there is an existing task, just ignore this task."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*Step 8*: The ImportManager will then will call `JsonFileStorage#loadDataFromSaveFile()`."
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*Step 9*: The JsonFileStorage will then will call `JsonUtil#readJsonFile()`."
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*Step 10*: And then the ModelManager will then will call `addTasksToTaskBook()`."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*Step 11*: If there is any new task added, the ModelManager will then call `Model#updateFilteredTaskList()` ."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "The following sequence diagram shows how the Import operation works:"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "image::ImportSequenceDiagram.png[width\u003d\"850\"]"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Export"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "This operation is exposed in the Model interface as `Model#exportTaskBook()`."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Given below is an example usage scenario and how the export mechanism behaves at each step."
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*Step 1*: The user calls the export command."
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*Step 2*: The LogicManager calls parseCommand with the user input."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*Step 3*: The TaskBookParser is called and it returns a ExportCommand object to LogicManager."
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*Step 4*: The LogicManager calls execute() on the ExportCommand object"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*Step 5*: The Logic component then interacts with the Model component by calling `Model#exportFilteredTaskBook()` of the Model interface."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*Step 6*: The Model interface creates a new Export object and then pass the filteredTaskList."
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*Step 7*: The ExportManager object calls `ExportManager#saveFilteredTasks()`."
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*Step 8*: Then ExportManager class will call `JsonFileStorage#saveDataToFile()`."
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*Step 9*: The JsonFileStorage class will call `JsonUtil#saveJsonFile()`."
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*Step 10*: The JsonUtil class will call `FileUtil#writeToFile()`."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*Step 11*: The FileUtil class will finally call `File#write()`."
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "This File object will creates a new file if there is no existing file with the same name. And if there is an existing file, it will just write to this file no matter it is empty or not."
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "The following sequence diagram shows how the Export operation works:"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "image::ExportSequenceDiagram.png[width\u003d\"850\"]"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Use what kind of file"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* **Alternative 1 (current choice): Json file**"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "** Pros: Easier to implement because the addressbook itself uses Json file to store the data."
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "** Cons: Hard for users to read about the exported file."
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* **Alternative 2: Xml file**"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "** Pros: Xml is more widely used and it shows tha data better."
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "** Cons: Hard to implement."
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "// end::import/export[]"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": "* NUS students who need to manage time due to multiple CCAs, tasks, assignments and datelines"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* Prefers typing over mouse input"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* Is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "*Value proposition*:"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Manage all the tasks and assignments by giving each of them a time period."
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "[width\u003d\"100%\",cols\u003d\"18%,\u003c20%,\u003c35%,\u003c50%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "|`* * *` | user | add task | manage multiple tasks"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "|`* * *` | user | delete task | get rid of a task that no longer want to do"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "|`* * *` | user | edit task | change the all the information of the task"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` | user | clear tasks | remove all the completed tasks of a day or a month or all the finished tasks"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "|`* * *` | user | find tasks | check the full information of the task when forgetting the task description"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "|`* * *` | user | list tasks | know what task is on that day"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "|`* * *` | user | See the calendar | know how much workload is on that day"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "|`* * *` | user | Visualize the timeline | what is the time flow for the whole day"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "|`* * *` | user | record total time spent on each classified task type | see how much time they spend on a specific"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "task type each day"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "|`* * *` | user | show summary of time planned on a day | plan future tasks more effectively"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "|`* * *` | user | undo/redo a command | remove/redo a command that I entered/removed by mistake"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "|`* *` | user | know today\u0027s date | sure of today\u0027s date"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "|`* *` | user | add priority of the task | set the importance of an task"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "|`* *` | user | view priority of all events | see all the events based on the priority"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "|`* *` | user | list tasks of certain priority of this week | know what must be done in this week"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "|`* *` | user | classify a task | separate different tasks"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "|`* *` | user | search tasks by classification | see different tasks based on the classification"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "|`* *` | user | write reflection | write their daily reflection"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "|`* *` | user | have alarm | remind myself of the coming events"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "|`*` | user | change the color for the calendar | choose different version of different color of calendar"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "|`*` | user | play music | be entertained when working on the desk"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "|`*` | user | find out weather condition for current location | plan the next action, like to bring umbrella or not"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003d\u003d User cases"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "(For all use cases below, the *System* is the `ProjectManager` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "\u003d\u003d\u003d Add a task"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "1.  User requests to create a task"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* 1a. User submits the following information. [Task Name] [Start date] [Start time] [End date] [End time] [Description] [Task category] [Tag]"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "2.  TaskBook add that task into the task list"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "+"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* 1a1 Missing information"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "+"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "** 1a1a TaskBook displays error message"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "+"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Use case resumes at step 1"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "\u003d\u003d\u003d Editing a task"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ". User request edit -taskID [id] -s [startDateTime] -e [endDateTime] -t [topic] -d [description]"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ". TaskBook lists the details of a task and user can edit the description of the task."
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d Find a task"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ". User request find [keyWords/subString]"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ". TaskBook will list all the tasks which satisfy the searching condition."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "\u003d\u003d\u003d Delete a task"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ". User request delete [task] [keywords]"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ". TaskBook list all the task satisfy that keywords condition"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ". TaskBook remove that task."
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "\u003d\u003d\u003d Clear tasks by time period"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ". User request clear all"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ". TaskBook removes all the tasks in Tasketch."
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "*Extension*"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ". User request clear [Date]"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ". TaskBook removes the tasks which start from that day."
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ". User request clear [Month]"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ". TaskBook removes the tasks which start from that month."
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "\u003d\u003d\u003d List tasks by time period"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ". User request list of all tasks"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ". TaskBook shows a list of tasks of the current day by default."
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "*Extension*"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ". User request list all"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ".. TaskBook shows a list of all the tasks."
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ". User request list [Date]"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ".. TaskBook shows a list of tasks of that specific date."
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ". User request list [Month]"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ".. TaskBook shows a list of tasks of that month"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "\u003d\u003d\u003d Reminder feature"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ". User request for a reminder."
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ".. TaskBook shows a list of tasks which have nearest start time or deadline."
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "*Extension*"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ". User request for a reminder of certain category of tasks."
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ".. TaskBook shows a list of tasks with the specified category which have nearest start time or deadline."
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003d\u003d\u003d Help"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ". User requests help"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ". TaskBook shows a list of commands with the examples of their usage"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "\u003d\u003d\u003d Exit"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ". User request for exiting the program"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ". TaskBook saves all the changes and exits."
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003d\u003d Non-functional requirements"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ". Should work on any mainstream OS as long as it has Java 9 (revision"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "1.8.0_201 or higher) installed."
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ". Should be able to hold up to 1000 tasks without a noticeable sluggishness"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "in performance for typical usage."
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ". A user with above average typing speed for regular English text (i.e. not"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "code, not system admin commands) should be able to accomplish most of"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ". Mainstream OS: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003d\u003d Instruction for Manual Testing"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003d\u003d\u003d Daily Time Planner"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "To get started, you must first add a task. So, the inputs will be checked by the system, especially the Start and End Date"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "as well as the Start and End Time."
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "*Adding Daily Task* +"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Meaning that the Start Date is same as the End Date. You should see the time period correspond to its start date will be added"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "into the Day list where all the summary of time planned for each categories on each day is found."
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Format: `add n/TASK_NAME sd/START_DATE st/START_TIME ed/END_DATE et/END_TIME d/DESCRIPTION c/CATEGORIES [t/TAG][t/TAG]`"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* `add n/CS2113 task sd/13-03-19 st/12.00 ed/13-03-19 et/14.00 d/Talk about version control c/a` +"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "This command is a valid command as the Start and End Dates are the same and the Start Time is before the End Time."
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* `add n/CS2113 task sd/13-03-19 st/12.00 ed/13-03-19 et/10.00 d/Talk about version control c/a` +"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "This command is not a valid command as the Start Time is after the End Time. The system will prompt a message of"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\"Adding daily task, Start Time must be before End Time!\"."
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "*Adding Long Term Task* +"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Meaning that the Start Date is different from the End Date. There will be no change in the Day list."
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* `add n/CS2113 task sd/12-03-19 st/12.00 ed/13-03-19 et/14.00 d/Talk about version control c/a` +"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "This command is a valid command as the Start Date is before End Date and the Start Time is before End Time."
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* `add n/CS2113 task sd/14-03-19 st/12.00 ed/13-03-19 et/14.00 d/Talk about version control c/a` +"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "This is not a valid command as the Start Date is after End Date. The system will prompt a message of"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\"Start Date must be before End Date!\"."
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* `add n/CS2113 task sd/12-03-19 st/12.00 ed/13-03-19 et/10.00 d/Talk about version control c/a` +"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "This is not a valid command as the Start Time is after End Time eventhough the dates are correct. The system will prompt a message of"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\"Start Time must be before End Time!\"."
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "*Valid Date and Time Check* +"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "For adding both daily and long term tasks, the dates and the times will be checked as well to ensure that the format is"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "correct."
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Dates are in \u0027dd-mm-yy\u0027 format, the user will need to input the exact format, eg. 13-03-19. The system is not smart enough"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "to detect whether the day is correct for that month, so you will need to ensure the correctness yourself. However,"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "the system will not allow days more than 31 and less than 1, while months not more than 12 and less than 1."
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* `add n/CS2113 task sd/31.03.19 st/12.00 ed/13.03.19 et/14.00 d/Talk about version control c/a` +"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "This command is invalid because the date format is wrong, should be using \u0027-\u0027 instead of \u0027.\u0027 symbol in between."
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* `add n/CS2113 task sd/32-03-19 st/12.00 ed/13-03-19 et/14.00 d/Talk about version control c/a` +"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "This command is invalid because the day exceeds 31."
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* `add n/CS2113 task sd/00-03-19 st/12.00 ed/13-03-19 et/14.00 d/Talk about version control c/a` +"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "This command is invalid because the day is less than 1."
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* `add n/CS2113 task sd/13-13-19 st/12.00 ed/13-03-19 et/14.00 d/Talk about version control c/a` +"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "This command is invalid because the month exceeds 12."
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* `add n/CS2113 task sd/13-00-19 st/12.00 ed/13-03-19 et/14.00 d/Talk about version control c/a` +"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "This command is invalid because the month less than 1."
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Meanwhile, the times are in 24-hr format and in \u0027hh.mm\u0027 format, the user will need to input the exact format, eg. 08.00."
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "the system will not allow hours more than 23 and less than 0, while minutes not more than 59 and less than 0."
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* `add n/CS2113 task sd/31-03-19 st/12:00 ed/13-03-19 et/14:00 d/Talk about version control c/a` +"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "This command is invalid because the time format is wrong, should be using \u0027.\u0027 instead of \u0027:\u0027 symbol in between."
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* `add n/CS2113 task sd/12-03-19 st/24.00 ed/13-03-19 et/14.00 d/Talk about version control c/a` +"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "This command is invalid because the hour exceeds 23."
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* `add n/CS2113 task sd/12-03-19 st/23.60 ed/13-03-19 et/14.00 d/Talk about version control c/a` +"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "This command is invalid because the minute exceeds 59."
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "*Showing Daily Summary*"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Only tasks with same Start Date and End Date will be shown here. If there 2 tasks with same Start Date but one of the task"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "has different End Date, then only the task with the same Start Date and End Date will appear in the summary / Day list."
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "1. `add n/CS2113 task sd/13-03-19 st/12.00 ed/13-03-19 et/14.00 d/Talk about version control c/a` +"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "2. `add n/CS2003 task sd/13-03-19 st/12.00 ed/14-03-19 et/14.00 d/Talk about test c/a` +"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "3. `showtime`"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "You should see for the date \u002713-03-19\u0027, academic time only has 2 hours (14.00-12.00\u003d2.00, showing 2.0 instead) in the"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Day list."
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Look for the index number of the task named \u0027CS2003\u0027 in the task list. +"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "4. `edit [index number] ed/13-03-19`"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "You should see for the date \u002713-03-19\u0027, academic time has 4 hours now ((14.00-12.00)+(14.00-12.00)\u003d4.00, showing 4.0 instead)"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "in the Day list."
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": "If you trying to find a particular date in the day list. For example, \u002713-03-19\u0027, use `showtime 13-03` or `showtime 13-03-19`. If the date is not in the day list, you will see empty list. +"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Invalid commands like `showtime sfsf` will prompt error message with the correct usage."
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "\u003d\u003d\u003d Timeline visualization"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "image::TimelineSequenceDiagram.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "Assuming that you followed the procedure given above, there should be a few tasks added to your Tasketch. +"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "Such that you could test `timeline` using the above tasks."
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "*Viewing timeline* +"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "In order to test the timeline, you are encouraged to follow the steps below."
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "Format: `timeline [DATE]`"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "* `timeline 13-03-19` +"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "This command will display the tasks we just added whose start date is 13-03-19."
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 111,
      "cheahzk": 264,
      "jingchen-z": 63,
      "BrittonAlone": 32,
      "Zeyang-Li": 108,
      "-": 479
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003d Tasketch - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ":repoURL: https://github.com/CS2113-AY1819S2-T09-2/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "By: `T09-2`      Since: `Feb 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "Tasketch is an application that helps you to manage your everyday task by giving you an overview of all the time planned"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "for all the tasks in a daily manner. It also helps you to be aware of all the task deadlines too. +"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "This application is designed for the busy NUS students who have many tasks, assignments and deadlines everyday. +"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Tasketch uses minimal (GUI) elements, instead opting for a faster Command Line Interface (CLI) while maintaining the"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "benefits of the GUI. So, if you are used to the command line, Tasketch is sure to help manage your time effectively. +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "This user guide will introduce the features of Tasketch and show you how to use all the command lines. +"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003d\u003d How to use this guide"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "There are several terms which we use throughout the guide. To make your understanding clearer, you can read the following"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "section to ensure that you are able to use this user guide to the fullest."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003d\u003d\u003d Command Format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "* Some commands have an alias, which you can also use to execute the command e.g. to add a task to Tasketch, you can"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "type either `add` or `a`."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/TASK`, `TASK` is a parameter which can be used as `add n/Do MA1101R tutorial`."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `sd/START_DATE ed/END_DATE`, `ed/END_DATE sd/START_DATE` is also acceptable."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* The format for dates is `dd-mm-yy`. For example: `25-03-19` means March 25th, 2019."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* The format for times is `hh.mm` and it is using 24-hour clock. For example: `13.00` means 1 o\u0027clock in the afternoon."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "[[category]]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "****"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* There are only 5 valid categories for each task: +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*** a - Academic"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*** e - Entertainment"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*** c - Co-Curicullar Activity (CCA)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*** r - Errands"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*** o - Others"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "** Any inputs other than the above will be invalid."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "** The time duration displayed for each category is in hours and minutes unit. (e.g. 1.0 for 1 hour, 1.15 for 1 hour 15 minutes)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "****"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "*Symbols*"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "This symbol indicates important information."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "This symbol indicates things to take note."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003d\u003d\u003d User Interface Layout"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "image::UiLabel.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* *Panel A:* *Command Box* - Commands will be typed here"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* *Panel B:* *Result Box* - Displays result for all the commands, else displays either success / error message for all"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "other commands."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* *Panel C:* *Task Box* - Displays list of tasks"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* *Panel D:* *Calender* - Displays month view in calender"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* *Panel E:* *Reminder* - Displays nearest tasks of certain category"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* *Panel F:* *Day Box* - Displays list of accumulated time planned for all the categories in a day"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* *Panel G:* *Timeline* - Displays timeline of all the planned tasks in a day based on the task categories."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Panel *A*, *C*, *E* and *F* are user-interactable, meaning you can scroll them up and down. Panels *B*, *D* and *G* are"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "non-interactable."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Panel *A* will always be active, allowing you to input your commands all the time."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ".  Download the latest `tasketch.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your Tasketch."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ".  Before start to use Tasketch. You should first log into this app via login command."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "For example:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "*  login u/admin p/admin"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ". Tasketch provides a default account whose username and password are both \"admin\". We suggest that do not delete that account."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ". If you do not login, you can only execute following commands and other commands are locked."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "* login"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "* loginstatus"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "* listaccounts"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "* findaccount"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "* help"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "* history"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "* exit"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ".  Some examples you can try:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* *`list`* : lists all the tasks you have added"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* **`add`**`n/Do CS2113 sd/17-03-19 sd/10.00 ed/17-03-19 et/12.00 d/Do User Guide` : adds a new task to Tasketch."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* **`delete`**`3` : deletes the task with index 3 in Tasketch."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "\u003d\u003d Login"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "\u003d\u003d\u003d Login"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "You must login to manage your Tasketch and unlock all commands."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "Format:  `login u/USERNAME p/PASSWORD`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "* `login u/admin p/admin` +"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "login with the default account if no account has logged in Tasketch. +"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "image:login3.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "* `login u/admin p/admin` +"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "login with the default account if an account has already logged in Tasketch.. +"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "image:login1.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "\u003d\u003d\u003d AddAccount"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "Add a new account to Tasketch"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "Format: `addaccount u/USERNAME p/PASSWORD`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "* `addaccount u/wan p/123456` +"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "Add a new account whose name is \"wan\" and password is \"123456\"."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "* `addaccount u/John p/541623` +"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "Add a new account whose name is \"John\" and password is \"541623\"."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "Result: +"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "You should see the account has been added to the accountlist if you execute `listAccounts` command(add a new account whose username is \"wan\" and a new account whose username is \"John\"). +"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "image:AddAccount.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "\u003d\u003d\u003d ListAccounts"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "Shows a list of tasks in Tasketch."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "* `listaccounts` +"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "Lists all the accounts in the accountlist"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "* `listaccounts` +"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "Lists all the accounts in the accountlist"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "Result: +"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "You should see a list of all the accounts in the Result Box. +"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "image:listAccounts.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "\u003d\u003d\u003d EditAccount"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "Edit a existed account with its username and password."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "Format: `editaccount INDEX u/USERNAME [p/PASSWORD]`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "* Edits the account at the specified INDEX. The index refers to the index number shown in the displayed list when \u0027listAccounts\u0027 is used. The index must be a positive integer 1, 2, 3, …"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "* `editaccount 2 p/123123` +"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "Changes the password of the second account to 123123!"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "* `editaccount 2 u/John` +"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "Changes the username of the second account to John!"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "Result: +"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "Before execute  `editaccount 2 u/John`: +"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "image:editAccount1.png[width\u003d\"790\"]+"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "After execute `editaccount 2 u/John`: +"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "image:editAccount2.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "\u003d\u003d\u003d FindAccount"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "Finds accounts whose username contain the given keywords."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "Format: `findaccount KEYWORD`"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "****"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "* The search is case insensitive. e.g `WAN` will match `wan`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "* Only the username is searched."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "****"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "* `findaccount ad` +"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "Returns `admin`."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "* `findaccount AdMin` +"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "Returns `admin`."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "\u003d\u003d\u003d DeleteAccount"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "Deletes a specified account from Tasketch."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "Format: `deleteaccount INDEX_NUMBER`"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "* Each account is identified by a index number shown in the account list."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "* Deletes the account with the index number."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "* `listaccounts` +"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "`deleteaccount 2` +"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "Deletes the account with index number 2 in task list."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "Result: +"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "The account of the index number you choose should be delete from accountlist."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "\u003d\u003d\u003d LoginStatus"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "Shows whether the user log in Tasketch and which account the user logged in."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "Format: `loginstatus`"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "* `loginstatus` +"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "If you do not login with any accounts, return `Not logged in`."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "image:loginStatus.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "* `loginstatus` +"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "If you login with default account, return `Logged in as: admin`."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "image:loginStatus1.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "\u003d\u003d\u003d Logout"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "Log out if you have logged in with an account."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "Format: `logout`"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "* `logout` +"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "If you do not login with any accounts, return `Already logged out`. +"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "image:logout1.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "* `logout` +"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "If you login with default account, return `Logged out: admin`. +"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "image:logout.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003d\u003d Daily Time Planner"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "This feature will help you to monitor the time planned for different tasks in a day. By looking at the time spent on"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "different tasks, it aims to help you to plan your time better so that you will not spend most time on specific type"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "of a task."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003d\u003d\u003d Adding a task: `add`/`a`"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "To get started, you will need to add a task into Tasketch. The format is as below. +"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "When you are adding a task, the app will ensure that there will be no duplicate names added. This is to ensure that"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "there is no confusion in the task names."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Tasks can overlap each other, meaning you can have 2 tasks planned at the same period, as you can multitask."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Adding a task with the same start date and end date means that it is a daily task, will be monitored by the Daily Time"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Planner. Different dates means it is a long period task, thus will not be considered as daily task but can still be added."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "The app will not able to verify the correctness for the number of days in different months, so you have to ensure that"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "the date exists in that particular month. However, the app will able to differentiate the maximum number of days and months."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "This means that you will never be able to enter more than 31 days and more than 12 months in the start date and end date. +"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Should you enter different start date and end date, the app will ensure that your end date is after the start date."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "As for start time and end time, the app is smart enough to inform you when you have entered invalid time, such as 24.00,"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "as this is incorrect. You will not able to enter hours beyond 23 and minutes beyond 59. The app will also ensure"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "that the end time is after start time too. This to ensure the time spent/duration calculation (end time - start time)"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "will result correct values. There are only 5 valid categories. (The details about it can be found in \u003c\u003ccategory\u003e\u003e.)"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "You will also need to specify the type of category of the task that you are adding for the Daily Time Planner to monitor"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "your time effectively."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "A task can have any number of tags (including 0)."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "If any of the above is violated, the app will alert you that it is an invalid command with the correct format shown to"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "you. +"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " +"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "image:InvalidCommand.png[]"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Format: `add n/TASK_NAME sd/START_DATE st/START_TIME ed/END_DATE et/END_TIME d/DESCRIPTION c/CATEGORIES [t/TAG][t/TAG]`"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* `add n/CS2113 task sd/13-03-19 st/12.00 ed/13-03-19 et/14.00 d/Talk about version control c/a` +"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Adds a task named CS2113 task in the app. It starts at 12:00 on March 13rd, 2019 and it ends at 14:00 on the same day."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "The description for this task is to talk about version control and its category is academic."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* `add n/MA1101R tutorial sd/14-03-19 st/12.00 ed/14-03-19 et/14.00 d/Tutorial 8 c/a` +"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Adds a task named MA1101R tutorial. It starts at 12:00 on March 14th, 2019 and ends at 14:00 on the same day."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Its description is tutorial and the category is academic."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* `add n/CS3235 lecture sd/13-03-19 st/08.00 ed/14-03-19 et/10.00 d/Talk about network security c/a t/important` +"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Adds a task named CS3235 lecture. It starts at 8:00 on March 13rd, 2019 and ends at 10:00 on March 14th, 2019."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Its description is to talk about network security and the category is academic. The tag for it is \u0027important\u0027."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Result: +"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "You should see the task added into the Task Box. (e.g. added a task on 15-03-19) +"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "image:TaskBox.png[] +"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "The time duration on that task will be calculated at the back and the time will be reflected in the Day Box. +"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "image:DayBox.png[]"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d Clearing tasks : `clear`/`c`"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "If you have done with the tasks, simply clear them from the Tasketch, so that they will not disrupt your time planning."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* `clear` +"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Clears all the tasks in Tasketch"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* `clear DATE` +"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Clears all the tasks starting from the specified date"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* `clear before` +"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Clears all finished tasks."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* `clear 21-02-19` +"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Clears all the tasks which start from February 21st, 2019."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* `clear 02-19` +"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Clears all the tasks which start from February, 2019."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* `clear before` +"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Clears all the tasks which finished before today."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* `clear` +"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Clears all the tasks in the storage."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Result: +"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "The tasks of your date choice should be cleared from the Task Box. +"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "The correspond time duration for those tasks will be deducted and reflected in the Day Box."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d Deleting a task : `delete`/`d`"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Deletes the specified task from Tasketch."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Format: `delete INDEX_NUMBER`"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* Each tasks is identified by the index number shown in the task list."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* Deletes the task with the index number."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Deletes the task with index number 1 in task list."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* `find cs2113t` +"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " Deletes the task with index number 1 in task list."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003d\u003d\u003d Editing a task : `edit`/`e`"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Sometimes, you might have added a task information wrongly or wish to change its information. This command will allow you to"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "edit all existing tasks in Tasketch."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Since the Daily Time Planner only includes tasks that start and end on the same date. Editing the start date and end date"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "of a task will also lead to some changes."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "1. Changing from same start and end date to different dates will remove the task from Daily Time Planner, its corresponding"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "time duration will also be deducted."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "2. Changing from different start and end date to same dates will make it a daily task, thus to be included into the Daily"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Time Planner, its corresponding time duration will also be added."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "3. Maintaining the same start and end dates but changed the start or end time of a task. Its time duration changes will"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "also be updated in the Daily Time Planner."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Format: `edit TASK_ID [n/NAME] [st/START_TIME] [et/END_TIME] [d/DESCRIPTION]`"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* Edits the task with the index number shown in the task list."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "* When editing description, the existing description of the task will be removed."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "* `edit 1 st/12.00 et/14.00 t/GET1018` +"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "Edits the start time and end time of the task with ID 1 to be `12.00` and `14.00` respectively. Change the topic to `GET1018`."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "Result: +"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "The information edited for that task will be updated and reflected in the Task Box. +"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "The day related to that edited task will be updated and reflected in the Day Box."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003d\u003d\u003d Searching tasks by keywords: `find`/`f`"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Finds tasks whose topic or description contain any of the given keywords."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Format: `search KEYWORD [MORE_KEYWORDS] ...`"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* The search is case insensitive. e.g `Tutorial` will match `tutorial`."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* The order of the keywords does not matter. e.g. `CS2113T tutorial` will match `tutorial CS2113T`."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* Only the description is searched."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* Only full words will be matched e.g. `tut` will not match `tutorial`."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* Tasks matching at least one keyword will be returned (i.e. `OR` search). e.g. `CS2113T tutorial` will return `CS2113T lecture`, `CS3235 tutorial`."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "* `find CS2113T` +"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "Returns `CS2113T lecture`"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "* `f Lecture` +"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "Returns `CS2113T lecture` and `CS3235 lecture`"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d Listing all tasks : `list`/`l`"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Shows a list of tasks in Tasketch."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "image::List.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "Lists all the tasks in the storage +"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "* `list td` +"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "List all the tasks whose start date is today +"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* `list DATE` +"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "Lists all the tasks whose start date is that specific date +"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "* `list CATEGORY` +"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "Lists all the tasks of the specified category."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "* `list a` +"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "Lists all the tasks of academic category."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* `list 02-19` +"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "Lists all the tasks which starts in February, 2019"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* `list 20-02-19` +"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "Lists all the tasks which starts on February 20th, 2019"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Lists all the tasks in the storage"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Result: +"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "You should see a list of tasks in the Task Box."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003d\u003d\u003d Showing time planned for all task categories : `showtime`"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "To help you to plan and make full use of your daily time better, simply use this command to see all the time planned on"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "all 5 categories for every day."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003d\u003d\u003d\u003d Showing all the days"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "If you want to the time planned for everyday, just use this command."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Format: `showtime`"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Result: +"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "You should see a list of days with all the category times in the Day Box as shown below. +"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "image::ShowTime.png[width\u003d\"250\"]"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003d\u003d\u003d\u003d Showing a particular day"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "If you want to see only one specific day, simply add the date that you wish to see behind the command."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Format: `showtime DATE`"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Example: `showtime 15-03-19`"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Result: +"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "You should see a day of your choice with all the category times in the Day Box, if the date exists, else it will be empty. +"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "If you input anything that is invalid like `showtime sfsf`, error message will be prompted with the correct usage."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "image::ShowTimeDate.png[]"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003d\u003d Reminder"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "\u003d\u003d\u003d Reminding the users of the nearest task : `remind`"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "Shows to the user the nearest tasks of certain category."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "image::Reminder.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "* `remind start` +"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "Reminds the users of the most recently begin tasks of all categories. The reminded tasks should be in colored task cards."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "+"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "image::Remind_Start.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "* `remind ddl` +"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "Remind the users of the most recent deadline of all categories. The reminded tasks should be in colored task cards. +"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "+"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "image::Remind_DDL.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "* `remind a/e/c/r/o ddl/start` +"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "Remind the users of most recent start tasks or deadline of specified category."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "\"a\" - Academic +"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "\"e\" - Entertainment +"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "\"c\" - Co-Curricular Activity (CCA) +"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "\"r\" - Errand +"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "\"o\" - Other"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "* `remind c start` +"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "Shows a list of nearest start CCA activities."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "+"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "image::Remind_C_Start.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "* `remind a ddl` +"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "Shows a list of nearest deadlines of academic activities."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "+"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "image::Academic.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d View calender \u0026 timeline"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "\u003d\u003d\u003d Set the calendar to desired month : `month`"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "Shows the desired month to the user. Noted that only previous month and next month will be shown. +"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "e.g. Current month is April, then only March and May can be shown."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "The feature for changing the background color of each day on the calendar will come in v2.0!"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "* `month +` +"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "Changes the current calendar to next month. +"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "+"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "image::month_plus.png[width\u003d\"400\"]"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "* `month -` +"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Changes the current calendar to previous month."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "* `month` +"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "Show current month\u0027s calendar."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "+"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "image::month_this.png[width\u003d\"400\"]"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Shows the timeline of a specific day to the user : `timeline` +"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "`timeline` command will arrange the tasks on one day to real timelines."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "Noted that if there are multiple tasks at the same time under same category, the timeline will only display one task name and time period."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "e.g Academic task1: 12:00-14:00, Academic task2: 12:00-15:00 (in one day). The academic timeline will only show 12:00-15:00 is reserved."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "* `timeline` +"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "Shows the timeline of today by default. +"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "* `timeline [DATE]` +"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "Shows the timeline of that date. +"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "After adding or editing a task, user needs to retype `timeline [DATE]` to refresh the timeline. +"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "This implementation is to make sure this feature is not purely part of UI."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "* `timeline` +"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "Shows the timeline for today."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "+"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "image::timeline_today.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "* `timeline 01-04-19` +"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "Shows the whole timeline for 1st April 2019."
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "+"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "image::timeline_date.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "Timeline will only show the tasks between 6:00am to 24:pm. Sleeping early is a good habit~"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003d\u003d Getting wrong command suggestions"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "There so many commands in the app, so to help you to use the app easier, it will tell you what you have typed wrongly automatically,"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "by giving a list of closest approximations of word through the message box after pressing `enter`. +"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "****"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* The input is not case sensitive, hence it would increase the chance of getting a closer approximation of the correct command!"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* This feature tolerates a maximum of two wrong alphabets."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* This feature allows user to type in a command which has the same alphabets with one of the correct command word but in different order. The system can give suggestion even if the user type in the reverse command word."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "****"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Examples："
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* If you want to type `clear` but typed `clarr` instead, the system will tell you that it is an unknown command, and would suggest the command `clear` instead."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "+"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "image::WrongCommandSuggestion_clarr.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "+"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* If you want to type `exit` but typed `ecot` instead, the system will tell you that it is an unknown command, and would suggest the command `exit` and `edit` instead."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "+"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "image::WrongCommandSuggestion_ecot.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "+"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* If you want to type `history` but typed `hsitryo` instead, the system will tell you that it is an unknown command, and would suggest the command `history` instead."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Although there are more than 2 alphabets different from the correct command, the system will smartly show the suggestion because `hsitryo` has the same alphabets with `history`"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "+"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "image::WrongCommandSuggestion_hsitryo.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003d\u003d Automatically complete input command for user"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "If you type something wrongly, the app will automatically correct type error and fulfill their incomplete typed command in command line."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "****"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* The input is not case sensitive."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* If you type a string that is a substring of one of the commands, then command line will fulfill the string with this command."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* If you type a string that is not a substring of any of the commands, then command line will show the most similar command compared this string."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* if you type a string can not match any command, then command line will show `No command matched`."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "****"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Examples："
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* If you want to type `list`, you can type `li` instead, and press `TAB` on keyboard. The system will automatically fulfill the command in command line with `list`."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "* If you want to type `history`, but you type `histoe` instead, and press `tap` on keyboard. The system will automatically fulfill the command line with `history`."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* If you want to type `add`, but you type `aefw` instead, and press `tap` on keyboard. The system will automatically fulfill the command line with `No command matched`."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d Import/Export"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "This feature allows you to import an existing json file which contains your other tasks in Tasketch. Also, it supports"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "the product to export what you have in the Tasketch to a json file if you want."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d Export tasks displayed: `export`"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "You can save all tasks or filtered tasks into a json file. It can be used with `list` or `find`. +"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Format: `export FILENAME.json [CATEGORY]`"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* `find Revise` +"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "  `export revise.json` +"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "   Exports all tasks which are named with keyword \"Revise\" in revise.json."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* `export academic.json a` +"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "   Exports all academic tasks into academic.json."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* `list 13-03-19` +"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "  `export 13-03-19.json` +"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "   Exports all tasks which starts on March 13, 2019 in 13-03-19.json."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*  `export Tasketch.json` +"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "   Exports all tasks which are shown on the left list in Tasketch.json."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "1.  The file will be located in *\u003cDIRECTORY OF YOUR JAR FILE\u003e/data/FILENAME.json*"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "2.  This command overwrites any files with the same name at *\u003cDIRECTORY OF YOUR JAR FILE\u003e/data/*"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "3.  If you export tasks based on categories, the left list will also change to show all tasks which are exported."
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d Import tasks: `import`"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "If you have a classmate who have the same module with you, and you forget to add any related"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "task into Tasketch. There are a brunch of tasks in this module. In this case, you do not"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "need to add them one by one. Instead, you can simply ask your friend to export all tasks about this module and send the"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "file to you. What you have to do is just simply import it."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Format: `import FILENAME.json`"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* `import revise.json` +"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "   Imports all tasks in revise.json into Tasketch."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "1.  The file to import must be placed in *\u003cDIRECTORY OF YOUR JAR FILE\u003e/data/*"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "2.  Tasks that already exist in your Tasketch won’t be imported. To import an existing task in Tasketch with different details, please `delete` it first."
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d Versioned Tasketch"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "This feature will help you to check all the commands you have typed into Tasketch. Besides, it gives you a chance to"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "regret your previous attempts when playing with Tasketch."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d Listing entered commands : `history`/`h`"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d Undoing previous command : `undo`/`u`"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Restores the Tasetch to the state before the previous undoable command was executed. +"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "  `list` +"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "  `undo` (reverses the `delete 1` command)"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "  `clear` +"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "  `undo`  (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "  `undo` (reverses the `clear` command)"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d Redoing the previously undone command : `redo`/`r`"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "  `undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "  `redo` (reapplies the `delete 1` command)"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "  `redo` +"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "   The `redo` command fails as there are no undo commands executed previously."
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "`redo` (reapplies the `clear` command)"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "In case you are clueless, you can always use this command get help on all the commands available and their functions."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "If you are done using the app, you just use this command to exit and close the app."
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Tasketch data is saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* *Add* : `add n/TASK_NAME sd/START_DATE st/START_TIME ed/END_DATE et/END_TIME d/DESCRIPTION [c/CATEGORY] [t/TAG]...` +"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "e.g. `add n/CS2113 sd/13-03-19 st/12.00 ed/13-03-19 et/14.00 d/Talk about version control c/a`"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* *Clear* : `clear [DATE]` +"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "e.g. `clear 21-02-19`"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* *Delete* : `delete INDEX_NUMBER` +"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "e.g. `delete 1`"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* *Edit* : `edit INDEX_NUMBER [s/START_TIME] [e/END_TIME] [t/TOPIC] [d/DESCRIPTION]` +"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "e.g. `edit 1 s/12.00 e/14.00 t/GET1018tut`"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "e.g. `find CS2113T`"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* *List* : `list [DATE]` +"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "e.g. `list 02-19`"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "* *Remind* : `remind [category] start/end` +"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "e.g. `remind a ddl`"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* *Showtime* : `showtime [DATE]`"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "e.g. `showtime 13-02-19`"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "* *History* : `history`"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "* *Undo* : `undo`"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "* *Redo* : `redo`"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* *Exit* : `exit`"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 127,
      "cheahzk": 211,
      "jingchen-z": 59,
      "BrittonAlone": 58,
      "Zeyang-Li": 134,
      "-": 179
    }
  },
  {
    "path": "docs/team/BrittonAlone.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "\u003d Jin Shibo - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "\u003d\u003d PROJECT: Tasketch"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "My teammates and I developed Tasketch for those who need to manage their time by allocating time for each daily task. More importantly, our Tasketch is optimized for those who prefer to use a desktop app and work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "This part shows my individual contributions to our project Tasketch."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "* *Major enhancement*: I have added the *reminder feature* to our Tasketch."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "** What it does: Sometimes student tend to forget important deadline of their tasks or start time of their CCA events and etc. When users type in remind command, Tasketch will show a list of tasks in time order for them to conveniently view what tasks are coming soon so that they will know what to prepare first."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "** Justification: For busy university students, it is almost impossible for them to remember every start time or deadlines of their activities. A reminder is a common requirement of them to easily view these time in order. This feature significantly improves the users\u0027 using experience by meeting this requirement."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "** Highlights:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "*** The task cards in the remind list are filled with different colors according to those tasks\u0027 urgency level. It is very striking for users to view and consequently have a good effect on reminding users. +"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "*** This feature implement a very useful method sort() in model API which can be used to implement other features."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "* *Minor enhancement*: I made an enhancement to the list command of the previous version. In the previous version, list command can only list all the tasks in the storage. After enhancement, it support the following 4 kind of usages:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "****"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "* 1. *list* - list all the tasks in Tasketch."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "* 2. *list td* - list all the tasks of today."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "* 3. *list [Date]* - list all the tasks of the specified date. The date can be accurate to day or month."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "* 4. *list [Category]* - list all the tasks of the specified category."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "****"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "* *Code contributed*: [https://nuscs2113-ay1819s2.github.io/dashboard-beta/#search\u003d\u0026sort\u003ddisplayName\u0026since\u003d2019-02-10\u0026until\u003d2019-04-01\u0026timeframe\u003dday\u0026reverse\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabAuthor\u003dBrittonAlone\u0026tabRepo\u003dCS2113-AY1819S2-T09-2_main_master[Functional code]] [https://nuscs2113-ay1819s2.github.io/dashboard-beta/#search\u003d\u0026sort\u003ddisplayName\u0026since\u003d2019-02-10\u0026until\u003d2019-04-01\u0026timeframe\u003dday\u0026reverse\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabAuthor\u003dBrittonAlone\u0026tabRepo\u003dCS2113-AY1819S2-T09-2_main_master[Test code]]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "*** Managed releases `v1.3` on GitHub"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "*** Updated the GUI for reminder."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "*** Wrote additional tests for existing features."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "*** Did improvement to UserGuide according to new features."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "*** Did improvement to DeveloperGuide according to new features"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "*** PRs reviewed."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "*** The filterlist() function of the new list commands I added was adopted by my teammates."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "\u003d\u003d\u003d Listing all tasks : `list`/`l`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "Shows a list of tasks in Tasketch."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "image::List.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "Lists all the tasks in the storage +"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "* `list td` +"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "List all the tasks whose start date is today +"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "* `list DATE` +"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "Lists all the tasks whose start date is that specific date +"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "* `list CATEGORY` +"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "Lists all the tasks of the specified category."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "* `list a` +"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "Lists all the tasks of academic category."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "* `list 02-19` +"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "Lists all the tasks which starts in February, 2019"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "* `list 20-02-19` +"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "Lists all the tasks which starts on February 20th, 2019"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "Lists all the tasks in the storage"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "\u003d\u003d\u003d Reminding the users of the nearest task : `remind`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "Shows to the user the nearest tasks of certain category."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "image::Reminder.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "* `remind start` +"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "Reminds the users of the most recently begin tasks of all categories. The reminded tasks should be in colored task cards."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "+"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "image::Remind_Start.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "* `remind ddl` +"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "Remind the users of the most recent deadline of all categories. The reminded tasks should be in colored task cards. +"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "+"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "image::Remind_DDL.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "* `remind a/e/c/r/o ddl/start` +"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "Remind the users of most recent start tasks or deadline of specified category."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "\"a\" - Academic +"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "\"e\" - Entertainment +"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "\"c\" - Co-Curricular Activity (CCA) +"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "\"r\" - Errand +"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "\"o\" - Other"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "* `remind c start` +"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "Shows a list of nearest start CCA activities."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "+"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "image::Remind_C_Start.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "* `remind a ddl` +"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "Shows a list of nearest deadlines of academic activities."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "+"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "image::Academic.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "\u003d\u003d\u003d Reminder feature"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "This feature will show user a remind list when remind command is requested. The remind list is a task list sorted by start time or deadline."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "We maintain a reminder list in each model. Note that each time user can ask for any category of tasks to be reminded, which means the remind list should contains all the tasks in Tasketch to be filtered. When the app runs, remind list will be initialised to be a **FXCollections list** of all the tasks in Tasketch."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "Remind feature has two formats of command:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "* a) `remind [start/ddl]`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "* b) `remind [category] [start/ddl]`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "they follows the following steps:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "** **Step 1** : **Sort remind list.** +"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "*** When `remind [start/ddl]` is requested, **sortRemindListByStart() / sortRemindListByEnd()** will be called. These two method will sort the remind list by start time or deadline of a task."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "*** When `remind [category] [start/ddl]` is requested, Tasketh will first do the same thing as described above. In addition, it will call **filterRemindList()** method to filter the remind list to contain only tasks with the specified category."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "** **Step 2** : **Update the UI.** +"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "The UI part of reminder is managed by **ReminderPane** class. After remind list is sorted. We update the UI of reminder in **MainWindow** by calling **setReminder()** method. **setReminder()** is implemented using **ReminderPane**."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "** **Step 3** : **Re-initialize remind list.** +"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "Call **reinitialzeRemindList()** method in **MainWindow** to set remind list to be a FXCollections list of all the tasks."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "The reason of doing this is when we show the remind list in UI, we change it from FXCollections list to a Observable list. However, in current implementation, sorting method can only be applied to FXCollections list. So we need to re-initialize remind list to be a FXCollections list containing all the tasks after each call of remind command."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "image::RemindSequenceDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "\u003d\u003d\u003d\u003d Design Consideration"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "* **Alternative 1:** Use filteredTaskList as the remind list and all operations which are related to reminder are done to filteredTaskList."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "** Pros: Very easy to implement."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "** Cons: It is not user friendly. When user execute command like \"list\", \"filteredTaskList\" will change and as a result the remind list will also change. However, remind list is expected to be concise and up-to-date. It should point to all tasks in storage instead of filteredTaskList and only change when commands like \"add\" and \"delete\" are executed."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "* **Alternative 2 (current choice):** Implement a separate remind list in model and maintain the remind list whenever the tasks in storage change."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "** Pros: It is user friendly. As long as users don\u0027t change the tasks in the storage, remind list will remain the same. When users make change to tasks, remind command will update remind list."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "** Cons: Hard to implement. Developers need to implement a separate bunch of methods in logic and model interface and class to maintain the remind list."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "BrittonAlone": 138,
      "Zeyang-Li": 41
    }
  },
  {
    "path": "docs/team/Wanchunwei.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "\u003d Wan Chunwei - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "\u003d\u003d PROJECT: Tasketch"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "---"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "Tasketch is an desktop application designed for busy NUS students who have many tasks, assignments and deadlines everyday. Tasketch helps you to manage your everyday time by giving you an overview of all the time planned for all the tasks in a daily manner.Tasketch uses minimal (GUI) elements, instead opting for a faster Command Line Interface (CLI) while maintaining the benefits of the GUI. So, if you are used to the command line, Tasketch is sure to help manage your time effectively."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "image::Ui.png[width\u003d\"1000\"]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "_Figure 1. An overview of our application._"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "* *Major enhancement* 1: Added *login* feature. +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "** What it does: It allows the user to log into the Tasketch with their account. If the user doesn\u0027t login, all commands will be locked up except"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "*** login"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "*** loginstatus"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "*** listaccounts"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "*** findaccount"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "*** help"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "*** history"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "*** exit"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "After logging in, all commands will be unlocked for user. Besides, the user can add new accounts, edit accounts information, check login status, list all accounts, find accounts containing keywords, and delete accounts."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "** Justification: This feature prevent Tasketch from unauthorized modification. A user cannot modify the content of Tasketch without logging in."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "** Highlights: Tasketch provides a default account whose username and password are both \"admin\". We suggest that do not delete that account."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "* *Major enhancement* 2: Added *Auto-complete* feature. +"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "** What it does: If you type something wrongly, the app will automatically correct type error and fulfill their incomplete typed command in command line. If you type correct command, then it can help fulfill the format string of the parameter for corresponding command."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "** Justification: This feature improves the product significantly because a user may not be familiar with the command and may be hard to type a very long string of parameters"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "** Highlights: This enhancement will be affected by existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as if user type a command wrongly it required an algorism that can compute the similarity compared with the command user type in and existing command and return the most similar command."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "**Credits: I apply a math concept of \"Edit distance\", which means caculate the similarity between two strings by"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "caculating the time of editing for converting one string to another string."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "* *Minor enhancement*:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "** Implement \u0027edit\u0027 command that allows the user to edit his task information"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "* *Code contributed*: [https://nuscs2113-ay1819s2.github.io/dashboard-beta/#search\u003dWanchunwei\u0026sort\u003ddisplayName\u0026since\u003d2019-02-10\u0026until\u003d2019-04-01\u0026timeframe\u003dday\u0026reverse\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabAuthor\u003djingchen-z\u0026tabRepo\u003dCS2113-AY1819S2-T09-2_main_master\u0026repoSort\u003dtrue[Functional code]] [https://nuscs2113-ay1819s2.github.io/dashboard-beta/#search\u003dWanchunwei\u0026sort\u003ddisplayName\u0026since\u003d2019-02-10\u0026until\u003d2019-04-01\u0026timeframe\u003dday\u0026reverse\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabAuthor\u003djingchen-z\u0026tabRepo\u003dCS2113-AY1819S2-T09-2_main_master\u0026repoSort\u003dtrue[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "* *Other contributions*"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "*** Brainstorm new features for Tasketch"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "*** Fix bugs for and Update previous commands."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "*** Updated the Import and Export command. Makes Tasketch can import and export account list as a Json file(Pull requests https://github.com/CS2113-AY1819S2-T09-2/main/pull/160[#160])."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "*** Update User Guide and Developer Guide. (available https://github.com/Wanchunwei/main/blob/master/docs/UserGuide.adoc[UserGuide], https://github.com/Wanchunwei/main/blob/master/docs/DeveloperGuide.adoc[DeveloperGuide])"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "*** Reported bugs and offered suggestions for other teams in the class"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "*** PRs reviewed (with non-trivial review comments)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "https://github.com/CS2113-AY1819S2-T09-2/main/blob/master/docs/UserGuide.adoc[../UserGuide.adoc]"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "\u003d\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ".  Before start to use Tasketch. You should first log into this app via login command."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "For example:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "*  login u/admin p/admin"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ". Tasketch provides a default account whose username and password are both \"admin\". We suggest that do not delete that account."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ". If you do not login, you can only execute following commands and other commands are locked."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "* login"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "* loginstatus"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "* listaccounts"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "* findaccount"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "* help"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "* history"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "* exit"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "\u003d\u003d\u003d Login"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "\u003d\u003d\u003d\u003d Login"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "You must login to manage your Tasketch and unlock all commands."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "Format:  `login u/USERNAME p/PASSWORD`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "* `login u/admin p/admin` +"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "login with the default account if no account has logged in Tasketch. +"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "image:login3.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "* `login u/admin p/admin` +"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "login with the default account if an account has already logged in Tasketch.. +"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "image:login1.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "\u003d\u003d\u003d\u003d LoginStatus"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "Shows whether the user log in Tasketch and which account the user logged in."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "Format: `loginstatus`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "* `loginstatus` +"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "If you do not login with any accounts, return `Not logged in`."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "image:loginStatus.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "* `loginstatus` +"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "If you login with default account, return `Logged in as: admin`."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "image:loginStatus1.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "\u003d\u003d\u003d\u003d Logout"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "Log out if you have logged in with an account."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "Format: `logout`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "* `logout` +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "If you do not login with any accounts, return `Already logged out`. +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "image:logout1.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "* `logout` +"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "If you login with default account, return `Logged out: admin`. +"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "image:logout.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "\u003d\u003d\u003d Automatically complete input command for user"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "If you type something wrongly, the app will automatically correct type error and fulfill their incomplete typed command in command line."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "****"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "* The input is not case sensitive."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "* If you type a string that is a substring of one of the commands, then command line will fulfill the string with this command."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "* If you type a string that is not a substring of any of the commands, then command line will show the most similar command compared this string."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "* if you type a string can not match any command, then command line will show `No command matched`."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "****"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "Examples："
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "* If you want to type `list`, you can type `li` instead, and press `TAB` on keyboard. The system will automatically fulfill the command in command line with `list`."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "* If you want to type `history`, but you type `histoe` instead, and press `tap` on keyboard. The system will automatically fulfill the command line with `history`."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "* If you want to type `add`, but you type `aefw` instead, and press `tap` on keyboard. The system will automatically fulfill the command line with `No command matched`."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "https://github.com/CS2113-AY1819S2-T09-2/main/blob/master/docs/UserGuide.adoc[../UserGuide.adoc]"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "\u003d\u003d\u003d Login feature"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "The login feature will unlock all commands for the users, otherwise the user can only execute following commands:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "* `login`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "* `loginStatus`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "* `listAccounts`"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "* `findAccount`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "* `help`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "* `history`"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "* `exist`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "The login mechanism is facilitated by `LoginCommand`. It extends Command and implements the following operations:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "* `LoginCommand#modifyLoginStatus()` — checks whether there exists such username and corresponding password in accountlist. If troue, updates the logged in account status in Model accordingly."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "* `LoginCommand#execute()` — calls LoginCommand#modifyLoginStatus(). Then, checks login status in Model and displays a login success message if true and displays a failure message otherwise."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "These operations are exposed in the Model interface as Model#setLoggedInUser() and Model#getLoginStatus() respectively."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "Given below is an example usage scenario and how the LoginCommand mechanism behaves at each step."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "*Step 1*: The user executes `login u/admin p/admin` command to log into Tasketch. The username and admin are both \"admin\"."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "*Step 2*: The execute command calls `Model#getLoginStatus()` and checks whether the user has already logged in with an account. If true, execute throws a CommandException notifying the user that he is already logged in."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "*Step 3*: The execute command then calls `LoginCommand#modifyLoginStatus()`.It checks whether the username \"admin\" and its corresponding password \"admin\" exists in the accountlist."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "*Step 4*: If there exists such an account, `LoginCommand#modifyLoginStatus()` calls `Model#setLoggedInUser()` which updates the logged in account status in model with the logged in account set to admin and logged in status set to true."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "*Step 5*: The login command checks the login status according to `Model#getLoginStatus()`. A success message is printed if true; otherwise a failure message is printed."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "The following sequence diagram shows how the login operation works:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "image::LoginSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How login executes"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "* **Alternative 1 (current choice):** Check against various accounts stored in a file and allow access if match."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "** Pros: It allows multiple accounts to access to Taskbook."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "** Cons: It may cost more memory to store the account list."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "* **Alternative 2:** Checks against a single account that can be modified."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "** Pros: It will use less memory."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "** Cons: Only one account can access to Taskbook. If the user accidently loses the account, the whole application may be locked up."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "\u003d\u003d\u003d Automatically complete input command feature"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "Auto-complete uses tab as a signal to trigger auto-complete and the command box will automatically complete the incomplete input."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "When a user press TAB key, if the command is incomplete, Auto-complete feature will fulfill the automatically. If the command is completed, Auto- complete feature will fulfill the format string of corresponding parameters of the command."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "Given below is an example usage of how the WrongCommandSuggestion behaves at each step."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "*Step 1*: The user type an command in command line and press `TAB` from keyboard."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "*Step 2*: The command will be compared with `CommandBox#CommandList`. If the typed command is in `CommandBox#CommandList`, which means it is a valid command, then call `CommandBox#showParameterForCommand()` to fulfill the format string of parameters of the command."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "*Step 3*: Otherwise, `TAB` will call `CommandBox#autoCompleteInputCommand()` to fulfill the incomplete command."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "*Step 4*: `CommandBox#autoCompleteInputCommand()` will call `CommandBox#getMostSimilarCommand()` to get the most similar command from `Comm,andBox#CommandList`."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "*Step 4*: `CommandBox#getMostSimilarCommand()` will call `CommandBox#compare()` to get the similarity by caculating the times of editing needed for changing the input command into command in `CommandBox#CommandList`."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "*Step 5*:  If the similarity between the input command and the most similar command is more than 0.5, then replace the incomplete command with the most similar command. Otherwise, fulfill the command line with \"No matched command\"."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "The following sequence diagram shows an example of how the Auto-complete operation works with incomplete command `histoe` (closest command is `history`):"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "image::Auto-completeSequenceDiagram_01.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "* **Alternative 1:** Auto-complete the input command by that if the input incomplete command is a substring of a command in CommandList, fulfill the input command with that command."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "** Pros: Simple."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "** Cons: If the user wrongly types the incomplete command, it can not correct them."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "* **Alternative 2(current choice):**if the input incomplete command is a substring of a command in CommandList, fulfill the input command with that command. If the input incomplete command is not a substring of any commands in CommandList, caculate the similarity and return the most similar command by applying a math concept: Levenshtein Distance."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "** Pros: Even if the user wrongly type a command, Auto-complete feature can correct it."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "** Cons: Difficult to design the algorithm."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "//include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "//include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "---"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 207,
      "cheahzk": 2,
      "Zeyang-Li": 44
    }
  },
  {
    "path": "docs/team/Zeyang-Li.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d Zeyang Li - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d PROJECT: Tasketch"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d About the project"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* My team and I were tasked with enhancing a basic command line interface addressbook for our Software Engineering project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "We chose to morph it into an time management system called Tasketch. It is an application that helps users to manage their"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "everyday time by giving users an overview of all the time planned for all the tasks in a daily manner. It also helps users"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "to be aware of all the tasks dateline too."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "+"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "+"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "_Figure 1: An overview of our project_"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* My primary role was to design and write the codes for the wrong command suggestion feature as well as the import and export feature."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Also, I have enhanced a bit on the existing `clear` command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "The following sections illustrate these enhancements in more detail, as well as the relevant sections I have added to the"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "user and developer guides in relation to these enhancements."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Note the following symbols and formatting used in this document:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "[width\u003d\"100%\",cols\u003d\"18%,\u003c20%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "|Symbol |Indication"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "| `clear` |Grey highlight (called a mark-up) word(s) indicate that this is a command that can be inputted into the command line and executed by the application."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "| `Model#importTaskBook()` | Grey highlight text with brackets indicates a component, class or object in the architecture of the application."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "|NOTE |This indicates an important information"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "|https://github.com/CS2113-AY1819S2-T09-2/main[Github repo] |The blue text indicates there is an URL. And when you click it, you can jump to the corresponding web page."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "|_The following section shows a summary of code, document and other minor helpful contribution I have made to our project. And some URL for the pull requests and issues are also provided._"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* *Major enhancement*: +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "1. Added the ability to *give users suggestion when they type the command words wrongly*. +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    ** What it does: +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    It makes system smarter to guess and give suggestion about what is the most similar command with the wrongly typed command word. +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    ** Justification: +"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    When you are not familiar about our product or you are typing too fast, you may type the command word wrongly. You can realize"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    the mistake more quickly by looking at the suggestion given by the product."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    ** Highlights: +"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    It makes our product more user-friendly by guessing what you mean. And the system will response to your wrong command"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    accordingly, instead of responding all wrong commands with only one sentence \"Unknown command\"."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    ** Credits: +"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    Codes and ideas related are inspired by https://github.com/CS2113-AY1819S1-W12-1/main[CS2113-AY1819S1-W12-1]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "2. Added the ability to *import* and *export* tasks."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    ** What it does: +"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    It allows you to import tasks in a json file into Tasketch and export filtered tasks or all tasks into a json file."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    ** Justification: +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    In the situation that you and your friend have the same module, you two may have same tasks. This feature allows you to import all these"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    tasks without adding them one by one, if your has added all of them in his Tasketch."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    ** Highlights: +"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    It allows you to use our product on different laptops because you can just download one json file and import it into"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    another Tasketch."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    ** Credits: +"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    Codes and ideas related are inspired by https://github.com/CS2113-AY1819S1-W12-1/main[CS2113-AY1819S1-W12-1]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* *Minor enhancement*: +"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " Morphed codes to open help window, to exit the program and to undo and redo the previous command."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* *Code contributed*: [https://nuscs2113-ay1819s2.github.io/dashboard-beta/#search\u003dZeyang-Li\u0026sort\u003ddisplayName\u0026since\u003d2019-02-10\u0026until\u003d2019-04-01\u0026timeframe\u003dday\u0026reverse\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabAuthor\u003dZeyang-Li\u0026tabRepo\u003dCS2113-AY1819S2-T09-2_main_master\u0026repoSort\u003dtrue[RepoSence Report]]"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*** Managed releases `v1.1` - `v1.4` (3 releases) on GitHub"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*** Updated the clear command to clear tasks which start from one specific date or month, as well as to clear all tasks that are finished before today. +"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "(Pull requests https://github.com/CS2113-AY1819S2-T09-2/main/pull/65[#65], https://github.com/CS2113-AY1819S2-T09-2/main/pull/70[#70])"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide, developer guide to make them more organized and user friendly: https://github.com/CS2113-AY1819S2-T09-2/main/pull/118[#118], https://github.com/CS2113-AY1819S2-T09-2/main/pull[to be added]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#28], https://github.com[#31], https://github.com[#32], https://github.com[#35], https://github.com[#52], https://github.com[#58], https://github.com[#65]"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*** Contributed to issues (examples:  https://github.com/CS2113-AY1819S2-T09-2/main/issues/127[1], https://github.com/CS2113-AY1819S2-T09-2/main/issues/101[2],"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "https://github.com/CS2113-AY1819S2-T09-2/main/issues/75[3], https://github.com/CS2113-AY1819S2-T09-2/main/issues/53[4])"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com/cs2113-ay1819s2-t11-3/main/issues/82[1], https://github.com/cs2113-ay1819s2-t11-3/main/issues/89[2], https://github.com/cs2113-ay1819s2-t11-3/main/issues/91[3], https://github.com/cs2113-ay1819s2-t11-3/main/issues/95[4], )"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*** Some of the codes in the export and import part are also used by my teammate Chunwei."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are some sample sections I contributed to the User Guide in terms of the *Wrong Command Suggestion* and the *Import and Export feature*. If you would like to see the original part in our UserGuide, you can simply click blue titles. +"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "They showcase my ability to write documentation targeting end-users. +"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Here are the links to other contributions I made to the UserGuide. +"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "[https://github.com/Zeyang-Li/main/blob/master/docs/UserGuide.adoc#clearing-all-tasks-clearc[Clear tasks]]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "[https://github.com/CS2113-AY1819S2-T09-2/main/blob/master/docs/UserGuide.adoc#versioned-tasketch[Versioned Tasketch]]"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "[https://github.com/CS2113-AY1819S2-T09-2/main/blob/master/docs/UserGuide.adoc#viewing-help-help[Viewing help]]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "[https://github.com/CS2113-AY1819S2-T09-2/main/blob/master/docs/UserGuide.adoc#exiting-the-program-exit[Exiting the program]]_"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d https://github.com/CS2113-AY1819S2-T09-2/main/blob/master/docs/UserGuide.adoc#getting-wrong-command-suggestions[Getting wrong command suggestions]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "There so many commands in the app, so to help you to use the app easier, it will tell you what you have typed wrongly automatically,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "by giving a list of closest approximations of word through the message box after pressing ENTER. +"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "****"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* The input is not case sensitive, hence it would increase the chance of getting a closer approximation of the correct command!"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* This feature tolerates a maximum of two wrong alphabets."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* This feature allows user to type in a command which has the same alphabets with one of the correct command word but in different order. The system can give suggestion even if the user type in the reverse command word."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "****"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Examples："
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* If you want to type `clear` but typed `clarr` instead, the system will tell you that it is an unknown command, and would suggest the command `clear` instead."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "+"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "image::WrongCommandSuggestion_clarr.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "+"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "_Figure 2: Outcome for example 1._"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* If you want to type `exit` but typed `ecot` instead, the system will tell you that it is an unknown command, and would suggest the command `exit` and `edit` instead."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "+"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "image::WrongCommandSuggestion_ecot.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "+"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "_Figure 3: Outcome for example 2._"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* If you want to type `history` but typed `hsitryo` instead, the system will tell you that it is an unknown command, and would suggest the command `history` instead."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Although there are more than 2 alphabets different from the correct command, the system will smartly show the suggestion because `hsitryo` has the same alphabets with `history`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "+"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "image::WrongCommandSuggestion_hsitryo.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "+"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "_Figure 4: Outcome for example 3._"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d https://github.com/CS2113-AY1819S2-T09-2/main/blob/master/docs/UserGuide.adoc#importexport[Import/Export]"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "This feature allows you to import an existing json file which contains your other tasks in Tasketch. Also, it supports"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "the product to export what you have in the Tasketch to a json file if you want."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d\u003d Export tasks: `export`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "You can save all tasks or filtered tasks into a json file. It can be used with `list` or `find`. +"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Format: `export FILENAME.json [CATEGORY]`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* `find Revise` +"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "  `export revise.json` +"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "   Exports all tasks which are named with keyword \"Revise\" in revise.json."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* `export academic.json a` +"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "   Exports all academic tasks into academic.json."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* `list 13-03-19` +"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "  `export 13-03-19.json` +"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "   Exports all tasks which starts on March 13, 2019 in 13-03-19.json."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*  `export Tasketch.json` +"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "   Exports all tasks which are shown on the left list in Tasketch.json."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "1.  The file will be located in *\u003cDIRECTORY OF YOUR JAR FILE\u003e/data/FILENAME.json*"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "2.  This command overwrites any files with the same name at *\u003cDIRECTORY OF YOUR JAR FILE\u003e/data/*"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "3.  If you export tasks based on categories, the left list will also change to show all tasks which are exported."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d\u003d Import tasks: `import`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "If you have a classmate who have the same module with you, and you forget to add any related"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "task into Tasketch. There are a brunch of tasks in this module. In this case, you do not"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "need to add them one by one. Instead, you can simply ask your friend to export all tasks about this module and send the"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "file to you. What you have to do is just simply import it."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Format: `import FILENAME.json`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* `import revise.json` +"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "   Imports all tasks in revise.json into Tasketch."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "1.  The file to import must be placed in *\u003cDIRECTORY OF YOUR JAR FILE\u003e/data/*"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "2.  Tasks that already exist in your Tasketch won’t be imported. To import an existing task in Tasketch with different details, please `delete` it first."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide in terms of the *Wrong Command Suggestion feature* as well as the *Import and Export feature*. If you would like to see the original part in our DeveloperGuide, you can simply click blue titles. +"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "  They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "// tag::wrongCommandSuggestion[]"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d https://github.com/CS2113-AY1819S2-T09-2/main/blob/master/docs/DeveloperGuide.adoc#wrong-command-suggestion-feature[Wrong Command Suggestion feature]"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "The suggestions feature gives users helpful suggestions on what command to type, and corrections for commands when incorrect commands are being entered."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "When a user completes entering a command (after pressing ENTER key), if the command typed is invalid, the system will suggest a similar command based on the edit distance (which will be explained later)."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Given below is an example usage of how the WrongCommandSuggestion behaves at each step."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*Step 1*: The user would type in the command string wrongly."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*Step 2*: The command would be parsed into the TaskBookParser class. Since no commands match the word exactly, it would fall into the default case."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*Step 3*: The default case would extract out only the command portion of the user input, and input it into the WrongCommandSuggestion class."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*Step 4*: WrongCommandSuggestion would first check the alphabets occurrence in the command word typed by users, if there is any correct command word has the same alphabets occurrence, WrongCommandSuggestion will return this command word immediately."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*Step 5*: Otherwise, WrongCommandSuggestion then would then instantiate the StringSimilarity class to find the nearest match of a word."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*Step 6*: editDistance in StringSimliarity class would be called to find out the edit distance between two words. These two words would be the wrong command the user has input, and the list of available commands in the whole application."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*Step 7*: WrongCommandSuggestion would then compare if the edit distance of the current command is shorter than the current shortest edit distance command (which is initialised to 3 edits). If it is shorter, it would then suggest the current command."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*Step 8*: WrongCommandSuggestion would then return the suggestion in a string, which would then be inputted into the CommandException, to be thrown to the LogicManager class."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "The following sequence diagram shows an example of how the WrongCommandSuggestion operation works with wrongly spelt command `clarr` (closest command is `clear`):"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "image::WrongCommandSuggestionSequenceDiagram.png[width\u003d\"850\"]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* **Alternative 1:** Compare the input command and the actual command character by character and see which command has the most matches."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "** Cons: Not as accurate or reliable in terms of giving a correct match of command."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* **Alternative 2:** Use a string matching algorithm to implement the matching and difference calculation between the command and the user input."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "** Pros: Accurate prediction or suggestions from actual commands."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "** Cons: Difficult to implement, and might require more processing overhead."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* **Alternative 3(current choice):** Combination of the two."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "** Pros: More accurate prediction."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "** Cons: More difficult to implement."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "// end::wrongCommandSuggestion[]"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "// tag::import/export[]"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d https://github.com/CS2113-AY1819S2-T09-2/main/blob/master/docs/DeveloperGuide.adoc#importexport-feature[Import/Export feature]"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Import"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "This operation is exposed in the Model interface as `Model#importTaskBook()`."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Given below is an example usage scenario and how the export mechanism behaves at each step."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*Step 1*: The user calls the import command."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*Step 2*: The LogicManager calls parseCommand with the user input."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*Step 3*: The TaskBookParser is called and it returns a ImportCommand object to LogicManager."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*Step 4*: The LogicManager calls execute() on the ImportCommand object"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*Step 5*: The Logic component then interacts with the Model component by calling `Model#importTasksFromTaskBook()`."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*Step 6*: The Model interface creates a new Import object and then pass the filePath to the ImportManager."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*Step 7*: The ModelManager will call `ImportManager#readTaskBook()` and get a ReadOnlyTaskBook object."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "The ImportManager class will first check whether the task in the file exists in Tasketch, if there is an existing task, just ignore this task."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*Step 8*: The ImportManager will then will call `JsonFileStorage#loadDataFromSaveFile()`."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*Step 9*: The JsonFileStorage will then will call `JsonUtil#readJsonFile()`."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*Step 10*: And then the ModelManager will then will call `addTasksToTaskBook()`."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*Step 11*: If there is any new task added, the ModelManager will then call `Model#updateFilteredTaskList()` ."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "The following sequence diagram shows how the Import operation works:"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "image::ImportSequenceDiagram.png[width\u003d\"850\"]"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Export"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "This operation is exposed in the Model interface as `Model#exportTaskBook()`."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Given below is an example usage scenario and how the export mechanism behaves at each step."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*Step 1*: The user calls the export command."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*Step 2*: The LogicManager calls parseCommand with the user input."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*Step 3*: The TaskBookParser is called and it returns a ExportCommand object to LogicManager."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*Step 4*: The LogicManager calls execute() on the ExportCommand object"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*Step 5*: The Logic component then interacts with the Model component by calling `Model#exportFilteredTaskBook()` of the Model interface."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*Step 6*: The Model interface creates a new Export object and then pass the filteredTaskList."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*Step 7*: The ExportManager object calls `ExportManager#saveFilteredTasks()`."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*Step 8*: Then ExportManager class will call `JsonFileStorage#saveDataToFile()`."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*Step 9*: The JsonFileStorage class will call `JsonUtil#saveJsonFile()`."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*Step 10*: The JsonUtil class will call `FileUtil#writeToFile()`."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*Step 11*: The FileUtil class will finally call `File#write()`."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "This File object will creates a new file if there is no existing file with the same name. And if there is an existing file, it will just write to this file no matter it is empty or not."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "The following sequence diagram shows how the Export operation works:"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "image::ExportSequenceDiagram.png[width\u003d\"850\"]"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Use what kind of file"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* **Alternative 1 (current choice): Json file**"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "** Pros: Easier to implement because the addressbook itself uses Json file to store the data."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "** Cons: Hard for users to read about the exported file."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* **Alternative 2: Xml file**"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "** Pros: Xml is more widely used and it shows tha data better."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "** Cons: Hard to implement."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "// end::import/export[]"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "cheahzk": 1,
      "Zeyang-Li": 322,
      "-": 2
    }
  },
  {
    "path": "docs/team/cheahzk.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003d Cheah Zhi Kang - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ":repoURL: https://github.com/CS2113-AY1819S2-T09-2/main/tree/master"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003d\u003d PROJECT: Tasketch"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003d\u003d\u003d About the project"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "My team and I were tasked with enhancing a basic command line interface addressbook for our Software Engineering project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "We chose to morph it into a time management with tasks system called Tasketch. This enhanced application enables all NUS"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "students to manage their daily time by providing an overview of all the time planned for all the tasks in a daily manner"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "and helps them to be aware of all the tasks dateline."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "_Figure 1. An overview of our application._"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "My role was to design and write the codes for the Daily Time Planner feature with `showtime` command as well as morphing"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "the addressbook code to Tasketch code in the beginning. I also did some enhancement to the `add` command. +"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "The following sections illustrate these enhancements in more detail, as well as the relevant sections I have added to"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "the user and developer guides in relation to these enhancements."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Note the following symbols and formatting used in this document:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* `add` - A grey highlight (called a mark-up) word(s) indicate that this is a command that can be inputted into the command line and executed by the application."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* `importTaskBook()` - A grey highlight text with brackets indicates a component, class or object in the architecture of the application."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "This symbol indicates important information."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "This symbol indicates things to take note."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* *Main enhancement*: added *Daily Time Planner*"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "** What it does: : It keeps track of all the time planned for all the daily tasks added and the showtime command allows"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "the user to see the time planned for different categories (academic, cca, entertainment, errand and other) for all the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "days or for a specific day."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "** Justification: This feature allowing the user to plan the daily time by planning tasks of certain categories after seeing"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "how much time has been planned for that category on that day."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "** Highlights: This enhancement works closely with the `add` commands as it greatly depends on the date of the added."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Getting the right data from the tasks added is important in the implementation. So, extra checks and validation on the"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "user inputs have been implemented."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* *Other enhancements*: added restriction and checks on the `add` command to ensure that no invalid data being entered"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "into the Tasketch, as well as ensuring the Daily Time Planner works correctly after the command being parsed."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* *Code contributed*: (Please click these links to see a sample of my code.) [https://github.com/CS2113-AY1819S2-T09-2/main/commit/c32d4c5b5a218ba50dfeb315b3757dc19ad99a94[Daily Time Planner code]][https://github.com/CS2113-AY1819S2-T09-2/main/commit/fd905013aa33b2effad033e0d4609a3007bcf431[Date and Time Check code]][https://github.com/CS2113-AY1819S2-T09-2/main/pull/36[Morphing to Tasketch code]][https://nuscs2113-ay1819s2.github.io/dashboard-beta/#search\u003dcheah%20zhi%20kang\u0026sort\u003ddisplayName\u0026since\u003d2019-02-10\u0026until\u003d2019-04-01\u0026timeframe\u003dday\u0026reverse\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabAuthor\u003dZeyang-Li\u0026tabRepo\u003dCS2113-AY1819S2-T09-2_main_master\u0026repoSort\u003dtrue[RepoSense]]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "*** Managed releases `v1.2` on GitHub"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "*** Created milestones for Tasketch version on Github"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "*** Setup issue trackers for Tasketch on Github"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "*** Updated `add` command for Daily Time Planner (Pull requests https://github.com/CS2113-AY1819S2-T09-2/main/pull/90[#90], https://github.com/CS2113-AY1819S2-T09-2/main/pull/98[#98])"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "*** Added UI for Daily Time Planner commands (Pull requests https://github.com/CS2113-AY1819S2-T09-2/main/pull/116[#116])"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "*** Did cosmetic tweaks and added more content to existing contents of the User Guide, Developer Guide and ReadMe ( https://github.com/CS2113-AY1819S2-T09-2/main/pull/110[#110],"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "https://github.com/CS2113-AY1819S2-T09-2/main/pull/111[#111], https://github.com/CS2113-AY1819S2-T09-2/main/pull/125[#125], https://github.com/CS2113-AY1819S2-T09-2/main/pull/149[#149],"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "https://github.com/CS2113-AY1819S2-T09-2/main/pull/157[#157], https://github.com/CS2113-AY1819S2-T09-2/main/pull/169[#169], https://github.com/CS2113-AY1819S2-T09-2/main/pull/174[#174])"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com/CS2113-AY1819S2-T09-2/main/pull/38[#38]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "We had to modify the original addressbook User Guide with instrutions for the enhancements that we had added."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "The following is a excerpt from our Tasketch User Guide, showing the explanation on Daily Time Planner as well as the"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "commands that are important to this feature, such as `add` and `showtime`."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003d\u003d Daily Time Planner"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "This feature will help you to monitor the time planned for different tasks in a day. By looking at the time spent on"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "different tasks, it aims to help you to plan your time better so that you will not spend most time on specific type"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "of a task."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003d\u003d\u003d Adding a task: `add`/`a`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "To get started, you will need to add a task into Tasketch. The format is as below. +"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "When you are adding a task, the app will ensure that there will be no duplicate names added. This is to ensure that"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "there is no confusion in the task names."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Tasks can overlap each other, meaning you can have 2 tasks planned at the same period, as you can multitask."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Adding a task with the same start date and end date means that it is a daily task, will be monitored by the Daily Time"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Planner. Different dates means it is a long period task, thus will not be considered as daily task but can still be added."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "The app will not able to verify the correctness for the number of days in different months, so you have to ensure that"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "the date exists in that particular month. However, the app will able to differentiate the maximum number of days and months."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "This means that you will never be able to enter more than 31 days and more than 12 months in the start date and end date. +"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Should you enter different start date and end date, the app will ensure that your end date is after the start date."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "As for start time and end time, the app is smart enough to inform you when you have entered invalid time, such as 24.00,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "as this is incorrect. You will not able to enter hours beyond 23 and minutes beyond 59. The app will also ensure"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "that the end time is after start time too. This to ensure the time spent/duration calculation (end time - start time)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "will result correct values."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "You will also need to specify the type of category of the task that you are adding for the Daily Time Planner to monitor"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "your time effectively. There are only 5 valid categories. (The details about it can be found in \u003c\u003ccategory\u003e\u003e.)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "A task can have any number of tags (including 0)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "If any of the above is violated, the app will alert you that it is an invalid command with the correct format shown to"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "you."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "image:InvalidCommand.png[width\u003d\"900\"] +"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "_Figure 2. An invalid command message._"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Format: `add n/TASK_NAME sd/START_DATE st/START_TIME ed/END_DATE et/END_TIME d/DESCRIPTION c/CATEGORIES [t/TAG]...`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* `add n/CS2113 task sd/13-03-19 st/12.00 ed/13-03-19 et/14.00 d/Talk about version control` +"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Adds a task named CS2113 task in the app. It starts at 12:00 on March 13rd, 2019 and it ends at 14:00 on the same day. The description for this task is to talk about version control."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* `add n/MA1101R tutorial sd/14-03-19 st/12.00 ed/14-03-19 et/14.00 d/Tutorial 8 c/a` +"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Adds a task named MA1101R tutorial. It starts at 12:00 on March 14th, 2019 and ends at 14:00 on the same day. Its description is tutorial and it category is academic."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* `add n/CS3235 lecture sd/13-03-19 st/08.00 ed/14-03-19 et/10.00 d/Talk about network security t/important` +"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Adds a task named CS3235 lecture. It starts at 8:00 on March 13rd, 2019 and ends at 10:00 on March 14th, 2019. Its description is to talk about network security. The tag for it is \u0027important\u0027."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Result: +"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "You should see the task added into the Task Box. (e.g. added a task on 15-03-19)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "image:TaskBox.png[width\u003d\"250\"] +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "_Figure 3. Expected result in Task Box after adding a task_"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "The time duration on that task will be calculated at the back and the time will be reflected in the Day Box."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "image:DayBox.png[width\u003d\"250\"] +"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "_Figure 4. Expected result in Day Box after adding a task_"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003d\u003d\u003d Showing time planned for all task categories : `showtime`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "To help you to plan and make full use of your daily time better, simply use this command to see all the time planned on"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "all 5 categories for every day."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003d\u003d\u003d\u003d Showing all the days"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "If you want to the time planned for everyday, just use this command."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Format: `showtime`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Result: +"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "You should see a list of days with all the category times in the Day Box as shown below."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "image:ShowTime.png[width\u003d\"250\"] +"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "_Figure 5. Expected result in Day Box after `showtime`_"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003d\u003d\u003d\u003d Showing a particular day"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "If you want to see only one specific day, simply add the date that you wish to see behind the command."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Format: `showtime DATE`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Example: `showtime 15-03-19`"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Result: +"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "You should see a day of your choice with all the category times in the Day Box, if the date exists, else it will be empty. +"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "If you input anything that is invalid like `showtime sfsf`, error message will be prompted with the correct usage."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "image:ShowTimeDate.png[width\u003d\"250\"] +"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "_Figure 6. Expected result in Day Box after showtime 15-03-19_"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "The following section shows my additions to the Tasketch Developer Guide for the description on the project structure"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "as well as the Daily Time Planner feature."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "_Figure 7. Structure of the Model Component_"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* stores the Task Book data."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* stores currently logged in Account."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cTask\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cDay\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Task Book`, which `Task` can reference. This would allow `Task Book` to only require one `Tag` object per unique `Tag`, instead of each `Task` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " +"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "image:ModelClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "_Figure 7.1. Relationship of Tag with Task Model_"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003d\u003d\u003d Daily Time Planner feature"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Daily Time Planner uses the information of tasks added, such as start date, end date, start time, end time"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "and category."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Start date and end date are used to identify whether the task added is a daily task, same dates mean that it is a daily"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "task or else it is a long term task which is not meant for daily time planning. Thus, that task will be added to"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Daily Time Planner for monitoring. +"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Start time and end time are used for calculating the time period of that task and to be added into the accumulated time"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "for a category for that date of a task. ( eg. if the task with date 13-03-19 is a category academic task, its calculated"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "time period will be added to the academic accumulated time in the day 13-03-19. ) These information is passed to the `calculateTime()` method in Day object in the form of string."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Besides `Task` model being used to represent all the tasks added, there is also `Day` model to represent all the days"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "which stores information (date and accumulated time of that 5 task categories) of the tasks added to that day."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Each new `Task` added will not create new `Day` objects, instead it will either update the category times of that `Day`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "if the new task added has the same date (same start date), or create a new `Day` only if there no days that have the same"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "date."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "*Data Structure* +"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "`TaskBook` needs data structure to store data. Besides the ObservableList named `UniqueTaskList` to store all the tasks,"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "there is also another ObservableList named `UniqueDayList` to store all the days."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Observable List is used to observe a list so that when there is change in the list, it will notified (listeners) all the other"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "components that utilizing this Observable List data and do the necessary updates in their own data."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Besides those 2 mentioned above, a HashMap named `dayMap` is used to store another set of `Day` objects which are"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "identical to the `UniqueDayList`."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* **Alternative 1 (current choice): As described above**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "** Pros: Faster in finding a `Day` object as it uses a key (start date of a task) to add into and find in the hash map."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "** Cons: Double work as it needs to add into and remove the `Day` object from both `UniqueDayList` and `dayMap`."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* **Alternative 2: Using the `UniqueDayList` only**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "** Pros: No extra work needed as adding and removing happens only to one data structure."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "** Cons: Finding a `Day` object will be slower when there are large amount `Day` objects, as it needs to iterate through"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "the list."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "However, `dayMap` cannot be implemented alone as it doesn\u0027t have the ability to observe and notified the listeners when"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "there is a change. So, it has to be implemented with an ObservableList."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Since a new `TaskBook` is created each time `undo` and `redo` command executed as `VersionedTaskBook` extends `TaskBook`,"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "the data of the latest `UniqueTaskList` and `UniqueDayList` will need to transferred to the new `TaskBook` through"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "`resetData(ReadOnlyTaskBook newData)`."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "`dayMap` will be a reinitialised to new `HashMap` as the data in `UniqueDayList` is inaccurate during `resetData(ReadOnlyTaskBook newData)`. +"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "So, it is better to start in clean state and re-add all the time period of all tasks in the `UniqueTaskList`. The `UniqueDayList` will be updated as well."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003d\u003d\u003d\u003d Enhancement to `add` Command"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "To ensure the Daily Time Planner works as it intended, some input checks have been implemented to properly guide and to"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "ensure the user to input the `add` command correctly."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "*Adding Daily Task* +"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "With the user inputs, the app will check the start and end dates. If the dates are identical, meaning it is a daily task,"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "then the start and end times will be checked through `CheckValidTime(Task)` because it is not correct to have a task to"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "end even before it starts. +"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "If the `CheckValidTime(Task)` results false, the system will throw exception and inform the"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "user that it is an invalid command and tell the user that start time must be before the end time."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "*Adding Long Term Task* +"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "If the dates are not identical, it only means that the task ends after few days from the start date or it can be end date"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "is before start date. In order to verify this, the start and end dates need to be checked through `CheckValidDate(Task)`. +"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "If `CheckValidDate(Task)` results negative, the system will throw exception and inform the user that it is an invalid"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "command and tell the user that start date must be before the end date. If it results positive, the system will proceed to"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "check the start and end times through `CheckValidTime(Task)` to ensure that the end time is after the start time. If it"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "results negative, the system will throw exception and inform the user that it is an invalid command and tell the user"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "that start time must be before the end time."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "If both `CheckValidDate(Task)` and `CheckValidTime(Task)` are passed, then it is a valid command."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "The system will also check for the date and time format. For dates (dd-mm-yy), the days should be more than 0 and less than 32,"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "months should be more than 0 and less than 13. For times (hh.mm), the hours should range from 0 to 23, while"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "the minutes range from 0 to 59. +"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "If the formats are violated, error message with correct usage will be prompted."
      }
    ],
    "authorContributionMap": {
      "cheahzk": 231,
      "Zeyang-Li": 31,
      "-": 11
    }
  },
  {
    "path": "docs/team/jingchen-z.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "\u003d Zhang Jingchen - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "\u003d\u003d PROJECT: Tasketch"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "---"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "Hello there~! :)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "This is Jingchen from the `Tasketch` project team. This project is under National University of Singapore, School of Computing\u0027s module CS2113T and CS2101. My teammates and I aim to create a software which helps NUS students manage their time properly. This portfolio serves to document my work on Tasketch."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "image::Ui.png[width\u003d\"1000\"]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "`Tasketch` is a *time management* software aiming to help NUS students who need to manage their time by allocating time to daily tasks. More importantly, `Tasketch` is optimized for those who prefer to use a desktop app and work with a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). +"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "`Tasketch` is morphed from `addressbook-level4` by 5 students, namely *Cheah Zhi Kang*, *Jin Shibo*, *Li Zeyang*, *Wan Chunwei* (my teammates) and *Zhang Jingchen*(me)."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "* *Main enhancement*: Enhance visual feedback with timeline feature."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "** What it does: It arranges the tasks on a given day into a timeline according to their categories and display the timelines in parallel."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "** Justification: By visually showing the arranged timeline, this feature helps the user to better manage their tasks and decide on time allocation."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "** Highlights: Each category timeline will have their own color to be distinguished."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "** Credits: _{Shibo\u0027s idea is used on filtering the tasks according to date}_"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "* *Other enhancement*: Added command for changing calendar. Changed the find and history command that allows the user to easily locate a task and see history commands."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "* *Code contributed*: [https://nuscs2113-ay1819s2.github.io/dashboard-beta/#search\u003dJingchen\u0026sort\u003ddisplayName\u0026since\u003d2019-02-10\u0026until\u003d2019-04-01\u0026timeframe\u003dday\u0026reverse\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabAuthor\u003djingchen-z\u0026tabRepo\u003dCS2113-AY1819S2-T09-2_main_master\u0026repoSort\u003dtrue[Functional code]] [https://nuscs2113-ay1819s2.github.io/dashboard-beta/#search\u003d\u0026sort\u003ddisplayName\u0026since\u003d2019-02-10\u0026until\u003d2019-04-01\u0026timeframe\u003dday\u0026reverse\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabAuthor\u003djingchen-z\u0026tabRepo\u003dCS2113-AY1819S2-T09-2_main_master[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "*** The UI designer and the person in charge of group work coordination."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "*** Managed releases `v1.0` - `v1.4` (2 releases) on GitHub"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "*** Helped in setting up issue trackers, set up Travis-CI and auto-update of project page."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "*** Improved the GUI structure."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "*** Updated the GUI arrangement and corresponding enhancing features (Pull requests https://github.com/CS2113-AY1819S2-T09-2/main/pull/83[#83], https://github.com/CS2113-AY1819S2-T09-2/main/pull/91[#91], https://github.com/CS2113-AY1819S2-T09-2/main/pull/96[#96])"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "*** Updated previous commands (Pull requests https://github.com/CS2113-AY1819S2-T09-2/main/pull/51[#51], https://github.com/CS2113-AY1819S2-T09-2/main/pull/45[#45])"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "*** Updated UserGuide and DeveloperGuide. (available https://github.com/jingchen-z/main/blob/master/docs/UserGuide.adoc[UserGuide] https://github.com/jingchen-z/main/blob/master/docs/DeveloperGuide.adoc[DeveloperGuide])"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "*** Updated sample picture with sample data.(https://github.com/CS2113-AY1819S2-T09-2/main/blob/master/docs/images/Ui.png[Sample UI])"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "*** Reviewed most of the Pull Request."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "*** Some parts of the history feature I added was referenced by several other class mates."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "*** My UI structure and design are referenced."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "https://github.com/CS2113-AY1819S2-T09-2/main/blob/master/docs/UserGuide.adoc[../UserGuide.adoc]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "\u003d\u003d View calender \u0026 timeline"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "\u003d\u003d\u003d Set the calendar to desired month : `month`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "Shows the desired month to the user. Noted that only previous month and next month will be shown. +"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "e.g. Current month is April, then only March and May can be shown."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "The feature for changing the background color of each day on the calendar will come in v2.0!"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "* `month +` +"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "Changes the current calendar to next month. +"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "+"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "image::month_plus.png[width\u003d\"400\"]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "* `month -` +"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "Changes the current calendar to previous month."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "* `month` +"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "Show current month\u0027s calendar."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "+"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "image::month_this.png[width\u003d\"400\"]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "\u003d\u003d\u003d Shows the timeline of a specific day to the user : `timeline` +"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "`timeline` command will arrange the tasks on one day to real timelines."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "Noted that if there are multiple tasks at the same time under same category, the timeline will only display one task name and time period."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "e.g Academic task1: 12:00-14:00, Academic task2: 12:00-15:00 (in one day). The academic timeline will only show 12:00-15:00 is reserved."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "* `timeline` +"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "Shows the timeline of today by default. +"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "* `timeline [DATE]` +"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "Shows the timeline of that date. +"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "After adding or editing a task, user needs to retype `timeline [DATE]` to refresh the timeline. +"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "This implementation is to make sure this feature is not purely part of UI."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "* `timeline` +"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "Shows the timeline for today."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "+"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "image::timeline_today.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "* `timeline 01-04-19` +"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "Shows the whole timeline for 1st April 2019."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "+"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "image::timeline_date.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "Timeline will only show the tasks between 6:00am to 24:pm. Sleeping early is a good habit~"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "\u003d\u003d\u003d Searching tasks by keywords: `find`/`f`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "Finds tasks whose topic or description contain any of the given keywords."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "Format: `search KEYWORD [MORE_KEYWORDS] ...`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "****"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "* The search is case insensitive. e.g `Tutorial` will match `tutorial`."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "* The order of the keywords does not matter. e.g. `CS2113T tutorial` will match `tutorial CS2113T`."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "* Only the description is searched."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "* Only full words will be matched e.g. `tut` will not match `tutorial`."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "* Tasks matching at least one keyword will be returned (i.e. `OR` search). e.g. `CS2113T tutorial` will return `CS2113T lecture`, `CS3235 tutorial`."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "****"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "* `find CS2113T` +"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "Returns `CS2113T lecture`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "* `f Lecture` +"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "Returns `CS2113T lecture` and `CS3235 lecture`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "\u003d\u003d\u003d Deleting a task : `delete`/`d`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "Deletes the specified task from Tasketch."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "Format: `delete INDEX_NUMBER`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "****"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "* Each tasks is identified by the index number shown in the task list."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "* Deletes the task with the index number."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "****"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "Deletes the task with index number 1 in task list."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "* `find cs2113t` +"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "Deletes the task with index number 1 in task list."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "https://github.com/CS2113-AY1819S2-T09-2/main/blob/master/docs/DeveloperGuide.adoc[../DeveloperGuide.adoc]"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "// tag::month/timeline[]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "\u003d\u003d\u003d Effective Visualization feature"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "There are mainly two parts in this features, **calendar** and **timeline arrangement**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "These two parts will help the user better arrange their time usage by visualization of time."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "* **There are currently two commands with parameters to help achieve this, `month` and `timeline`.**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "** **Implementation for Calendar: ** Using `GridPane` to separate the whole calendar area into 35 grids."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "*** Each one of the 35 grids is filled with PaneNode which is defined as area for a day."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "*** PaneNode extends AnchorPane."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "***"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "** **Implementation for Timeline:** Using JavaFx and segment each part of the browserPanel."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "*** First, separate the whole `browserPanel` into 2 parts: `upperPane` and `timelinePane`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "*** Second, separate the `upperPane` into `calendarPane` and `reminderPane`."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "*** The whole implementation of `timeline` is in `timelinePane` using JavaFx."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "*** The overall structure is JavaFx VBox, which is a vertical arrangement structure."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "*** Inside the VBox, there are key time points for interval of 2 hours. Then the timeline for each category."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How timeline executes"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "* **Alternative 1 (current choice):** Delete current timeline area and re-render timeline."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "** Pros: Easy to implement. User has the freedom to choose which day to display."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "** Cons: May have performance issues in terms of execution and computation power."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "* **Alternative 2:** The timeline is auto-updated after each `add` or `edit` command."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "** Pros: More intuitive to use."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "** Cons: User lost the freedom to choose which day to display the timeline."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Special Data structure to support timeline commands"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "* **Alternative 1 (current choice):** Use a 2-D array to store of PreTask objects instead of using Task objects."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "** Pros: Saves memory since filtering requires a copy of task details."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "** Cons: Similar class is created."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "* **Alternative 2:** Use a 2-D array to store Task objects."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "** Pros: More intuitive and easy to implement since no new class is created."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "** Cons: Requires more memory and computation power."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "// end::Effective Visualization[]"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "//include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "//include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "---"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "jingchen-z": 182,
      "cheahzk": 2,
      "Zeyang-Li": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.AccountList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.ReadOnlyAccountList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.ReadOnlyTaskBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.TaskBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.util.SampleAccountDataUtil;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.storage.AccountListStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.storage.JsonAccountListStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.storage.JsonTaskBookStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.storage.TaskBookStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": " * Testing Travis"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "//This line is to test Travis CI"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 2, 0, true);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Tasketch ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        TaskBookStorage taskBookStorage \u003d new JsonTaskBookStorage(userPrefs.getTaskBookFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        AccountListStorage accountListStorage \u003d new JsonAccountListStorage(userPrefs.getAccountListFilePath());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        storage \u003d new StorageManager(taskBookStorage, userPrefsStorage, accountListStorage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * The data from the sample task book will be used instead if {@code storage}\u0027s task book is not found,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * or an empty task book will be used instead if errors occur when reading {@code storage}\u0027s task book."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Optional\u003cReadOnlyTaskBook\u003e taskBookOptional;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        ReadOnlyTaskBook initialData;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        Optional\u003cReadOnlyAccountList\u003e accountListOptional;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        ReadOnlyAccountList initialAccountData;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            taskBookOptional \u003d storage.readTaskBook();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            if (!taskBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample Tasketch\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            initialData \u003d taskBookOptional.orElseGet(SampleDataUtil::getSampleTaskBook);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty Tasketch\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            initialData \u003d new TaskBook();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Tasketch\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            initialData \u003d new TaskBook();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            accountListOptional \u003d storage.readAccountList();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            if (!accountListOptional.isPresent()) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample account database\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            initialAccountData \u003d accountListOptional.orElseGet(SampleAccountDataUtil::getSampleAccountList);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty account database\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            initialAccountData \u003d new AccountList();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty account database\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            initialAccountData \u003d new AccountList();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return new ModelManager(initialData, userPrefs, initialAccountData);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty TaskBook\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        logger.info(\"Starting Tasketch \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Tasketch ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        stop();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 20,
      "cheahzk": 18,
      "jingchen-z": 5,
      "BrittonAlone": 3,
      "Zeyang-Li": 11,
      "-": 169
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/ComponentManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " * Base class for *Manager classes"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " * Registers the class\u0027 event handlers in eventsCenter"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "public abstract class ComponentManager {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    protected EventsCenter eventsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Uses default {@link EventsCenter}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public ComponentManager() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        this(EventsCenter.getInstance());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public ComponentManager(EventsCenter eventsCenter) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        this.eventsCenter \u003d eventsCenter;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        eventsCenter.registerHandler(this);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    protected void raise(BaseEvent event) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        eventsCenter.post(event);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zeyang-Li": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/EventsCenter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import com.google.common.eventbus.EventBus;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " * Manages the event dispatching of the app."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "public class EventsCenter {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(EventsCenter.class);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private static EventsCenter instance;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private final EventBus eventBus;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private EventsCenter() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        eventBus \u003d new EventBus();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static EventsCenter getInstance() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        if (instance \u003d\u003d null) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            instance \u003d new EventsCenter();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return instance;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static void clearSubscribers() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        instance \u003d null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public void registerHandler(Object handler) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        eventBus.register(handler);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Posts an event to the event bus."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public \u003cE extends BaseEvent\u003e EventsCenter post(E event) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        logger.info(\"------[Event Posted] \" + event.getClass().getCanonicalName() + \": \" + event.toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        eventBus.post(event);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zeyang-Li": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/GuiSettings.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 1080;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 700;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jingchen-z": 2,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static final String LOG_FILE \u003d \"taskbook.log\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Decorates the given string to create a log message suitable for logging event handling methods."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static String getEventHandlingLogMessage(BaseEvent e, String message) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return \"---[Event handled][\" + e + \"]\" + message;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @see #getEventHandlingLogMessage(BaseEvent, String)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static String getEventHandlingLogMessage(BaseEvent e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return getEventHandlingLogMessage(e, \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 1,
      "Zeyang-Li": 15,
      "-": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String MESSAGE_INVALID_TASK_DISPLAYED_INDEX \u003d \"The task index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String MESSAGE_TASK_LISTED_OVERVIEW \u003d \"%1$d tasks listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String MESSAGE_DATE_CONSTRAINTS \u003d \"Start Date must be before End Date!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String MESSAGE_TIME_CONSTRAINTS \u003d \"Start Time must be before End Time!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final String MESSAGE_ACCOUNTS_FOUND_OVERVIEW \u003d \"%1$d accounts found!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final String MESSAGE_INVALID_ACCOUNT_DISPLAYED_INDEX \u003d \"The account index provided is invalid\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final String MESSAGE_INVALID_ACCOUNT_DELETION \u003d \"Cannot delete logged in account!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 3,
      "cheahzk": 4,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/BaseEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "package seedu.address.commons.events;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " * The base class for all event classes."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "public abstract class BaseEvent {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * All Events should have a clear unambiguous custom toString message so that feedback message creation"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * stays consistent and reusable."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * For example, the event manager post method will call any posted event\u0027s toString and print it in the console."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public abstract String toString();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zeyang-Li": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/AccountListChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.ReadOnlyAccountList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "/** Indicates the AccountList in the model has changed*/"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "public class AccountListChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public final ReadOnlyAccountList data;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public AccountListChangedEvent(ReadOnlyAccountList data) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return \"number of accounts \" + data.getAccountList().size();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/TaskBookChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.model.ReadOnlyTaskBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " * keep track if the task book is changed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "public class TaskBookChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public final ReadOnlyTaskBook data;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * keep track if the task book is changed."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public TaskBookChangedEvent(ReadOnlyTaskBook data) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return \"number of tasks \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                + data.getTaskList().size();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zeyang-Li": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/storage/DataSavingExceptionEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "package seedu.address.commons.events.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " * Indicates an exception during a file saving"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "public class DataSavingExceptionEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public final Exception exception;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public DataSavingExceptionEvent(Exception exception) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        this.exception \u003d exception;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return exception.toString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zeyang-Li": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/ExitAppRequestEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " * Indicates a request for App termination"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "public class ExitAppRequestEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zeyang-Li": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/FileUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private static final String JSON_FILE_EXTENSION \u003d \".json\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path}},"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Returns true if {@code filename} is a valid filename for xml files,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @param filename A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static boolean isValidXmlFilename(String filename) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        if (filename.length() \u003c\u003d JSON_FILE_EXTENSION.length()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        // Compares the filename extension with the expected xml file extension"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        int indexOfExtension \u003d filename.length() - JSON_FILE_EXTENSION.length();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        String fileExtension \u003d filename.substring(indexOfExtension);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        String lowercaseFileExtension \u003d fileExtension.toLowerCase();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return lowercaseFileExtension.equals(JSON_FILE_EXTENSION);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zeyang-Li": 21,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/JsonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zeyang-Li": 1,
      "-": 143
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Joins the elements of the provided array into a single String"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * containing the provided list of elements."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @param array  the array of values to join together, may be null"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @param separator  the separator character to use"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @return the joined String, {@code null} if null array input"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @since 2.0"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static String join(final List\u003cString\u003e array, final String separator) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        if (array \u003d\u003d null) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        final int arraySize \u003d array.size();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        if (arraySize \u003c\u003d 0) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        final StringBuilder buf \u003d new StringBuilder(arraySize);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        for (int i \u003d 0; i \u003c arraySize; i++) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            if (i \u003e 0) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                buf.append(separator);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            if (array.get(i) !\u003d null) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                buf.append(array.get(i));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return buf.toString();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zeyang-Li": 29,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/export/Export.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "package seedu.address.export;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " * The API of the Export component."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "public interface Export {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Saves the filteredTasks to the storage."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @throws IllegalValueException if the current Taskbook is empty."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    void saveFilteredTasks() throws IOException, IllegalValueException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @see #saveFilteredTasks()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    void saveFilteredTasks(ObservableList\u003cTask\u003e filteredTasks, Path filePath)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            throws IOException, IllegalValueException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    void saveFilteredAccountList(ObservableList\u003cAccount\u003e filteredAccountList, Path filePath)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            throws IOException, IllegalValueException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    void saveFilteredAccountList() throws IOException, IllegalValueException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 6,
      "Zeyang-Li": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/export/ExportManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "package seedu.address.export;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.storage.JsonFileStorage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.storage.JsonSerializableAccountList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.storage.JsonSerializableTaskBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " * Manages exporting of TaskBook data."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "public class ExportManager implements Export {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private static final String MESSAGE_NOTHING_TO_EXPORT \u003d \"There is nothing to export!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(seedu.address.export.ExportManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    private ObservableList\u003cAccount\u003e filteredAccountList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private ObservableList\u003cTask\u003e filteredTasks;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private Path exportPath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public ExportManager(ObservableList\u003cAccount\u003e filteredAccountList,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            ObservableList\u003cTask\u003e filteredTasks, Path filePath) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        this.filteredTasks \u003d filteredTasks;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        this.exportPath \u003d filePath;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        this.filteredAccountList \u003d filteredAccountList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public ExportManager(ObservableList\u003cTask\u003e filteredTasks, Path filePath) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        this.filteredTasks \u003d filteredTasks;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        this.exportPath \u003d filePath;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public Path getExportFilePath() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return exportPath;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Saves the {@code filteredTasks} to the {@code exportPath}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @throws IllegalValueException if the current taskbook is empty."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public void saveFilteredTasks() throws IOException, IllegalValueException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        saveFilteredTasks(filteredTasks, exportPath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Similar to {@link #saveFilteredTasks()}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @param filteredTasks cannot be null."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @param filePath file path of the data. Cannot be null"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public void saveFilteredTasks(ObservableList\u003cTask\u003e filteredTasks, Path filePath)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            throws IOException, IllegalValueException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        requireNonNull(filteredTasks);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        if (filteredTasks.size() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            logger.warning(\"There is nothing to export!\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            throw new IllegalValueException(MESSAGE_NOTHING_TO_EXPORT);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        if (FileUtil.isFileExists(filePath)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            logger.fine(\"File exists. Overwriting output file: \" + filePath.toString());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            logger.fine(\"Initializing output file: \" + filePath.toString());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        JsonFileStorage.saveDataToFile(filePath, new JsonSerializableTaskBook(filteredTasks));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public void saveFilteredAccountList(ObservableList\u003cAccount\u003e filteredAccountList, Path filePath)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            throws IOException, IllegalValueException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        requireNonNull(filteredAccountList);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (filteredAccountList.size() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            logger.warning(\"There is nothing to export!\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            throw new IllegalValueException(MESSAGE_NOTHING_TO_EXPORT);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (FileUtil.isFileExists(filePath)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            logger.fine(\"File exists. Overwriting output file: \" + filePath.toString());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            logger.fine(\"Initializing output file: \" + filePath.toString());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        JsonFileStorage.saveAccountListToFile(filePath, new JsonSerializableAccountList(filteredAccountList));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public void saveFilteredAccountList() throws IOException, IllegalValueException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        saveFilteredAccountList(filteredAccountList, exportPath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 36,
      "Zeyang-Li": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/export/Import.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "package seedu.address.export;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.ReadOnlyAccountList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.model.ReadOnlyTaskBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " * The API of the Import component."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "public interface Import {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * Returns the taskBook from the json file specified."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @throws FileNotFoundException if the file does not exist"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    Optional\u003cReadOnlyTaskBook\u003e readTaskBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Similar to {@link #readTaskBook()}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    Optional\u003cReadOnlyTaskBook\u003e readTaskBook(Path filePath) throws DataConversionException, FileNotFoundException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * Returns the accountList from the json file specified."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * @throws FileNotFoundException if the file does not exist"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    Optional\u003cReadOnlyAccountList\u003e readAccountList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * Similar to {@link #readAccountList()}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    Optional\u003cReadOnlyAccountList\u003e readAccountList(Path filePath) throws DataConversionException, FileNotFoundException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 14,
      "Zeyang-Li": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/export/ImportManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "package seedu.address.export;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.ReadOnlyAccountList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.model.ReadOnlyTaskBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.storage.JsonFileStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.storage.JsonSerializableAccountList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.storage.JsonSerializableTaskBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " * Manages importing of TaskBook data."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "public class ImportManager implements Import {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ImportManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private Path importPath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public ImportManager(Path filePath) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        this.importPath \u003d filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public Path getImportPath() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return importPath;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public Optional\u003cReadOnlyTaskBook\u003e readTaskBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return readTaskBook(importPath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public Optional\u003cReadOnlyTaskBook\u003e readTaskBook(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            FileNotFoundException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            logger.info(\"TaskBook file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        Optional\u003cJsonSerializableTaskBook\u003e jsonTaskBook \u003d JsonFileStorage.loadDataFromSaveFile(filePath);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            if (jsonTaskBook.isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                return Optional.of(jsonTaskBook.get().toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                return Optional.empty();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public Optional\u003cReadOnlyAccountList\u003e readAccountList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return readAccountList(importPath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public Optional\u003cReadOnlyAccountList\u003e readAccountList(Path importPath)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            throws FileNotFoundException, DataConversionException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        requireNonNull(importPath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (!Files.exists(importPath)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            logger.info(\"AccountList file \" + importPath + \" not found\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        Optional\u003cJsonSerializableAccountList\u003e jsonAccountList \u003d JsonFileStorage.loadAccountListFromSaveFile(importPath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            if (jsonAccountList.isPresent()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                return Optional.of(jsonAccountList.get().toModelType());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                return Optional.empty();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            logger.info(\"Illegal values found in \" + importPath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 30,
      "Zeyang-Li": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.ReadOnlyTaskBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.day.Day;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * @throws DataConversionException"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    CommandResult execute(String commandText)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            throws CommandException, IllegalValueException, IOException, DataConversionException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns the TaskBook."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @see seedu.address.model.Model#getTaskBook()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    ReadOnlyTaskBook getTaskBook();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of tasks */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredTaskList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    /** Returns an unmodifiable view of the list of tasks */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    ObservableList\u003cTask\u003e getRemindTaskList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    /** reinitializeRemindList */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    void reinitializeRemindList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of days */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    ObservableList\u003cDay\u003e getFilteredDayList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of commands entered by the user."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The list is ordered from the least recent command to the most recent command."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cString\u003e getHistory();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns the user prefs\u0027 task book file path."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    Path getTaskBookFilePath();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * Set the month on calendar."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * @param month"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    void setMonth(String month);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Selected task in the filtered task list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * null if no task is selected."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @see seedu.address.model.Model#selectedTaskProperty()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    ReadOnlyProperty\u003cTask\u003e selectedTaskProperty();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Selected day in the filtered day list."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * null if no day is selected."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @see seedu.address.model.Model#selectedDayProperty()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    ReadOnlyProperty\u003cDay\u003e selectedDayProperty();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Sets the selected task in the filtered task list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @see seedu.address.model.Model#setSelectedTask(Task)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    void setSelectedTask(Task task);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Sets the selected day in the filtered day list."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @see seedu.address.model.Model#setSelectedDay(Day)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    void setSelectedDay(Day day);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 4,
      "cheahzk": 30,
      "jingchen-z": 5,
      "BrittonAlone": 6,
      "Zeyang-Li": 2,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.logic.parser.TaskBookParser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.ReadOnlyTaskBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.day.Day;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final TaskBookParser taskBookParser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private boolean taskBookModified;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        taskBookParser \u003d new TaskBookParser();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        // Set taskBookModified to true whenever the models\u0027 task book is modified."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        model.getTaskBook().addListener(observable -\u003e taskBookModified \u003d true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public CommandResult execute(String commandText)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            throws CommandException, IllegalValueException, IOException, DataConversionException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        taskBookModified \u003d false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            Command command \u003d taskBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            commandResult \u003d command.execute(model, history);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (taskBookModified) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            logger.info(\"Task book modified, saving to file.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                storage.saveTaskBook(model.getTaskBook());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public ReadOnlyTaskBook getTaskBook() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return model.getTaskBook();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return model.getFilteredTaskList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public ObservableList\u003cTask\u003e getRemindTaskList() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return model.getRemindTaskList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public void reinitializeRemindList() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        model.reinitializeRemindList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public ObservableList\u003cDay\u003e getFilteredDayList() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return model.getFilteredDayList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return history.getHistory();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public Path getTaskBookFilePath() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return model.getTaskBookFilePath();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void setMonth(String month) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        model.setMonth(month);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public ReadOnlyProperty\u003cTask\u003e selectedTaskProperty() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return model.selectedTaskProperty();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public ReadOnlyProperty\u003cDay\u003e selectedDayProperty() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return model.selectedDayProperty();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void setSelectedTask(Task task) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        model.setSelectedTask(task);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void setSelectedDay(Day day) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        model.setSelectedDay(day);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 3,
      "cheahzk": 37,
      "jingchen-z": 1,
      "BrittonAlone": 7,
      "Zeyang-Li": 4,
      "-": 89
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddAccountCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": " * Adds an account to the account list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "public class AddAccountCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addaccount\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"aAc\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an account to the account database. \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            + PREFIX_USERNAME + \"USERNAME \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            + PREFIX_PASSWORD + \"PASSWORD\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            + PREFIX_USERNAME + \"admin \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            + PREFIX_PASSWORD + \"admin\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New account added: %1$s\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ACCOUNT \u003d \"This account already exists in the database\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final String MESSAGE_LOGIN \u003d \"Please login first\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    private final Path filePath \u003d Paths.get(\"data/AccountList.json\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    private final Account toAdd;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Item}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public AddAccountCommand(Account account) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        requireNonNull(account);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        toAdd \u003d account;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            throws CommandException, IOException, IllegalValueException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (!model.getLoginStatus()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            throw new CommandException(MESSAGE_LOGIN);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (model.hasAccount(toAdd)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ACCOUNT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        model.addAccount(toAdd);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        model.exportFilteredAccountList(filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                || (other instanceof AddAccountCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddAccountCommand) other).toAdd));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 81,
      "Zeyang-Li": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DATE_CONSTRAINTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_TIME_CONSTRAINTS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENDDATE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENDTIME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTDATE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTTIME;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.logic.commands.checks.CheckValidDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.logic.commands.checks.CheckValidTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Add a task to Tasketch"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"a\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a task to Tasketch. \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            + PREFIX_NAME + \"TASK NAME \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            + PREFIX_STARTDATE + \"START_DATE \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            + PREFIX_STARTTIME + \"START_TIME(24-hr format) \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            + PREFIX_ENDDATE + \"END_DATE \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            + PREFIX_ENDTIME + \"END_TIME(24-hr format) \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            + PREFIX_DESCRIPTION + \"CONTENT \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            + PREFIX_CATEGORY + \"CATEGORY \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            + PREFIX_NAME + \"Revise CS2113T \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            + PREFIX_STARTDATE + \"15-03-19 \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            + PREFIX_STARTTIME + \"14.00 \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            + PREFIX_ENDDATE + \"15-03-19 \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            + PREFIX_ENDTIME + \"17.00 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            + PREFIX_DESCRIPTION + \"Class diagram \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            + PREFIX_CATEGORY + \"a \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            + PREFIX_TAG + \"urgent \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            + PREFIX_TAG + \"duesoon\\n\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String COMMAND_PARAMETERS \u003d \"Parameters: \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            + PREFIX_NAME + \"TASK NAME \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            + PREFIX_STARTDATE + \"START_DATE \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            + PREFIX_STARTTIME + \"START_TIME(24-hr format) \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            + PREFIX_ENDDATE + \"END_DATE \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            + PREFIX_ENDTIME + \"END_TIME(24-hr format) \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            + PREFIX_DESCRIPTION + \"CONTENT \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            + PREFIX_CATEGORY + \"CATEGORY \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New Task added: %1$s\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"This Task already exists in Tasketch\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String MESSAGE_DAILYTIME_CONSTRAINTS \u003d \"Adding daily task, Start Time must be before End Time!\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final String MESSAGE_LOGIN \u003d \"Please login first\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private Task toAdd;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Task}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public AddCommand(Task task) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        boolean isValidDate;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        boolean isValidTime;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        CheckValidDate checkValidDate \u003d new CheckValidDate(task);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        CheckValidTime checkValidTime \u003d new CheckValidTime(task);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        isValidDate \u003d checkValidDate.getCheck();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        isValidTime \u003d checkValidTime.getCheck();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String startD \u003d task.getStartDate().value;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String endD \u003d task.getEndDate().value;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (startD.equalsIgnoreCase(endD)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            checkArgument(isValidTime, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                    MESSAGE_DAILYTIME_CONSTRAINTS));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            checkArgument(isValidDate, String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_DATE_CONSTRAINTS));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            checkArgument(isValidTime, String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_TIME_CONSTRAINTS));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        toAdd \u003d task;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (!model.getLoginStatus()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            throw new CommandException(MESSAGE_LOGIN);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (model.hasTask(toAdd)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        model.addTask(toAdd);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        model.commitTaskBook();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 5,
      "cheahzk": 58,
      "Zeyang-Li": 9,
      "-": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.model.TaskBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " * Clears the Tasketch."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"c\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String MESSAGE_CLEAR_SUCCESS \u003d \"Tasketch has been cleared!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"clear : clear tasks\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            + \"Parameters: none or DATE or before\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            + COMMAND_WORD + \" 18-03-19\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            + COMMAND_WORD + \" 03-19\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            + COMMAND_WORD + \" before\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String COMMAND_PARAMETERS \u003d \"Parameters: none or DATE or before\\n\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String MESSAGE_CLEARDATE_SUCCESS \u003d \"clear %1$d tasks which start at %2$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String MESSAGE_CLEARYD_SUCCESS \u003d \"clear %1$d tasks which have already ended on %2$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final String MESSAGE_LOGIN \u003d \"Please login first\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE \u003d \"Date is not valid\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private String specificDate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private int count \u003d 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private List\u003cTask\u003e tasksToBeDeleted \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Creates an ClearDateCommand to clear tasks on the specified {@code specific_date}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public ClearCommand(String specificDate) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        this.specificDate \u003d specificDate;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Boolean function that help predicate to select specific tasks."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public boolean checkDate(String checkingDate, String dateInTask) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        final String[] specificDateList \u003d checkingDate.split(\"-\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        if (specificDateList.length \u003d\u003d 3) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            if (checkingDate.equals(dateInTask)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        } else if (specificDateList.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            final String[] startDateInString \u003d dateInTask.split(\"-\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            if (specificDateList[0].equals(startDateInString[1]) \u0026\u0026 specificDateList[1].equals(startDateInString[2])) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * check whether is numberic"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @param str"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static boolean isNumberic(String str) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        Pattern pattern \u003d Pattern.compile(\"[0-9]*\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return pattern.matcher(str).matches();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Boolean function that help predicate to check valid date format."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public static boolean isValidDate(String checkingDate) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        final String[] specificDateList \u003d checkingDate.split(\"-\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        if (specificDateList.length \u003d\u003d 3) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            char[] days \u003d specificDateList[0].toCharArray();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            char[] months \u003d specificDateList[1].toCharArray();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            char[] years \u003d specificDateList[2].toCharArray();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            if (days.length \u003d\u003d 2 \u0026\u0026 months.length \u003d\u003d 2 \u0026\u0026 years.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                if (isNumberic(specificDateList[0]) \u0026\u0026 isNumberic(specificDateList[1])"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                        \u0026\u0026 isNumberic(specificDateList[2])) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                    final Integer day \u003d Integer.parseInt(specificDateList[0]);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                    final Integer month \u003d Integer.parseInt(specificDateList[1]);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                    if (day \u003c\u003d 31 \u0026\u0026 day \u003e 0 \u0026\u0026 month \u003e 0 \u0026\u0026 month \u003c\u003d 12) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                        return true;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                        return false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        } else if (specificDateList.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            char[] months \u003d specificDateList[0].toCharArray();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            char[] years \u003d specificDateList[1].toCharArray();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            if (months.length \u003d\u003d 2 \u0026\u0026 years.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                if (isNumberic(specificDateList[0]) \u0026\u0026 isNumberic(specificDateList[1])) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                    final Integer month \u003d Integer.parseInt(specificDateList[0]);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                    if (month \u003e 0 \u0026\u0026 month \u003c\u003d 12) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                        return true;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                        return false;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Boolean function that checks whether the task is ended before today."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public boolean checkBeforeDate(String checkingDate, String dateInTask) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        final String[] specificDateList \u003d checkingDate.split(\"-\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        final String[] taskDateList \u003d dateInTask.split(\"-\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        final Integer day \u003d Integer.parseInt(taskDateList[0]);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        final Integer month \u003d Integer.parseInt(taskDateList[1]);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        final Integer year \u003d Integer.parseInt(taskDateList[2]);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        final Integer specificYear \u003d Integer.parseInt(specificDateList[2]);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        final Integer specificMonth \u003d Integer.parseInt(specificDateList[1]);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        final Integer specificDay \u003d Integer.parseInt(specificDateList[0]);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        if ((specificYear \u003e year)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                || (specificMonth \u003e month \u0026\u0026 specificYear \u003d\u003d year)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                || (specificDay \u003e\u003d day \u0026\u0026 specificYear \u003d\u003d year \u0026\u0026 specificMonth \u003d\u003d month)) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Boolean function that checks whether the task starts from that specific day."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public boolean checkStartDate(Task task) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        final String startDate \u003d task.getStartDate().value;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return checkDate(this.specificDate, startDate);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (!model.getLoginStatus()) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            throw new CommandException(MESSAGE_LOGIN);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        if (this.specificDate.equals(\"\")) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            model.setTaskBook(new TaskBook());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            model.commitTaskBook();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            return new CommandResult(MESSAGE_CLEAR_SUCCESS);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        } else if (this.specificDate.equals(\"before\")) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd-MM-YY\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            calendar.set(Calendar.HOUR_OF_DAY, -24);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            this.specificDate \u003d formatter.format(calendar.getTime());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            for (Task task : lastShownList) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                if (checkBeforeDate(this.specificDate, task.getEndDate().value)) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                    count++;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                    tasksToBeDeleted.add(task);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            model.deleteTaskList(tasksToBeDeleted);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            model.commitTaskBook();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_CLEARYD_SUCCESS, count, specificDate));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        } else if (isValidDate(this.specificDate)) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            if (isValidDate(this.specificDate)) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                for (Task task : lastShownList) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                    if (checkStartDate(task)) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                        count++;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                        tasksToBeDeleted.add(task);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                model.deleteTaskList(tasksToBeDeleted);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                model.commitTaskBook();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                return new CommandResult(String.format(MESSAGE_CLEARDATE_SUCCESS, count, specificDate));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                return new CommandResult(MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 7,
      "cheahzk": 2,
      "BrittonAlone": 1,
      "Zeyang-Li": 190,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/Command.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param history {@code CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * @throws DataConversionException"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public abstract CommandResult execute(Model model, CommandHistory history) throws CommandException,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            IllegalValueException, IOException, DataConversionException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 3,
      "Zeyang-Li": 4,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandFormatString.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENDDATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENDTIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTDATE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTTIME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": " * Contains format string for input of each command in Command Line Interface (CLI)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "public class CommandFormatString {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final String ADD_COMMAND_FORMATSTRING \u003d PREFIX_NAME + \"task_name  \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            + PREFIX_STARTDATE + \"dd-mm-yy  \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            + PREFIX_STARTTIME + \"hh.mm  \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            + PREFIX_ENDDATE + \"dd-mm-yy  \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            + PREFIX_ENDTIME + \"hh.mm  \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            + PREFIX_DESCRIPTION + \"content  \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            + PREFIX_CATEGORY + \"category  \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"tag]\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final String LIST_COMMAND_FORMATSTRING \u003d \"dd-mm-yy\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final String EDIT_COMMAND_FORMATSTRING \u003d PREFIX_NAME + \"task_name  \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            + PREFIX_STARTDATE + \"dd-mm-yy  \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            + PREFIX_STARTTIME + \"hh.mm  \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            + PREFIX_ENDDATE + \"dd-mm-yy  \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            + PREFIX_ENDTIME + \"hh.mm  \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            + PREFIX_DESCRIPTION + \"content  \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final String FIND_COMMAND_FORMATSTRING \u003d \"Keyword\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final String DELETE_COMMAND_FORMATSTRING \u003d \"Index\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final String CLEAR_COMMAND_FORMATSTRING \u003d \"dd-mm-yy\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final String EXPORT_COMMAND_FORMATSTRING \u003d \"filename.json\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final String IMPORT_COMMAND_FORMATSTRING \u003d \"filename.json\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final String MONTH_COMMAND_FORMATSTRING \u003d \"+/-\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final String REMIND_COMMAND_FORMATSTRING \u003d \"start/ddl\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final String REMIND_COMMAND_CATEGORY_FORMATSTRING \u003d \"category start/ddl\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final String FINDACCOUNT_COMMAND_FORMATSTRING \u003d \"Keyword\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final String EDITACCOUNT_COMMAND_FORMATSTRING \u003d \"index\" + PREFIX_USERNAME + \"Username \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            + PREFIX_PASSWORD + \"Password\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final String DELETEACCOUNT_COMMAND_FORMATSTRING \u003d \"Index \";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final String ADDACCOUNT_COMMAND_FORMATSTRING \u003d PREFIX_USERNAME + \"Username \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            + PREFIX_PASSWORD + \"Password\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final String LOGIN_COMMAND_FORMATSTRING \u003d PREFIX_USERNAME + \"Username \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            + PREFIX_PASSWORD + \"Password\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final String TIMELINE_COMMAND_FORMATSTRING \u003d \"dd-mm-yy\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 46,
      "Zeyang-Li": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zeyang-Li": 1,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteAccountCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": " * Deletes an account identified using it\u0027s displayed index from the account list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": " * Raises an exception if last account in the list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "public class DeleteAccountCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteaccount\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"dAc\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            + \": Deletes the account identified by the index number used in the displayed account database.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final String MESSAGE_DELETE_ACCOUNT_SUCCESS \u003d \"Deleted Account: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    private static final String MESSAGE_LOGIN \u003d \"Please login first\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    private final Path filePath \u003d Paths.get(\"data/AccountList.json\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public DeleteAccountCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            throws CommandException, IOException, IllegalValueException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (!model.getLoginStatus()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            throw new CommandException(MESSAGE_LOGIN);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        List\u003cAccount\u003e lastShownList \u003d model.getFilteredAccountList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ACCOUNT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        Account itemToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (itemToDelete.getUsername().toString().equals(model.getLoggedInUser())) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ACCOUNT_DELETION);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        model.deleteAccount(itemToDelete);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        model.exportFilteredAccountList(filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_ACCOUNT_SUCCESS, itemToDelete));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                || (other instanceof DeleteAccountCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteAccountCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 78,
      "Zeyang-Li": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": " * Delete a task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"d\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            + \": Deletes the task identified by the index number used in the displayed task list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String COMMAND_PARAMETERS \u003d \"Parameters: INDEX (must be a positive integer)\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Task: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final String MESSAGE_LOGIN \u003d \"Please login first\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (!model.getLoginStatus()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            throw new CommandException(MESSAGE_LOGIN);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        Task personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        model.deleteTask(personToDelete);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        model.commitTaskBook();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 6,
      "jingchen-z": 11,
      "cheahzk": 1,
      "Zeyang-Li": 2,
      "-": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditAccountCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ACCOUNTS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.account.Password;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.account.Username;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": " * Edits the details of an existing account in the account list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "public class EditAccountCommand extends Command {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editaccount\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"eAc\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the account identified \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            + \"by the index number used in the displayed account database. \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            + \"[\" + PREFIX_USERNAME + \"USERNAME] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            + \"[\" + PREFIX_PASSWORD + \"PASSWORD]\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            + PREFIX_USERNAME + \"jalil\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final String MESSAGE_EDIT_ACCOUNT_SUCCESS \u003d \"Edited Account: %1$s\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ACCOUNT \u003d \"This account already exists in the database.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    private static final String MESSAGE_LOGIN \u003d \"Please Login first\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    private final Path filePath \u003d Paths.get(\"data/AccountList.json\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    private final EditAccountDescriptor editAccountDescriptor;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * @param index of the account in the filtered account list to edit"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * @param editAccountDescriptor details to edit the account with"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public EditAccountCommand(Index index, EditAccountDescriptor editAccountDescriptor) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        requireNonNull(editAccountDescriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        this.editAccountDescriptor \u003d new EditAccountDescriptor(editAccountDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            throws CommandException, IOException, IllegalValueException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (!model.getLoginStatus()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            throw new CommandException(MESSAGE_LOGIN);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        List\u003cAccount\u003e lastShownList \u003d model.getFilteredAccountList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ACCOUNT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        Account accountToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        Account editedAccount \u003d createEditedAccount(accountToEdit, editAccountDescriptor);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (!accountToEdit.isSameAccount(editedAccount) \u0026\u0026 model.hasAccount(editedAccount)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ACCOUNT);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        model.updateAccount(accountToEdit, editedAccount);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        model.updateFilteredAccountList(PREDICATE_SHOW_ALL_ACCOUNTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (accountToEdit.getUsername().toString().equals(model.getLoggedInUser())) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            model.setLoggedInUser(editedAccount.getUsername());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        model.exportFilteredAccountList(filePath);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_ACCOUNT_SUCCESS, editedAccount));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * Creates and returns a {@code Account} with the details of {@code accountToEdit}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * edited with {@code editAccountDescriptor}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    private static Account createEditedAccount(Account accountToEdit, EditAccountDescriptor editAccountDescriptor) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        assert accountToEdit !\u003d null;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        Username updatedUsername \u003d editAccountDescriptor.getUsername().orElse(accountToEdit.getUsername());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        Password updatedPassword \u003d editAccountDescriptor.getPassword().orElse(accountToEdit.getPassword());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return new Account(updatedUsername, updatedPassword);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (!(other instanceof EditAccountCommand)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        EditAccountCommand e \u003d (EditAccountCommand) other;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                \u0026\u0026 editAccountDescriptor.equals(e.editAccountDescriptor);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * Stores the details to edit the account with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * corresponding field value of the account."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static class EditAccountDescriptor {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        private Username username;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        private Password password;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        public EditAccountDescriptor() {}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "         */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        public EditAccountDescriptor(EditAccountDescriptor toCopy) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            setUsername(toCopy.username);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            setPassword(toCopy.password);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "         */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            return CollectionUtil.isAnyNonNull(username, password);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        public void setUsername(Username username) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            this.username \u003d username;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        public Optional\u003cUsername\u003e getUsername() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            return Optional.ofNullable(username);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        public void setPassword(Password password) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            this.password \u003d password;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        public Optional\u003cPassword\u003e getPassword() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            return Optional.ofNullable(password);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            if (!(other instanceof EditAccountDescriptor)) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            EditAccountDescriptor e \u003d (EditAccountDescriptor) other;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            return getUsername().equals(e.getUsername())"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                    \u0026\u0026 getPassword().equals(e.getPassword());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 198,
      "Zeyang-Li": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DATE_CONSTRAINTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_TIME_CONSTRAINTS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENDDATE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENDTIME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTDATE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTTIME;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.logic.commands.checks.CheckValidDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.logic.commands.checks.CheckValidTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Categories;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.task.EndDate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.task.EndTime;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.task.StartDate;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.task.StartTime;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "  * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "  */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"e\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the task identified \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            + \"by the index number used in the displayed task list. \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DECRIPTION] \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            + \"[\" + PREFIX_STARTDATE + \"STRATDATE] \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            + \"[\" + PREFIX_STARTTIME + \"STARTTIME] \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            + \"[\" + PREFIX_ENDDATE + \"ENDDATE] \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            + \"[\" + PREFIX_ENDTIME + \"ENDTIME] \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            + \"[\" + PREFIX_CATEGORY + \"CATEGORY]...\\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            + PREFIX_NAME + \"Study \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            + PREFIX_DESCRIPTION + \"Study for the whole day\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String COMMAND_PARAMETERS \u003d \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DECRIPTION] \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            + \"[\" + PREFIX_STARTDATE + \"STRATDATE] \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            + \"[\" + PREFIX_STARTTIME + \"STARTTIME] \""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            + \"[\" + PREFIX_ENDDATE + \"ENDDATE] \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            + \"[\" + PREFIX_ENDTIME + \"ENDTIME] \""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            + \"[\" + PREFIX_CATEGORY + \"CATEGORY]...\\n\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final String MESSAGE_LOGIN \u003d \"Please login first\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final String MESSAGE_EDIT_TASK_SUCCESS \u003d \"Edited Task: %1$s\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"This task already exists in the Tasketch.\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String MESSAGE_DAILYTIME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            \"Editing daily task, Start Time must be before End Time!\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    private final EditTaskDescriptor editTaskDescriptor;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "      * @param index of the Task in the filtered Task list to edit"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "      * @param editTaskDescriptor details to edit the person with"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "      */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public EditCommand(Index index, EditTaskDescriptor editTaskDescriptor) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        requireNonNull(editTaskDescriptor);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        this.editTaskDescriptor \u003d new EditTaskDescriptor(editTaskDescriptor);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (!model.getLoginStatus()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            throw new CommandException(MESSAGE_LOGIN);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        Task taskToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        Task editedTask \u003d createEditedTask(taskToEdit, editTaskDescriptor);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        boolean isValidDate;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        boolean isValidTime;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        CheckValidDate checkValidDate \u003d new CheckValidDate(editedTask);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        CheckValidTime checkValidTime \u003d new CheckValidTime(editedTask);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        isValidDate \u003d checkValidDate.getCheck();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        isValidTime \u003d checkValidTime.getCheck();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String startD \u003d editedTask.getStartDate().value;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String endD \u003d editedTask.getEndDate().value;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (startD.equalsIgnoreCase(endD)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            checkArgument(isValidTime, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                    MESSAGE_DAILYTIME_CONSTRAINTS));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            checkArgument(isValidDate, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                    MESSAGE_DATE_CONSTRAINTS));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            checkArgument(isValidTime, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                    MESSAGE_TIME_CONSTRAINTS));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (!taskToEdit.isSameTask(editedTask) \u0026\u0026 model.hasTask(editedTask)) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        model.setTask(taskToEdit, editedTask);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        model.commitTaskBook();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_TASK_SUCCESS, editedTask));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * Creates and returns a {@code Task} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    private static Task createEditedTask(Task personToEdit, EditTaskDescriptor editTaskDescriptor) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        Name updatedName \u003d editTaskDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        Description updatedDescription \u003d editTaskDescriptor.getDescription().orElse(personToEdit.getDescription());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        StartDate updatedStartDate \u003d editTaskDescriptor.getStartDate().orElse(personToEdit.getStartDate());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        StartTime updatedStartTime \u003d editTaskDescriptor.getStartTime().orElse(personToEdit.getStartTime());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        EndDate updatedEndDate \u003d editTaskDescriptor.getEndDate().orElse(personToEdit.getEndDate());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        EndTime updatedEndTime \u003d editTaskDescriptor.getEndTime().orElse(personToEdit.getEndTime());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Categories updatedCategories \u003d editTaskDescriptor.getCategories().orElse(personToEdit.getCategories());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editTaskDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        System.out.println(editTaskDescriptor.getName());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return new Task(updatedName, updatedStartDate, updatedStartTime, updatedEndDate, updatedEndTime,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                updatedDescription, updatedCategories, updatedTags);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                \u0026\u0026 editTaskDescriptor.equals(e.editTaskDescriptor);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static class EditTaskDescriptor {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        private Categories categories;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        private EndDate endDate;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        private EndTime endTime;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        private StartDate startDate;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        private StartTime startTime;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        private Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        public EditTaskDescriptor() {}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        public EditTaskDescriptor(Categories categories, Description description, EndDate endDate, EndTime endTime,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                            Name name, StartDate startDate, StartTime startTime, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            super();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            this.categories \u003d categories;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            this.tags \u003d tags;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        public EditTaskDescriptor(EditTaskDescriptor toCopy) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            setCategories(toCopy.categories);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            setEndDate(toCopy.endDate);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            setEndTime(toCopy.endTime);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            setStartDate(toCopy.startDate);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            setStartTime(toCopy.startTime);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, description, endDate, endTime, startDate, startTime, categories);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "         * @return the description"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "         */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "         * @param description the description to set"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "         */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "         * @return the endDate"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "         */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        public Optional\u003cEndDate\u003e getEndDate() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            return Optional.ofNullable(endDate);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "         * @param endDate the endDate to set"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "         */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        public void setEndDate(EndDate endDate) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "         * @return the endTime"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "         */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        public Optional\u003cEndTime\u003e getEndTime() {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            return Optional.ofNullable(endTime);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "         * @param endTime the endTime to set"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "         */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        public void setEndTime(EndTime endTime) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "         * @return the name"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "         */"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "         * @param name2 the name to set"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "         */"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        public void setName(Name name2) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            this.name \u003d name2;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "         * @return the startDate"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "         */"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        public Optional\u003cStartDate\u003e getStartDate() {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            return Optional.ofNullable(startDate);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "         * @param startDate the startDate to set"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "         */"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        public void setStartDate(StartDate startDate) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "         * @return the startTime"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "         */"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        public Optional\u003cStartTime\u003e getStartTime() {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            return Optional.ofNullable(startTime);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "         * @param startTime the startTime to set"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "         */"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        public void setStartTime(StartTime startTime) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "         * @param categories the category to set"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "         */"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        public void setCategories(Categories categories) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            this.categories \u003d categories;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "         * @return the category"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        public Optional\u003cCategories\u003e getCategories() {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            return Optional.ofNullable(categories);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "         * @return the tags"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "         */"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            return \"EditTaskDescriptor [description\u003d\" + description + \", endDate\u003d\" + endDate"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                    + \", endTime\u003d\" + endTime + \", name\u003d\" + name + \", startDate\u003d\" + startDate"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                    + \", startTime\u003d\" + startTime + \", category\u003d\" + categories + \"]\";"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 174,
      "cheahzk": 53,
      "BrittonAlone": 1,
      "Zeyang-Li": 6,
      "-": 126
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Tasketch as requested ...\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 1,
      "cheahzk": 1,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExportCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " * Exports the listed tasks in the taskbook to a json file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "public class ExportCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"export\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String COMMAND_PARAMETERS \u003d \"Parameters: FILENAME (must end with .json) [CATEGORY]\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String COMMAND_EXAMPLE \u003d \"Example: 1. \" + COMMAND_WORD + \" export.json\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            + \"2. \" + COMMAND_WORD + \" academic.json a\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Export the tasks listed \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            + COMMAND_PARAMETERS"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            + COMMAND_EXAMPLE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String MESSAGE_EXPORT_SUCCESS \u003d \"Exported tasks to %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String MESSAGE_EXPORT_A_SUCCESS \u003d \"Exported all academic tasks to %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String MESSAGE_EXPORT_C_SUCCESS \u003d \"Exported all CCA tasks to %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String MESSAGE_EXPORT_E_SUCCESS \u003d \"Exported all entertainment tasks to %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String MESSAGE_EXPORT_R_SUCCESS \u003d \"Exported all errand tasks to %1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String MESSAGE_EXPORT_O_SUCCESS \u003d \"Exported all other tasks to %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"Export failed!\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String MESSAGE_CATEGORY_FAILURE \u003d \"Invalid category!\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String MESSAGE_FAILURE_EMPTY_AB \u003d \"There is nothing to export!\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final String MESSAGE_LOGIN \u003d \"Please login first\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private final Path filePath;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private String category \u003d \"not specified category\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public ExportCommand(Path filePath) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public ExportCommand(Path filePath, String category) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        if (category.equals(\"a\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            return getCommandResult(model, MESSAGE_EXPORT_A_SUCCESS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        } else if (category.equals(\"c\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            return getCommandResult(model, MESSAGE_EXPORT_C_SUCCESS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        } else if (category.equals(\"e\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            return getCommandResult(model, MESSAGE_EXPORT_E_SUCCESS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        } else if (category.equals(\"r\")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            return getCommandResult(model, MESSAGE_EXPORT_R_SUCCESS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        } else if (category.equals(\"o\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            return getCommandResult(model, MESSAGE_EXPORT_O_SUCCESS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        } else if (category.equals(\"not specified category\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            return getCommandResult(model, MESSAGE_EXPORT_SUCCESS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            return new CommandResult(MESSAGE_CATEGORY_FAILURE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private CommandResult getCommandResult(Model model, String messageExportESuccess) throws CommandException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (!model.getLoginStatus()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            throw new CommandException(MESSAGE_LOGIN);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        if (!category.equals(\"not specified category\")) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            Predicate\u003cTask\u003e predicate \u003d task -\u003e meetRequirement(task);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            model.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            model.exportFilteredTaskBook(filePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE_EMPTY_AB);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return new CommandResult(String.format(messageExportESuccess, filePath));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * To check whether the task is belong to that category."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private boolean meetRequirement(Task task) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        String cateInTask \u003d task.getCategories().toString();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        if (cateInTask.equals(category)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        // same object"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        // handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        if (!(other instanceof ExportCommand)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        // checks state"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        ExportCommand e \u003d (ExportCommand) other;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return filePath.equals(e.filePath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 5,
      "Zeyang-Li": 117
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindAccountCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.account.UsernameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": " * Finds and lists all accounts in account list whose username contains any of the argument keywords."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "public class FindAccountCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findaccount\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"fAc\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all accounts whose usernames contain any of \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" jalil kelvin\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    private final UsernameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public FindAccountCommand(UsernameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        model.updateFilteredAccountList(predicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        List\u003cAccount\u003e foundAccounts \u003d model.getFilteredAccountList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        String messageOutput \u003d getMessageOutput(model.getFilteredAccountList().size(), foundAccounts);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return new CommandResult(messageOutput);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                || (other instanceof FindAccountCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindAccountCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    private String getMessageOutput (int numAccounts, List\u003cAccount\u003e accounts) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        String messageOutput \u003d \"\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        messageOutput +\u003d String.format(Messages.MESSAGE_ACCOUNTS_FOUND_OVERVIEW, numAccounts) + \"\\n\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        messageOutput +\u003d \"Accounts: \\n\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        int counter \u003d 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        for (Account account : accounts) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            counter++;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            messageOutput +\u003d counter + \". \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                    +"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                    account.getUsername()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                    + \"\\n\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return messageOutput;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 74,
      "Zeyang-Li": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import seedu.address.model.task.TaskContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": " * Finds and lists all tasks in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"f\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all tasks whose names contain any of \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" cs2101 cs2113t\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String COMMAND_PARAMETERS \u003d \"Parameters\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" cs2101 cs2113t\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final String MESSAGE_LOGIN \u003d \"Please login first\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private final TaskContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public FindCommand(TaskContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (!model.getLoginStatus()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            throw new CommandException(MESSAGE_LOGIN);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        model.updateFilteredTaskList(predicate); // Updates the shown list"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                String.format(Messages.MESSAGE_TASK_LISTED_OVERVIEW, model.getFilteredTaskList().size()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 6,
      "jingchen-z": 8,
      "cheahzk": 3,
      "Zeyang-Li": 4,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HistoryCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": " * Show command history."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"history\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"h\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(history);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        ArrayList\u003cString\u003e previousCommands \u003d new ArrayList\u003c\u003e(history.getHistory()); // show history"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        if (previousCommands.isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(MESSAGE_NO_HISTORY);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(previousCommands);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jingchen-z": 4,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ImportCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import static seedu.address.commons.util.FileUtil.isFileExists;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.model.ReadOnlyTaskBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " * Import the tasks to the task book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "public class ImportCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"import\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String COMMAND_PARAMETERS \u003d \"Parameters: FILENAME (must end with .json)\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String COMMAND_EXAMPLE \u003d \"Example: \" + COMMAND_WORD + \" import.json\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Import the tasks in the file specified to \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            + \"Tasketch.\\n\" + COMMAND_PARAMETERS + COMMAND_EXAMPLE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String MESSAGE_IMPORT_SUCCESS \u003d \"Imported %1$s task(s).\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final String MESSAGE_LOGIN \u003d \"Please login first\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private static final String MESSAGE_FAILURE \u003d \"Import failed! Error: %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private static final String MESSAGE_INVALID_LIST_SIZE \u003d \"Invalid list size.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private static final String MESSAGE_FILE_NOT_FOUND \u003d \"File not found!\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private final Path filePath;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public ImportCommand(Path filePath) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (!model.getLoginStatus()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            throw new CommandException(MESSAGE_LOGIN);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        ReadOnlyTaskBook readOnlyTasksBook \u003d model.getTaskBook();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        ObservableList\u003cTask\u003e taskList \u003d readOnlyTasksBook.getTaskList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        int initialNumberOfPersons \u003d taskList.size();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        if (!isFileExists(filePath)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            throw new CommandException(MESSAGE_FILE_NOT_FOUND);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            model.importTasksFromTaskBook(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_FAILURE, ioe));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_FAILURE, dce));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        int finalNumberOfTasks \u003d taskList.size();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        int tasksImported \u003d calculateImportedEntries(initialNumberOfPersons, finalNumberOfTasks);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        model.commitTaskBook();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_IMPORT_SUCCESS, tasksImported));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Returns the number of entries imported to the address book."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private static int calculateImportedEntries(int initialListSize, int finalListSize) throws CommandException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        requireNonNull(initialListSize);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        requireNonNull(finalListSize);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        int importedEntries \u003d finalListSize - initialListSize;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        if (!isValidSize(importedEntries)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_FAILURE, MESSAGE_INVALID_LIST_SIZE));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return importedEntries;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private static boolean isValidSize(int size) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return size \u003e\u003d 0;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        // same object"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        // handles nulls"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        if (!(other instanceof ImportCommand)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        // checks state"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        ImportCommand e \u003d (ImportCommand) other;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return filePath.equals(e.filePath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 5,
      "Zeyang-Li": 104
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListAccountsCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ACCOUNTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": " * Lists all accounts in the account list to the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "public class ListAccountsCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listaccounts\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"lAc\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all accounts\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        model.updateFilteredAccountList(PREDICATE_SHOW_ALL_ACCOUNTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        List\u003cAccount\u003e listOfAccounts \u003d model.getFilteredAccountList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        String outputList \u003d getListOfAccounts(listOfAccounts);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return new CommandResult(outputList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    private String getListOfAccounts (List\u003cAccount\u003e accounts) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        String outputList \u003d \"\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        outputList +\u003d MESSAGE_SUCCESS + \"\\n\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        outputList +\u003d \"Accounts: \\n\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        for (Account account : accounts) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            outputList +\u003d index + \". \" + account.getUsername() + \"\\n\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return outputList;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 47,
      "Zeyang-Li": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import static seedu.address.logic.commands.ClearCommand.MESSAGE_INVALID_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Lists all tasks in the task book to the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"l\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final String MESSAGE_LOGIN \u003d \"Please login first\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"list : list specified tasks\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            + \"1. no parameters: list        list all tasks\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            + \"2. td: list td       list all the tasks of today\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            + \"3. DATE: list 25-03-19    \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            + \"list all the tasks on 25th March, 2019\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            + \"4. category: list a/c/e/r/o\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public static final String MESSAGE_SUCCESS1 \u003d \"Listed all tasks\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public static final String MESSAGE_SUCCESS2 \u003d \"Listed all tasks of today.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public static final String MESSAGE_SUCCESS3 \u003d \"Listed tasks on %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public static final String MESSAGE_SUCCESS4 \u003d \"Listed all tasks of %1$s category\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String COMMAND_PARAMETERS \u003d \"Parameters:\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            + \"1. no parameters: list        list all tasks\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            + \"2. td: list td       list all the tasks of today\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            + \"3. DATE: list 25-03-19    \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            + \"list all the tasks which are before/after 25th March, 2019\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            + \"4. category: list a      list all tasks of academic category\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    private String[] arguments;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    private String specifiedDate;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    private String specifiedCategory;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public ListCommand(String[] arguments) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        this.arguments \u003d arguments;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (!model.getLoginStatus()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            throw new CommandException(MESSAGE_LOGIN);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        if (arguments[0].equals(\"\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        } else if (arguments[0].equals(\"td\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            Predicate\u003cTask\u003e predicate \u003d task -\u003e meetRequirementTd(task);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            model.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            //ObservableList\u003cTask\u003e test \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS2);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        } else if (isCategory(arguments[0])) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            specifiedCategory \u003d arguments[0];"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            Predicate\u003cTask\u003e predicate \u003d task -\u003e meetRequirementCategory(task);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            model.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS4, categoryString(specifiedCategory)));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        } else if (ClearCommand.isValidDate(arguments[0])) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            specifiedDate \u003d arguments[0];"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            Predicate\u003cTask\u003e predicate \u003d task -\u003e meetRequirementDate(task);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            model.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS3, specifiedDate));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     * A boolean function used to decide predicate for list td command."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    private boolean meetRequirementTd(Task task) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        Date currentDate \u003d new Date();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd-MM-YY\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        String dateInString \u003d formatter.format(currentDate);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        final String taskDate \u003d task.getStartDate().value;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        if (taskDate.equals(dateInString)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     * A boolean function used to decide predicate for list category command."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    private boolean isCategory(String str) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        if (str.equals(\"a\") || str.equals(\"c\") || str.equals(\"e\") || str.equals(\"r\") || str.equals(\"o\")) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     * Return a string that to be printed."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    private String categoryString(String str) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        if (str.equals(\"a\")) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            return \"academic\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        } else if (str.equals(\"c\")) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            return \"CCA\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        } else if (str.equals(\"e\")) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            return \"entertainment\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        } else if (str.equals(\"r\")) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            return \"errand\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            return \"other\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     * A boolean function used to decide predicate for list DATE command."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    private boolean meetRequirementDate(Task task) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        String[] dateInfo \u003d specifiedDate.split(\"-\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        if (dateInfo.length \u003d\u003d 3) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            final String taskDate \u003d task.getStartDate().value;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            if (taskDate.equals(specifiedDate)) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        } else if (dateInfo.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            final String taskDate \u003d task.getStartDate().value;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            String[] splitDate \u003d taskDate.split(\"-\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            if (splitDate[1].equals(dateInfo[0]) \u0026\u0026 splitDate[2].equals(dateInfo[1])) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     * A boolean function used to decide predicate for list category command."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    private boolean meetRequirementCategory(Task task) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        String taskCategory \u003d task.getCategories().value;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        if (taskCategory.equals(specifiedCategory)) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 8,
      "cheahzk": 4,
      "BrittonAlone": 136,
      "Zeyang-Li": 4,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/LoginCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ACCOUNTS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.account.UsernameMatchPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author Davindran"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": " * Logs in account into Stock List."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "public class LoginCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"login\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":Please Login your account into Tasketch. \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            + PREFIX_USERNAME + \"USERNAME \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            + PREFIX_PASSWORD + \"PASSWORD\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            + PREFIX_USERNAME + \"admin \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            + PREFIX_PASSWORD + \"admin\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Logged in: %1$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final String MESSAGE_FAIL \u003d \"Wrong username/password. Try again\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final String MESSAGE_ALREADY_LOGGED_IN \u003d \"Already logged in as: %1$s\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    private final UsernameMatchPredicate predicate;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    private final String password;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public LoginCommand(UsernameMatchPredicate predicate, Account account) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        this.password \u003d account.getPassword().toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            throws CommandException, IOException, DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (model.getLoginStatus()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            throw new CommandException(String.format"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                    (MESSAGE_ALREADY_LOGGED_IN, model.getLoggedInUser()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        model.updateFilteredAccountList(predicate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        List\u003cAccount\u003e matchedAccounts \u003d model.getFilteredAccountList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        modifyLoginStatus(matchedAccounts, password, model);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        //model.importAccountsFromAccountList(filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (!model.getLoginStatus()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            throw new CommandException(MESSAGE_FAIL);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        model.updateFilteredAccountList(PREDICATE_SHOW_ALL_ACCOUNTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, model.getLoggedInUser()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                || (other instanceof LoginCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                \u0026\u0026 predicate.equals(((LoginCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * sets logged in user in the model if passwords match"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    private void modifyLoginStatus (List\u003cAccount\u003e matchedAccounts, String givenPassword, Model model) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        for (Account account : matchedAccounts) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            if (account.getPassword().toString().equals(givenPassword)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                model.setLoggedInUser(account.getUsername());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 93,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/LoginStatusCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": " * Logs out account from Stock List."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "public class LoginStatusCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"loginstatus\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Logged in as: %1$s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final String MESSAGE_NOT_LOGGED_IN \u003d \"Not logged in\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (!model.getLoginStatus()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_LOGGED_IN);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, model.getLoggedInUser()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 30,
      "Zeyang-Li": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/LogoutCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": " * Logs out account from Stock List."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "public class LogoutCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"logout\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Logged out: %1$s\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final String MESSAGE_ALREADY_LOGGED_OUT \u003d \"Already logged out\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (!model.getLoginStatus()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            throw new CommandException(MESSAGE_ALREADY_LOGGED_OUT);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        String loggedOutUser \u003d model.getLoggedInUser();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        model.setLoggedOutStatus();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, loggedOutUser));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/MonthCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": " * Month command will change the current month shown on calendar."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "public class MonthCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"month\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"m\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Change the current calendar to \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            + \"next month or previous month.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            + \"Parameters: [+ / -]...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" +\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String COMMAND_PARAMETERS \u003d \"Parameters: [+ / -]...\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Viewing %s month\u0027s calendar!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public static final String MESSAGE_ILLEGAL \u003d \"Please type in + or - to indicate!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final String MESSAGE_LOGIN \u003d \"Please login first\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private String parameter \u003d \" \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public MonthCommand(String c) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        c \u003d c.replaceAll(\"\\\\s\", \"\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        //System.out.println(c);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        if (c.equals(\"+\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            this.parameter \u003d \"next\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        } else if (c.equals(\"-\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            this.parameter \u003d \"previous\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        } else if (c.replaceAll(\"\\\\s\", \"\").equals(\"\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            this.parameter \u003d \"this\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            parameter \u003d MESSAGE_ILLEGAL;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        if (parameter.equals(MESSAGE_ILLEGAL)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            return new CommandResult(MESSAGE_ILLEGAL);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (!model.getLoginStatus()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            throw new CommandException(MESSAGE_LOGIN);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        model.setMonth(parameter);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, parameter));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        return other \u003d\u003d this; // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 7,
      "jingchen-z": 56,
      "Zeyang-Li": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RedoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_DAYS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"r\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final String MESSAGE_LOGIN \u003d \"Please login first\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (!model.getLoginStatus()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            throw new CommandException(MESSAGE_LOGIN);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        if (!model.canRedoTaskBook()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        model.redoTaskBook();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        model.updateFilteredDayList(PREDICATE_SHOW_ALL_DAYS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 5,
      "cheahzk": 2,
      "Zeyang-Li": 6,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RemindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": " * Set a reminder of the nearest tasks for user, those tasks can be specified by task category."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "public class RemindCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remind\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"remind: give reminds on specified requirement\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            + \"1. start/ddl: Tasketch will give a reminding task list ordered by task start time or deadline.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            + \"2. a/e/c/r/o start/ddl: Tasketch will give a reminding task list of specified category\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            + \"of tasks ordered by start time or deadline.\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String COMMAND_PARAMETERS \u003d \"Parameters:\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            + \"1. start/ddl: Tasketch will give a reminding task list ordered by task start time or deadline.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            + \"2. a/e/c/r/o start/ddl: Tasketch will give a reminding task list of specified category\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            + \"of tasks ordered by start time or deadline.\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public static final String MESSAGE_REMIND_SUCCESS \u003d \"Reminder shown!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final String MESSAGE_LOGIN \u003d \"Please login first\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    private String arguments;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    private ObservableList\u003cTask\u003e shownTaskList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     * Constructor of RemindCommand."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public RemindCommand(String userInput) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        this.arguments \u003d userInput;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     * Access function of arguments."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public String getArguments() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        return this.arguments;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     * A boolean function to verify user\u0027s input"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    private boolean isValidCategory(String input) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        if (!input.equals(\"a\") \u0026\u0026 !input.equals(\"e\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                \u0026\u0026 !input.equals(\"c\") \u0026\u0026 !input.equals(\"r\") \u0026\u0026 !input.equals(\"o\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public ObservableList\u003cTask\u003e getShownTaskList() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        return this.shownTaskList;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     * A boolean function to verify user\u0027s input"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    private boolean isValidTime(String input) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        if (!input.equals(\"start\") \u0026\u0026 !input.equals(\"ddl\")) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     * A predicate function decide which task to choose"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    private boolean meetRequirement(Task task, String givenCategory) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        if (task.getCategories().value.equals(givenCategory)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (!model.getLoginStatus()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            throw new CommandException(MESSAGE_LOGIN);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        String trimmedArguments \u003d arguments.trim();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        String[] splitedInput \u003d trimmedArguments.split(\"\\\\s\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        if (splitedInput.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            if (!isValidTime(splitedInput[0])) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            } else if (splitedInput[0].equals(\"start\")) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                //model.sortByStart();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                model.sortRemindListByStart();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                //model.sortByEnd();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                model.sortRemindListByEnd();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            model.commitTaskBook();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        } else if (splitedInput.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            if (!isValidCategory(splitedInput[0]) || !isValidTime(splitedInput[1])) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                if (splitedInput[1].equals(\"start\")) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                    model.sortRemindListByStart();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                    model.filterRemindList(splitedInput[0]);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                    model.sortRemindListByEnd();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                    model.filterRemindList(splitedInput[0]);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            model.commitTaskBook();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        return new CommandResult(MESSAGE_REMIND_SUCCESS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 6,
      "BrittonAlone": 131,
      "Zeyang-Li": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ShowTimeCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_DAYS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.day.Day;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Lists all tasks in the task book to the user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class ShowTimeCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"showtime\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"st\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"showtime : show each category\u0027s time of specified days\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            + \"1. no parameters: showtime        show all days\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            + \"2. DATE: showtime 25-03-19    \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            + \"show the day 25th March, 2019\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final String MESSAGE_LOGIN \u003d \"Please login first\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String MESSAGE_SUCCESS1 \u003d \"Shown all days\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String MESSAGE_SUCCESS2 \u003d \"Listed day on %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String COMMAND_PARAMETERS \u003d \"Parameters:\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            + \"1. no parameters: showtime        show all days\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            + \"2. DATE: showtime 25-03-19    \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            + \"show the day 25th March, 2019\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private String[] arguments;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private String specifiedDate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public ShowTimeCommand(String[] arguments) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.arguments \u003d arguments;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * A boolean function used to decide predicate for list DATE command."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private boolean meetRequirementDate(Day day) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String[] dateInfo \u003d specifiedDate.split(\"-\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (dateInfo.length \u003d\u003d 3) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            final String taskDate \u003d day.getDate().value;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            if (taskDate.equals(specifiedDate)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        } else if (dateInfo.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            final String taskDate \u003d day.getDate().value;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            String[] splitDate \u003d taskDate.split(\"-\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            if (splitDate[0].equals(dateInfo[0]) \u0026\u0026 splitDate[1].equals(dateInfo[1])) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (!model.getLoginStatus()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            throw new CommandException(MESSAGE_LOGIN);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (arguments[0].equals(\"\")) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            model.updateFilteredDayList(PREDICATE_SHOW_ALL_DAYS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            specifiedDate \u003d arguments[0];"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            Predicate\u003cDay\u003e predicate \u003d day -\u003e meetRequirementDate(day);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            model.updateFilteredDayList(predicate);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS2, specifiedDate));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 8,
      "cheahzk": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/TimelineCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": " * This is the Timeline command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "public class TimelineCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"timeline\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"time\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Arrange the tasks of the specific date \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            + \"into a timeline and displays them according to categories.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            + \"Parameters: [date]...\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"01-04-19\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String COMMAND_PARAMETERS \u003d \"Parameters: [date]...\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"01-04-19\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Timeline on %1$s has been successfully arranged!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public static final String MESSAGE_ILLEGAL \u003d \"Incorrect date format! [dd-mm-yy]\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public static final String MESSAGE_ILLEGAL_DAY \u003d \"Incorrect day format! [dd-mm-yy]\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public static final String MESSAGE_ILLEGAL_VALUE \u003d \"Incorrect date value! [dd-mm-yy]\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final String MESSAGE_LOGIN \u003d \"Please login first\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private String parameter;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public TimelineCommand(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        this.parameter \u003d args;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * This filters the tasks."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * @param task"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * @param d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private boolean filter(Task task, String d) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        if (task.getStartDate().value.equals(d)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (!model.getLoginStatus()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            throw new CommandException(MESSAGE_LOGIN);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        Date today \u003d new Date();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd-MM-YY\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        String formattedToday \u003d formatter.format(today);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        //System.out.println(formattedToday);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        parameter \u003d parameter.replaceAll(\"\\\\s+\", \"\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        if (parameter.length() !\u003d 8 \u0026\u0026 !parameter.equals(\"\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            throw new ParseException(MESSAGE_ILLEGAL);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            validDate();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            throw new ParseException(e.getMessage());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        if (parameter.equals(\"\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            Predicate\u003cTask\u003e predicate \u003d task -\u003e filter(task, formattedToday);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            //model.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, formattedToday));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            Predicate\u003cTask\u003e predicate \u003d task -\u003e filter(task, this.parameter);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            //model.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, parameter));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * Checks whether the date entered is valid."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private boolean validDate() throws CommandException, ParseException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        boolean check \u003d true;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        if (parameter.equals(\"\")) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            //System.out.println(parameter.split(\"-\")[0].replaceAll(\"0\", \"\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            int day \u003d Integer.parseInt(parameter.split(\"-\")[0].replaceAll(\"0\", \"\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            //System.out.println(day);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            //System.out.println(parameter.split(\"-\")[1]);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            int month \u003d Integer.parseInt(parameter.split(\"-\")[1].replaceAll(\"0\", \"\"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            //System.out.println(parameter.split(\"-\")[2]);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            int year \u003d Integer.parseInt(parameter.split(\"-\")[2].replaceAll(\"0\", \"\"));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            if (year \u003e 25) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                throw new CommandException(\"Oops do not make plans so early!\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            year +\u003d 2000;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            if (month \u003c 0 || month \u003e 12) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                throw new CommandException(\"Incorrect month number! month should be within 1-12.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            switch (month) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            case 1:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                if (day \u003c 0 || day \u003e 31) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                    check \u003d false;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            case 2:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                if (year % 4 \u003d\u003d 0 \u0026\u0026 year % 100 !\u003d 0 || year % 400 \u003d\u003d 0) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                    if (day \u003c 0 || day \u003e 29) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                        check \u003d false;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                    if (day \u003c 0 || day \u003e 28) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                        check \u003d false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            case 3:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                if (day \u003c 0 || day \u003e 31) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                    check \u003d false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            case 4:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                if (day \u003c 0 || day \u003e 30) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                    check \u003d false;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            case 5:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                if (day \u003c 0 || day \u003e 31) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                    check \u003d false;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            case 6:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                if (day \u003c 0 || day \u003e 30) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                    check \u003d false;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            case 7:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                if (day \u003c 0 || day \u003e 31) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                    check \u003d false;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            case 8:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                if (day \u003c 0 || day \u003e 31) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                    check \u003d false;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            case 9:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                if (day \u003c 0 || day \u003e 30) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                    check \u003d false;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            case 10:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                if (day \u003c 0 || day \u003e 31) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                    check \u003d false;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            case 11:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                if (day \u003c 0 || day \u003e 30) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                    check \u003d false;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            case 12:"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                if (day \u003c 0 || day \u003e 31) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                    check \u003d false;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                check \u003d false;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            if (!check) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                throw new ParseException(\"Incorrect day value! [dd-mm-yy]\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            throw new ParseException(\"Incorrect date value! [dd-mm-yy]\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 6,
      "jingchen-z": 184,
      "Zeyang-Li": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_DAYS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previous state."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"u\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final String MESSAGE_LOGIN \u003d \"Please login first\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (!model.getLoginStatus()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            throw new CommandException(MESSAGE_LOGIN);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        if (!model.canUndoTaskBook()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        model.undoTaskBook();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        model.updateFilteredDayList(PREDICATE_SHOW_ALL_DAYS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 5,
      "cheahzk": 2,
      "Zeyang-Li": 5,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/checks/CheckValidDate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.logic.commands.checks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Checking whether endDate of a task is after startDate."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class CheckValidDate {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private Task task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private boolean isValidDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public CheckValidDate(Task task) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.isValidDate \u003d isValidDate(task);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean getCheck() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return isValidDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns true if endDate of a task is after startDate."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private boolean isValidDate(Task task) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String[] dateS \u003d task.getStartDate().value.split(\"-\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String[] dateE \u003d task.getEndDate().value.split(\"-\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (Integer.parseInt(dateS[1]) \u003e Integer.parseInt(dateE[1])) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (Integer.parseInt(dateS[0]) \u003e Integer.parseInt(dateE[0])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                \u0026\u0026 Integer.parseInt(dateS[1]) \u003e Integer.parseInt(dateE[1])) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (Integer.parseInt(dateS[2]) \u003e Integer.parseInt(dateE[2])) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/checks/CheckValidTime.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.logic.commands.checks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Checking whether endTime of a task is after startTime."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class CheckValidTime {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private Task task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private boolean isValidTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public CheckValidTime(Task task) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.isValidTime \u003d isValidTime(task);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean getCheck() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return isValidTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns true if endTime of a task is after startTime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean isValidTime(Task task) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String time \u003d task.getEndTime().value;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        double end \u003d task.getEndTime().getTimeDouble(time);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        time \u003d task.getStartTime().value;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        double start \u003d task.getStartTime().getTimeDouble(time);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (end \u003e start) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddAccountCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.logic.commands.AddAccountCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.account.Password;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.account.Username;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": " * Parses input arguments and creates a new AddAccountCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "public class AddAccountCommandParser implements Parser\u003cAddAccountCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddAccountCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * and returns an AddAccountCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public AddAccountCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_USERNAME, PREFIX_PASSWORD);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_USERNAME, PREFIX_PASSWORD)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddAccountCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        Username username \u003d ParserUtil.parseUsername(argMultimap.getValue(PREFIX_USERNAME).get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        Password password \u003d ParserUtil.parsePassword(argMultimap.getValue(PREFIX_PASSWORD).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        Account account \u003d new Account(username, password);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return new AddAccountCommand(account);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENDDATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENDTIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTDATE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTTIME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Categories;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.EndDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.EndTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.StartDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.StartTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_STARTDATE, PREFIX_STARTTIME, PREFIX_ENDDATE,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                        PREFIX_ENDTIME, PREFIX_DESCRIPTION, PREFIX_CATEGORY, PREFIX_TAG);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_STARTDATE, PREFIX_STARTTIME, PREFIX_ENDDATE,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                PREFIX_ENDTIME, PREFIX_DESCRIPTION, PREFIX_CATEGORY)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        StartDate startDate \u003d ParserUtil.parseStartDate(argMultimap.getValue(PREFIX_STARTDATE).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        StartTime startTime \u003d ParserUtil.parseStartTime(argMultimap.getValue(PREFIX_STARTTIME).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        EndDate endDate \u003d ParserUtil.parseEndDate(argMultimap.getValue(PREFIX_ENDDATE).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        EndTime endTime \u003d ParserUtil.parseEndTime(argMultimap.getValue(PREFIX_ENDTIME).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Categories categories \u003d ParserUtil.parseCategories(argMultimap.getValue(PREFIX_CATEGORY).get());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Task task \u003d new Task(name, startDate, startTime, endDate, endTime, description, categories, tagList);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return new AddCommand(task);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 26,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ClearCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " * Used for parsing user input for clear command"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "public class ClearCommandParser implements Parser\u003cClearCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Parse function"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public ClearCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        String[] arguments \u003d userInput.trim().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        if (arguments.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            if (arguments[0].equals(\"\")) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                return new ClearCommand(\"\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            } else if (arguments[0].equals(\"before\")) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                return new ClearCommand(\"before\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            } else if (isValidDateFormat(arguments[0])) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                return new ClearCommand(arguments[0]);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ClearCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ClearCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Check if user input is of the correct format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public boolean isValidDateFormat(String str) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        String[] strSplited \u003d str.split(\"-\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        if (strSplited.length \u003d\u003d 2 || strSplited.length \u003d\u003d 3) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zeyang-Li": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final Prefix PREFIX_STARTDATE \u003d new Prefix(\"sd/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final Prefix PREFIX_STARTTIME \u003d new Prefix(\"st/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final Prefix PREFIX_ENDDATE \u003d new Prefix(\"ed/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final Prefix PREFIX_ENDTIME \u003d new Prefix(\"et/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final Prefix PREFIX_CATEGORY \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final Prefix PREFIX_PASSWORD \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final Prefix PREFIX_USERNAME \u003d new Prefix(\"u/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 2,
      "cheahzk": 6,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteAccountCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.logic.commands.DeleteAccountCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "public class DeleteAccountCommandParser implements Parser\u003cDeleteAccountCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteAccountCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * and returns an DeleteAccountCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public DeleteAccountCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            return new DeleteAccountCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteAccountCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": " * Delete command parser."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jingchen-z": 1,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditAccountCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.logic.commands.EditAccountCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.logic.commands.EditAccountCommand.EditAccountDescriptor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "public class EditAccountCommandParser implements Parser\u003cEditAccountCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditAccountCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * and returns an EditAccountCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public EditAccountCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_USERNAME, PREFIX_PASSWORD);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditAccountCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                    pe);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        EditAccountDescriptor editAccountDescriptor \u003d new EditAccountDescriptor();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (argMultimap.getValue(PREFIX_USERNAME).isPresent()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            editAccountDescriptor.setUsername(ParserUtil.parseUsername(argMultimap.getValue(PREFIX_USERNAME).get()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PASSWORD).isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            editAccountDescriptor.setPassword(ParserUtil.parsePassword(argMultimap.getValue(PREFIX_PASSWORD).get()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (!editAccountDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            throw new ParseException(EditAccountCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return new EditAccountCommand(index, editAccountDescriptor);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENDDATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENDTIME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTDATE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTTIME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DESCRIPTION,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                        PREFIX_STARTDATE, PREFIX_STARTTIME, PREFIX_ENDDATE, PREFIX_ENDTIME, PREFIX_CATEGORY,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                        PREFIX_TAG);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        EditTaskDescriptor editPersonDescriptor \u003d new EditTaskDescriptor();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            editPersonDescriptor.setDescription(ParserUtil.parseDescription"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                                (argMultimap.getValue(PREFIX_DESCRIPTION).get()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (argMultimap.getValue(PREFIX_STARTDATE).isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            editPersonDescriptor.setStartDate(ParserUtil.parseStartDate"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                                (argMultimap.getValue(PREFIX_STARTDATE).get()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (argMultimap.getValue(PREFIX_STARTTIME).isPresent()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            editPersonDescriptor.setStartTime(ParserUtil.parseStartTime(argMultimap.getValue(PREFIX_STARTTIME).get()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ENDDATE).isPresent()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            editPersonDescriptor.setEndDate(ParserUtil.parseEndDate(argMultimap.getValue(PREFIX_ENDDATE).get()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ENDTIME).isPresent()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            editPersonDescriptor.setEndTime(ParserUtil.parseEndTime(argMultimap.getValue(PREFIX_ENDTIME).get()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CATEGORY).isPresent()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            editPersonDescriptor.setCategories(ParserUtil.parseCategories(argMultimap.getValue(PREFIX_CATEGORY).get()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 23,
      "cheahzk": 8,
      "-": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ExportCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " * Parses input arguments and creates a new {@code ExportCommand} object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "public class ExportCommandParser implements Parser\u003cExportCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String MESSAGE_INVALID_CATEGORY_FORMAT \u003d \"Invalid category!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String MESSAGE_INVALID_FILETYPE_FORMAT \u003d \"Invalid file type!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Parses the given {@code args} of arguments in the context of the {@code ImportCommand}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * and returns a {@code ImportCommand} object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public ExportCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        requireNonNull(userInput);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        String[] args \u003d userInput.trim().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        if (args.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            if (isValidFileType(args[0])) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                if (args[1].equals(\"a\") || args[1].equals(\"c\") || args[1].equals(\"e\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                        || args[1].equals(\"r\") || args[1].equals(\"o\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                        Path filePath \u003d ParserUtil.parseFilename(args[0]);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                        return new ExportCommand(filePath, args[1]);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                    } catch (ParseException pe) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                        throw new ParseException("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                    throw new ParseException("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                            String.format(MESSAGE_INVALID_CATEGORY_FORMAT, ExportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_FILETYPE_FORMAT, ExportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        } else if (args.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            if (isValidFileType(args[0])) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                    Path filePath \u003d ParserUtil.parseFilename(args[0]);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                    return new ExportCommand(filePath);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                } catch (ParseException pe) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                    throw new ParseException("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                            String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            } else if (args[0].equals(\"\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_FILETYPE_FORMAT, ExportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Check whether the file type is json"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public boolean isValidFileType(String input) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        Pattern p \u003d Pattern.compile(\".*json.*\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        Matcher m \u003d p.matcher(input);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        boolean isValid \u003d m.matches();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return isValid;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zeyang-Li": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindAccountCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.logic.commands.FindAccountCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.account.UsernameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "public class FindAccountCommandParser implements Parser\u003cFindAccountCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindAccountCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * and returns an FindAccountCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public FindAccountCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindAccountCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return new FindAccountCommand(new UsernameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import seedu.address.model.task.TaskContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": " * Parses the given {@code String} of arguments."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "public class FindCommandParser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        return new FindCommand(new TaskContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jingchen-z": 4,
      "-": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ImportCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " * Parses input arguments and creates a new ImportCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "public class ImportCommandParser implements Parser\u003cImportCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Parses the given {@code args} of arguments in the context of the {@code ImportCommand}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * and returns a {@code ImportCommand} object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public ImportCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            Path filePath \u003d ParserUtil.parseFilename(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            return new ImportCommand(filePath);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zeyang-Li": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ListCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": " * Used for parsing user input for list command"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "public class ListCommandParser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     * Parse function"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public Command parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        String[] arguments \u003d userInput.trim().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        if (arguments.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            if (arguments[0].equals(\"\") || arguments[0].equals(\"td\") || isValidDateFormat(arguments[0])"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                    || isCategory(arguments[0])) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                return new ListCommand(arguments);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     * Check if user input is of the correct format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public boolean isValidDateFormat(String str) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        String[] strSplit \u003d str.split(\"-\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        if (strSplit.length \u003d\u003d 2 || strSplit.length \u003d\u003d 3) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     * Check if user input is of the correct format"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    private boolean isCategory(String str) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        if (str.equals(\"a\") || str.equals(\"c\") || str.equals(\"e\") || str.equals(\"r\") || str.equals(\"o\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrittonAlone": 52,
      "Zeyang-Li": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/LoginCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.logic.commands.LoginCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.account.Password;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.account.Username;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.account.UsernameMatchPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": " * Parses input arguments and creates a new LoginCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "public class LoginCommandParser implements Parser\u003cLoginCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the LoginComman"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * and returns an LoginCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public LoginCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_USERNAME, PREFIX_PASSWORD);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_USERNAME, PREFIX_PASSWORD)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, LoginCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        Username username \u003d ParserUtil.parseUsername(argMultimap.getValue(PREFIX_USERNAME).get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        Password password \u003d ParserUtil.parsePassword(argMultimap.getValue(PREFIX_PASSWORD).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        Account account \u003d new Account(username, password);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return new LoginCommand(new UsernameMatchPredicate(username.toString()), account);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        //return new LoginCommand(account);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/MonthCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import seedu.address.logic.commands.MonthCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": " * Parser for changing calendar view."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "public class MonthCommandParser implements Parser\u003cMonthCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * parse method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public MonthCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            return new MonthCommand(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, MonthCommand.MESSAGE_ILLEGAL), pe);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jingchen-z": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import static seedu.address.commons.util.FileUtil.isValidPath;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import static seedu.address.commons.util.FileUtil.isValidXmlFilename;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import static seedu.address.model.Filetype.isValidFiletype;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.model.Filetype;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.account.Password;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.account.Username;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Categories;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.EndDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.EndTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.StartDate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.StartTime;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String MESSAGE_INVALID_FILENAME \u003d \"Filename is invalid.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String MESSAGE_INVALID_EXTENSION \u003d \"Filename must end with \\\".json\\\".\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Parses a {@code String startDate} into a {@code StartDate}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @throws ParseException if the given {@code startDate} is invalid."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static StartDate parseStartDate(String startDate) throws ParseException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        requireNonNull(startDate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String trimmedStartDate \u003d startDate.trim();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (!StartDate.isValidStartDate(trimmedStartDate)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new ParseException(StartDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return new StartDate(trimmedStartDate);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Parses a {@code String startTime} into a {@code StartTime}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @throws ParseException if the given {@code startTime} is invalid."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static StartTime parseStartTime(String startTime) throws ParseException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        requireNonNull(startTime);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String trimmedStartTime \u003d startTime.trim();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (!StartTime.isValidStartTime(trimmedStartTime)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new ParseException(StartTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return new StartTime(trimmedStartTime);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Parses a {@code String endDate} into a {@code EndDate}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @throws ParseException if the given {@code endDate} is invalid."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static EndDate parseEndDate(String endDate) throws ParseException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        requireNonNull(endDate);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String trimmedEndDate \u003d endDate.trim();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (!EndDate.isValidEndDate(trimmedEndDate)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new ParseException(EndDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return new EndDate(trimmedEndDate);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Parses a {@code String endTime} into a {@code EndTime}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @throws ParseException if the given {@code endTime} is invalid."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static Description parseDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (!Description.isValidDescription(trimmedDescription)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new ParseException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return new Description(trimmedDescription);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Parses a {@code String description} into a {@code Description}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @throws ParseException if the given {@code description} is invalid."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static EndTime parseEndTime(String endTime) throws ParseException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        requireNonNull(endTime);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String trimmedEndTime \u003d endTime.trim();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (!EndTime.isValidEndTime(trimmedEndTime)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new ParseException(EndTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return new EndTime(trimmedEndTime);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Parses a {@code String category} into a {@code Category}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @throws ParseException if the given {@code category} is invalid."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static Categories parseCategories(String categories) throws ParseException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        requireNonNull(categories);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String trimmedCategories \u003d categories.trim();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (!Categories.isValidCategories(trimmedCategories)) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new ParseException(Categories.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return new Categories(trimmedCategories);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Parses a {@code String filetype} into a {@code Filetype}."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     *"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @throws ParseException if the given {@code String filetype} is invalid."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static Filetype parseFiletype(String filetype) throws ParseException {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        requireNonNull(filetype);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        String trimmedFiletype \u003d filetype.trim();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        if (!isValidFiletype(trimmedFiletype)) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            throw new ParseException(Filetype.MESSAGE_FILETYPE_CONSTRAINTS);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return new Filetype(trimmedFiletype);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     * Parses a String with white space into a String without white space."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public static String parseCategory(String s) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        String trimmedCategory \u003d s.trim();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        return trimmedCategory;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Parses a {@code String filename} into a {@code Path}."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     *"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @throws ParseException if the given {@code filename} is invalid."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static Path parseFilename(String filename) throws ParseException {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        requireNonNull(filename);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        String trimmedFilename \u003d filename.trim();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        if (!isValidPath(trimmedFilename)) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_FILENAME);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        if (!isValidXmlFilename(trimmedFilename)) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_EXTENSION);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return Paths.get(\"data\", trimmedFilename);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * Parses a {@code String username} into a {@code Password}."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * @throws ParseException if the given {@code username} is invalid."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static Username parseUsername(String username) throws ParseException {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        requireNonNull(username);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        String trimmedUsername \u003d username.trim();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (!Username.isValidUsername(trimmedUsername)) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            throw new ParseException(Username.MESSAGE_USERNAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return new Username(trimmedUsername);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * Parses a {@code String password} into a {@code Password}."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * @throws ParseException if the given {@code password} is invalid."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static Password parsePassword(String password) throws ParseException {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        requireNonNull(password);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        String trimmedPassword \u003d password.trim();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (!Password.isValidPassword(trimmedPassword)) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            throw new ParseException(Password.MESSAGE_PASSWORD_CONSTRAINTS);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return new Password(trimmedPassword);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 34,
      "cheahzk": 74,
      "BrittonAlone": 10,
      "Zeyang-Li": 42,
      "-": 98
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ShowTimeCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.logic.commands.ShowTimeCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Used for parsing user input for list command"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class ShowTimeCommandParser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Parse function"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public Command parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String[] arguments \u003d userInput.trim().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (arguments.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            if (arguments[0].equals(\"\") || arguments[0].equals(\"st\") || isValidDateFormat(arguments[0])) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                return new ShowTimeCommand(arguments);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ShowTimeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ShowTimeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Check if user input is of the correct format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean isValidDateFormat(String str) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String[] strSplit \u003d str.split(\"-\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (strSplit.length \u003d\u003d 2 || strSplit.length \u003d\u003d 3) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/TaskBookParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.logic.commands.AddAccountCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.logic.commands.DeleteAccountCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.logic.commands.EditAccountCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.logic.commands.FindAccountCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.logic.commands.ListAccountsCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.logic.commands.LoginCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.logic.commands.LoginStatusCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.logic.commands.LogoutCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import seedu.address.logic.commands.MonthCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import seedu.address.logic.commands.RemindCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.logic.commands.ShowTimeCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import seedu.address.logic.commands.TimelineCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.suggestions.WrongCommandSuggestion;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "//The command created for Tasketch:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class TaskBookParser {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        case AddAccountCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        case AddAccountCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            return new AddAccountCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        case DeleteAccountCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        case DeleteAccountCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            return new DeleteAccountCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        case EditAccountCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        case EditAccountCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            return new EditAccountCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        case FindAccountCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        case FindAccountCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            return new FindAccountCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        case ListAccountsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        case ListAccountsCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            return new ListAccountsCommand();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        case LoginCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            return new LoginCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        case LogoutCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            return new LogoutCommand();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        case LoginStatusCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            return new LoginStatusCommand();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        case AddCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        case FindCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        case EditCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        case DeleteCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        case ClearCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            return new ClearCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        case ListCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            return new ListCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        case MonthCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        case MonthCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            return new MonthCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        case TimelineCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        case TimelineCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            return new TimelineCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        case RemindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            return new RemindCommand(arguments);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        case ShowTimeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        case ShowTimeCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            return new ShowTimeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        case HistoryCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        case UndoCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        case RedoCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        case ImportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            return new ImportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        case ExportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            return new ExportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            List\u003cString\u003e listOfCommands \u003d new WrongCommandSuggestion().getSuggestions(commandWord);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            if (listOfCommands \u003d\u003d null) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                throw new ParseException(MESSAGE_UNKNOWN_COMMAND + \"\\n\" + WrongCommandSuggestion.NO_SUGGESTION);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                String suggestionsToString \u003d StringUtil.join(listOfCommands, \", \");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                throw new ParseException(MESSAGE_UNKNOWN_COMMAND + \u0027\\n\u0027"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                        + String.format(WrongCommandSuggestion.SUGGESTION_HEADER, suggestionsToString));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 39,
      "jingchen-z": 36,
      "cheahzk": 14,
      "BrittonAlone": 5,
      "Zeyang-Li": 23,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/TimelineCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import seedu.address.logic.commands.TimelineCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": " * This is the Timeline parser."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "public class TimelineCommandParser implements Parser\u003cTimelineCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * parse method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public TimelineCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            return new TimelineCommand(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, TimelineCommand.MESSAGE_ILLEGAL), pe);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jingchen-z": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/suggestions/StringSimilarity.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "package seedu.address.logic.suggestions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " * Finds how similar two given strings are."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "public class StringSimilarity {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private static final int ARRAY_PADDING \u003d 1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private static final int DELETION_COST \u003d 1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private static final int ADDITION_COST \u003d 1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private static final int SUBSTITUTION_COST \u003d 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Finds the edit distance between two strings."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @param userCommand the command the user has entered"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @param commandToCheck the reference command to check the edit difference in string"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @return {@code int} the edit distance of the two strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public int editDistance(String userCommand, String commandToCheck) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        int[][] distanceArray \u003d new int[userCommand.length() + ARRAY_PADDING][commandToCheck.length() + ARRAY_PADDING];"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        for (int i \u003d 0; i \u003c userCommand.length() + ARRAY_PADDING; i++) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            distanceArray[i][0] \u003d i;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        for (int j \u003d 0; j \u003c commandToCheck.length() + ARRAY_PADDING; j++) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            distanceArray[0][j] \u003d j;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        for (int i \u003d 0; i \u003c userCommand.length(); i++) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            for (int j \u003d 0; j \u003c commandToCheck.length(); j++) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                if (userCommand.charAt(i) \u003d\u003d commandToCheck.charAt(j)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                    distanceArray[i + ARRAY_PADDING][j + ARRAY_PADDING] \u003d distanceArray[i][j];"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                    distanceArray[i + ARRAY_PADDING][j + ARRAY_PADDING] \u003d minimum("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                            distanceArray[i + ARRAY_PADDING][j] + DELETION_COST,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                            distanceArray[i][j + ARRAY_PADDING] + ADDITION_COST,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                            distanceArray[i][j] + SUBSTITUTION_COST"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                    );"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return distanceArray[userCommand.length()][commandToCheck.length()];"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private int minimum(int a, int b, int c) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return Math.min(Math.min(a, b), c);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zeyang-Li": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/suggestions/Suggestion.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "package seedu.address.logic.suggestions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " * API of the suggestion component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "public interface Suggestion {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Executes getSuggestion"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @param input any user input that requires suggestions"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @return a list of possible suggestions"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    List\u003cString\u003e getSuggestions(String input);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zeyang-Li": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/suggestions/WrongCommandSuggestion.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "package seedu.address.logic.suggestions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.AddAccountCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.DeleteAccountCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.EditAccountCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.FindAccountCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.ListAccountsCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.LoginCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.LoginStatusCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.LogoutCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.MonthCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.RemindCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.ShowTimeCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.TimelineCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " * Suggests a command with the closest match to the inputted string."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "public class WrongCommandSuggestion implements Suggestion {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String SUGGESTION_HEADER \u003d \"Do you mean: %1$s?\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String NO_SUGGESTION \u003d \"No suggestions available.Try \u0027help\u0027\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private static final int WORD_DISTANCE_LIMIT \u003d 3;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private static final String[] CommandList;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    // Initialising the CommandList Array"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        CommandList \u003d new String[] {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            AddCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            AddAccountCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            ClearCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            DeleteCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            DeleteAccountCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            EditCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            EditAccountCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            ExportCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            ExitCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            FindCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            FindAccountCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            HelpCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            HistoryCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            ImportCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            ListCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            ListAccountsCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            LoginCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            LogoutCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            LoginStatusCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            MonthCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            RedoCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            RemindCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            ShowTimeCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            TimelineCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            UndoCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        };"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Check the alphabets occurrence in command input and stores it as a String."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Returns a string of the a;phabet occurrence."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @param userCommand A {@code String} object of the user\u0027s command input"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @return A {@code String} object containing the suggestion header and suggested similar command."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public String checkOcc(String userCommand) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        char[][] resultArr \u003d new char[26][2];"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        char [] stringArr \u003d userCommand.toCharArray();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        for (char check \u003d \u0027a\u0027; check \u003c\u003d \u0027z\u0027; check++) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            resultArr[count][0] \u003d check;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            resultArr[count][1] \u003d \u00270\u0027;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            count++;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        for (int i \u003d 0; i \u003c stringArr.length; i++) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            for (int j \u003d 0; j \u003c 26; j++) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                if (stringArr[i] \u003d\u003d resultArr[j][0]) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                    resultArr[j][1]++;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        for (int j \u003d 0; j \u003c 26; j++) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            if (resultArr[j][1] !\u003d \u00270\u0027) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                result \u003d result + resultArr[j][0] + resultArr[j][1];"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Parses the command input and passes it to the getNearestCommand for comparison of commands."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Returns formatted string of the suggestion header and closest matched command, else returns nothing."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @param userCommand A {@code String} object of the user\u0027s command input"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @return A {@code String} object containing the suggestion header and suggested similar command."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public List\u003cString\u003e getSuggestions(String userCommand) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        String userCommandInLowerCase \u003d userCommand.toLowerCase();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        String alphabetOcc \u003d checkOcc(userCommandInLowerCase);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        ArrayList\u003cString\u003e suggestion \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        for (String commands: CommandList) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            String commandOcc \u003d checkOcc(commands);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            if (commandOcc.equals(alphabetOcc)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                suggestion.add(commands);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        if (suggestion.isEmpty()) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            List\u003cString\u003e suggestedCommand \u003d getNearestCommands(userCommandInLowerCase);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            return suggestedCommand;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            return suggestion;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private List\u003cString\u003e getNearestCommands(String userCommand) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        ArrayList\u003cString\u003e[] commandEditDistances \u003d new ArrayList[WORD_DISTANCE_LIMIT];"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        for (int i \u003d 0; i \u003c WORD_DISTANCE_LIMIT; i++) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            commandEditDistances[i] \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (userCommand.length() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            for (String commands: CommandList) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                if (commands.charAt(0) \u003d\u003d userCommand.charAt(0)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                    commandEditDistances[1].add(commands);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            for (String commands: CommandList) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                int distance \u003d new StringSimilarity().editDistance(userCommand, commands);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                if (distance \u003c WORD_DISTANCE_LIMIT) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                    commandEditDistances[1].add(commands);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        for (ArrayList\u003cString\u003e suggestedCommands: commandEditDistances) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            if (!suggestedCommands.isEmpty()) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                return suggestedCommands;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 9,
      "Zeyang-Li": 154
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AccountList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.account.UniqueAccountList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": " * Wraps all data at the stock-list level"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": " * Duplicates are not allowed (by .isSameItem comparison)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "public class AccountList implements ReadOnlyAccountList {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    private final UniqueAccountList accounts;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        accounts \u003d new UniqueAccountList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public AccountList() {}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * Creates an AccountList using the Accounts in the {@code toBeCopied}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public AccountList(ReadOnlyAccountList toBeCopied) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * Replaces the contents of the account list with {@code accounts}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * {@code accounts} must not contain duplicate accounts."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public void setAccounts(List\u003cAccount\u003e accounts) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        this.accounts.setAccounts(accounts);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * Resets the existing data of this {@code AccountList} with {@code newData}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public void resetData(ReadOnlyAccountList newData) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        setAccounts(newData.getAccountList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    //// account-level operations"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * Returns true if an account with the same identity as {@code account} exists in the account list."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public boolean hasAccount(Account account) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        requireNonNull(account);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return accounts.contains(account);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * Adds an account to the account list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * The account must not already exist in the account list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public void addAccount(Account p) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        accounts.add(p);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * Replaces the given account {@code target} in the list with {@code editedAccount}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * {@code target} must exist in the account list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * The item identity of {@code editedAccount} must not be the same as another existing account in the account list."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public void updateAccount(Account target, Account editedAccount) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        requireNonNull(editedAccount);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        accounts.setAccount(target, editedAccount);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * Removes {@code key} from this {@code AccountList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * {@code key} must exist in the account list."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public void removeAccount(Account key) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        accounts.remove(key);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return accounts.asUnmodifiableObservableList().size() + \" accounts\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public ObservableList\u003cAccount\u003e getAccountList() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return accounts.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                || (other instanceof AccountList // instanceof handles nulls"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                \u0026\u0026 accounts.equals(((AccountList) other).accounts));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return accounts.hashCode();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 135
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Filetype.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.util.EnumSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " * Represents filetype available for import/export."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidFiletype(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "public class Filetype {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String MESSAGE_FILETYPE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            \"Filetype make be \\\"json\\\", and it should not be blank\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * The first character of the filetype must not be a whitespace,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String FILETYPE_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Filetypes that can be used to export contacts."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public enum Extension {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        json"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Constructs a {@code Filetype} object."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @param filetype a string representing the filetype."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public Filetype(String filetype) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        requireNonNull(filetype);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        checkArgument(isValidFiletype(filetype), MESSAGE_FILETYPE_CONSTRAINTS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        value \u003d filetype;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Returns true if a given string is a valid filetype."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static boolean isValidFiletype(String test) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return test.matches(FILETYPE_VALIDATION_REGEX) \u0026\u0026 isValidExtension(test);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Returns true if a given string matches any of the valid Extension."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private static boolean isValidExtension(String extension) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return contains(Extension.class, extension);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    // Reused from"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    // http://www.java2s.com/Tutorials/Java/Data_Type_How_to/String/"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    // Check_if_enum_contains_a_given_string.html with minor modifications"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Returns true if an {@code enumClass} contains a specific {@code value}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private static \u003cE extends Enum\u003cE\u003e\u003e boolean contains(Class\u003cE\u003e enumClass,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                                                        String value) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            return EnumSet.allOf(enumClass)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                    .contains(Enum.valueOf(enumClass, value));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                || (other instanceof Filetype // instanceof handles nulls"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                \u0026\u0026 value.equals(((Filetype) other).value)); // state check"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zeyang-Li": 89
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.account.Username;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.day.Day;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    Predicate\u003cTask\u003e PREDICATE_SHOW_ALL_TASKS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    Predicate\u003cDay\u003e PREDICATE_SHOW_ALL_DAYS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    Predicate\u003cAccount\u003e PREDICATE_SHOW_ALL_ACCOUNTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns the user prefs\u0027 task book file path."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    Path getTaskBookFilePath();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Sets the user prefs\u0027 task book file path."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    void setTaskBookFilePath(Path taskBookFilePath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Replaces task book data with the data in {@code taskBook}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    void setTaskBook(ReadOnlyTaskBook taskBook);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Returns the TaskBook"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    ReadOnlyTaskBook getTaskBook();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns true if a task with the same identity as {@code task} exists in the task book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    boolean hasTask(Task task);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Deletes the given task."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * The task must exist in the task book."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    void deleteTask(Task target);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    void deleteTaskList(List\u003cTask\u003e targets);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    void sortRemindListByStart();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    void sortRemindListByEnd();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    void setRemindList(ObservableList\u003cTask\u003e remindList);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    void filterRemindList(String str);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    void reinitializeRemindList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    ObservableList\u003cTask\u003e getRemindTaskList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    ObservableList\u003cTask\u003e getAllTaskList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Adds the given task."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * {@code task} must not already exist in the task book."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    void addTask(Task task);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Replaces the given task {@code target} with {@code editedTask}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * {@code target} must exist in the task book."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * The task identity of {@code editedTask} must not be the same as another existing task in the task book."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    void setTask(Task target, Task editedTask);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    void resetData(ReadOnlyTaskBook newData);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Returns an unmodifiable view of the filtered task list"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredTaskList();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Returns an unmodifiable view of the filtered day list"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    ObservableList\u003cDay\u003e getFilteredDayList();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Updates the filter of the filtered task list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    void updateFilteredTaskList(Predicate\u003cTask\u003e predicate);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Updates the filter of the filtered day list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    void updateFilteredDayList(Predicate\u003cDay\u003e predicate);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns true if the model has previous task book states to restore."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    boolean canUndoTaskBook();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns true if the model has undone task book states to restore."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    boolean canRedoTaskBook();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Restores the model\u0027s task book to its previous state."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    void undoTaskBook();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Restores the model\u0027s task book to its previously undone state."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    void redoTaskBook();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Saves the current task book state for undo/redo."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    void commitTaskBook();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Selected task in the filtered task list."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * null if no task is selected."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    ReadOnlyProperty\u003cTask\u003e selectedTaskProperty();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Selected day in the filtered day list."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * null if no day is selected."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    ReadOnlyProperty\u003cDay\u003e selectedDayProperty();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns the selected task in the filtered task list."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * null if no task is selected."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    Task getSelectedTask();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Sets the selected task in the filtered task list."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    void setSelectedTask(Task task);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Sets the selected day in the filtered day list."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    void setSelectedDay(Day day);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * Set the current month in GUI."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    void setMonth(String month);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Import/ Export \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Imports the persons from a xml at {@code importFilePath}."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    void importTasksFromTaskBook(Path importFilePath) throws IOException, DataConversionException;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Adds all the persons in {@code addressBookImported} to the current address book."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     *"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @return hasChanged is true if the addressBook is modified, returns false otherwise."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    boolean addTasksToTaskBook(ReadOnlyTaskBook addressBookToImported);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Exports the current filtered person list to a xml file at {@code exportFilePath}."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    void exportFilteredTaskBook(Path exportFilePath) throws IOException, IllegalValueException;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Login/ Logout \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    boolean hasAccount(Account account);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    void addAccount(Account account);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    void updateAccount(Account target, Account editedAccount);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    void deleteAccount(Account target);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    ReadOnlyAccountList getAccountList();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    ObservableList\u003cAccount\u003e getFilteredAccountList();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    void updateFilteredAccountList(Predicate\u003cAccount\u003e predicate);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    void resetAccountData(ReadOnlyAccountList newData);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * Get login status to determine if user can run commands"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    boolean getLoginStatus();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * Get logged in user in the model"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    String getLoggedInUser();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * Set logout status"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    void setLoggedOutStatus();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * Set logged in user status"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    void setLoggedInUser(Username username);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    void exportFilteredAccountList(Path path) throws IOException, IllegalValueException;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    void importAccountsFromAccountList(Path filePath) throws IOException, DataConversionException;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * Adds all the accounts in {@code accountListImported} to the current address book."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * @return hasChanged is true if the addressBook is modified, returns false otherwise."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    boolean addAccountsToAccountList(ReadOnlyAccountList accountListImported);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 43,
      "cheahzk": 54,
      "jingchen-z": 2,
      "BrittonAlone": 12,
      "Zeyang-Li": 26,
      "-": 124
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.util.concurrent.atomic.AtomicBoolean;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.commons.events.model.AccountListChangedEvent;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.commons.events.model.TaskBookChangedEvent;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.export.Export;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.export.ExportManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.export.Import;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.export.ImportManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.account.LoggedInAccount;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.account.Username;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.day.Day;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.day.exceptions.DayNotFoundException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Represents the in-memory model of the tasketch data."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final VersionedTaskBook versionedTaskBook;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final FilteredList\u003cTask\u003e filteredTasks;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final FilteredList\u003cDay\u003e filteredDays;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final SimpleObjectProperty\u003cTask\u003e selectedTask \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final SimpleObjectProperty\u003cDay\u003e selectedDay \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    private ObservableList\u003cTask\u003e remindList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    private final VersionedAccountList versionedAccountList;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    private final FilteredList\u003cAccount\u003e filteredAccounts;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    private final LoggedInAccount loggedInAccount;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    private Comparator\u003cTask\u003e startComparator \u003d new Comparator\u003cTask\u003e() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        public int compare(Task o1, Task o2) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            String sdO1 \u003d o1.getStartDate().toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            String sd02 \u003d o2.getStartDate().toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            String[] dateInfo1 \u003d sdO1.split(\"-\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            String[] dateInfo2 \u003d sd02.split(\"-\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            String finalDate1 \u003d dateInfo1[2] + dateInfo1[1] + dateInfo1[0];"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            String finalDate2 \u003d dateInfo2[2] + dateInfo2[1] + dateInfo2[0];"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            if (finalDate1.compareTo(finalDate2) !\u003d 0) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                return finalDate1.compareTo(finalDate2);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                return o1.getStartTime().toString().compareTo(o2.getStartTime().toString());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    };"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    private Comparator\u003cTask\u003e endComparator \u003d new Comparator\u003cTask\u003e() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        public int compare(Task o1, Task o2) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            String sdO1 \u003d o1.getEndDate().toString();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            String sd02 \u003d o2.getEndDate().toString();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            String[] dateInfo1 \u003d sdO1.split(\"-\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            String[] dateInfo2 \u003d sd02.split(\"-\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            String finalDate1 \u003d dateInfo1[2] + dateInfo1[1] + dateInfo1[0];"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            String finalDate2 \u003d dateInfo2[2] + dateInfo2[1] + dateInfo2[0];"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            if (finalDate1.compareTo(finalDate2) !\u003d 0) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                return finalDate1.compareTo(finalDate2);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                return o1.getStartTime().toString().compareTo(o2.getStartTime().toString());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    };"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * Initializes a ModelManager with the given taskBook, userPrefs and accountList."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public ModelManager(ReadOnlyTaskBook taskBook, ReadOnlyUserPrefs userPrefs, ReadOnlyAccountList accountList) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        requireAllNonNull(taskBook, userPrefs, accountList);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        logger.fine(\"Initializing with task book: \" + taskBook"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                + \" and user prefs \" + userPrefs + \" and accounts\" + accountList);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        versionedAccountList \u003d new VersionedAccountList(accountList);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        filteredAccounts \u003d new FilteredList\u003c\u003e(versionedAccountList.getAccountList());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        loggedInAccount \u003d new LoggedInAccount();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        versionedTaskBook \u003d new VersionedTaskBook(taskBook);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        filteredTasks \u003d new FilteredList\u003c\u003e(versionedTaskBook.getTaskList());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        filteredTasks.addListener(this::ensureSelectedTaskIsValid);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        filteredDays \u003d new FilteredList\u003c\u003e(versionedTaskBook.getDayList());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        filteredDays.addListener(this::ensureSelectedDayIsValid);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        for (Task task : versionedTaskBook.getTaskList()) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            remindList.add(task);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        this(new TaskBook(), new UserPrefs(), new AccountList());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public Path getTaskBookFilePath() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return userPrefs.getTaskBookFilePath();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void setTaskBookFilePath(Path taskBookFilePath) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        requireNonNull(taskBookFilePath);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        userPrefs.setTaskBookFilePath(taskBookFilePath);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TaskBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void setTaskBook(ReadOnlyTaskBook taskBook) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        versionedTaskBook.resetData(taskBook);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public ReadOnlyTaskBook getTaskBook() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return versionedTaskBook;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private void indicateTaskBookChanged() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        new TaskBookChangedEvent(versionedTaskBook);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return versionedTaskBook.hasTask(task);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void deleteTask(Task target) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        versionedTaskBook.removeTask(target);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public void deleteTaskList(List\u003cTask\u003e targets) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        for (Task target : targets) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            versionedTaskBook.removeTask(target);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public void sortRemindListByStart() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        FXCollections.sort(remindList, startComparator);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public void sortRemindListByEnd() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        FXCollections.sort(remindList, endComparator);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public void reinitializeRemindList() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        remindList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        for (Task task : versionedTaskBook.getTaskList()) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            remindList.add(task);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public void setRemindList(ObservableList\u003cTask\u003e remindList) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        this.remindList \u003d remindList;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public ObservableList\u003cTask\u003e getRemindTaskList() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return remindList;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public void filterRemindList(String str) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        Predicate\u003cTask\u003e predicate \u003d task -\u003e meetRequirement(task, str);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        remindList \u003d remindList.filtered(predicate);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public ObservableList\u003cTask\u003e getAllTaskList() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return versionedTaskBook.getTaskList();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        versionedTaskBook.addTask(task);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        updateFilteredDayList(PREDICATE_SHOW_ALL_DAYS);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        requireAllNonNull(target, editedTask);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        versionedTaskBook.setTask(target, editedTask);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public void resetData(ReadOnlyTaskBook newData) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        versionedTaskBook.resetData(newData);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Task List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Task} backed by the internal list of"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * {@code versionedTaskBook}"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return filteredTasks;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        filteredTasks.setPredicate(predicate);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Day List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Day} backed by the internal list of"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * {@code versionedTaskBook}"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public ObservableList\u003cDay\u003e getFilteredDayList() {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return filteredDays;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void updateFilteredDayList(Predicate\u003cDay\u003e predicate) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        filteredDays.setPredicate(predicate);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TaskBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean canUndoTaskBook() {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return versionedTaskBook.canUndo();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean canRedoTaskBook() {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return versionedTaskBook.canRedo();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void undoTaskBook() {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        versionedTaskBook.undo();"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void redoTaskBook() {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        versionedTaskBook.redo();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void commitTaskBook() {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        versionedTaskBook.commit();"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Selected task \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public ReadOnlyProperty\u003cTask\u003e selectedTaskProperty() {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return selectedTask;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public Task getSelectedTask() {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return selectedTask.getValue();"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void setSelectedTask(Task task) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (task !\u003d null \u0026\u0026 !filteredTasks.contains(task)) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        selectedTask.setValue(task);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Selected day \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public ReadOnlyProperty\u003cDay\u003e selectedDayProperty() {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return selectedDay;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void setSelectedDay(Day day) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (day !\u003d null \u0026\u0026 !filteredDays.contains(day)) {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new DayNotFoundException();"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        selectedDay.setValue(day);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public void setMonth(String month) {}"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Ensures {@code selectedTask} is a valid task in {@code filteredTasks}."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private void ensureSelectedTaskIsValid(ListChangeListener.Change\u003c? extends Task\u003e change) {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        while (change.next()) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            if (selectedTask.getValue() \u003d\u003d null) {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                // null is always a valid selected task, so we do not need to check that it is valid anymore."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            boolean wasSelectedTaskReplaced \u003d change.wasReplaced() \u0026\u0026 change.getAddedSize() \u003d\u003d change.getRemovedSize()"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                    \u0026\u0026 change.getRemoved().contains(selectedTask.getValue());"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            if (wasSelectedTaskReplaced) {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                // Update selectedTask to its new value."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                int index \u003d change.getRemoved().indexOf(selectedTask.getValue());"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                selectedTask.setValue(change.getAddedSubList().get(index));"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            boolean wasSelectedTaskRemoved \u003d change.getRemoved().stream()"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                    .anyMatch(removedTask -\u003e selectedTask.getValue().isSameTask(removedTask));"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            if (wasSelectedTaskRemoved) {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                // Select the task that came before it in the list,"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                // or clear the selection if there is no such task."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                selectedTask.setValue(change.getFrom() \u003e 0 ? change.getList().get(change.getFrom() - 1) : null);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     * Determine the predicate"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    private boolean meetRequirement(Task task, String givenCategory) {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        if (task.getCategories().value.equals(givenCategory)) {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Import/ Export \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public void importTasksFromTaskBook(Path importFilePath) throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        Import importManager \u003d new ImportManager(importFilePath);"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        ReadOnlyTaskBook taskBookImported \u003d importManager.readTaskBook().orElseThrow(IOException::new);"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        boolean hasChanged \u003d addTasksToTaskBook(taskBookImported);"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        if (hasChanged) {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            indicateTaskBookChanged();"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public boolean addTasksToTaskBook(ReadOnlyTaskBook addressBookImported) {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        ObservableList\u003cTask\u003e tasks \u003d addressBookImported.getTaskList();"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        AtomicBoolean hasChanged \u003d new AtomicBoolean(false);"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        tasks.forEach((task) -\u003e {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            if (!hasTask(task)) {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                hasChanged.set(true);"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                versionedTaskBook.addTask(task);"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            }"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        });"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return hasChanged.get();"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public void exportFilteredTaskBook(Path exportFilePath) throws IOException, IllegalValueException {"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        Export export \u003d new ExportManager(getFilteredTaskList(), exportFilePath);"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        export.saveFilteredTasks();"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Ensures {@code selectedDay} is a valid day in {@code filteredDays}."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private void ensureSelectedDayIsValid(ListChangeListener.Change\u003c? extends Day\u003e change) {"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        while (change.next()) {"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            if (selectedTask.getValue() \u003d\u003d null) {"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                // null is always a valid selected day, so we do not need to check that it is valid anymore."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            boolean wasSelectedDayReplaced \u003d change.wasReplaced() \u0026\u0026 change.getAddedSize() \u003d\u003d change.getRemovedSize()"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                    \u0026\u0026 change.getRemoved().contains(selectedDay.getValue());"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            if (wasSelectedDayReplaced) {"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                // Update selectedDay to its new value."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                int index \u003d change.getRemoved().indexOf(selectedDay.getValue());"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                selectedDay.setValue(change.getAddedSubList().get(index));"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            boolean wasSelectedDayRemoved \u003d change.getRemoved().stream()"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                    .anyMatch(removedDay -\u003e selectedDay.getValue().isSameDay(removedDay));"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            if (wasSelectedDayRemoved) {"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                // Select the day that came before it in the list,"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                // or clear the selection if there is no such task."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                selectedDay.setValue(change.getFrom() \u003e 0 ? change.getList().get(change.getFrom() - 1) : null);"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return versionedTaskBook.equals(other.versionedTaskBook)"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                \u0026\u0026 filteredTasks.equals(other.filteredTasks)"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                \u0026\u0026 filteredDays.equals(other.filteredDays)"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                \u0026\u0026 Objects.equals(selectedTask.get(), other.selectedTask.get())"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                \u0026\u0026 Objects.equals(selectedDay.get(), other.selectedDay.get());"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Account List \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public boolean hasAccount(Account account) {"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        requireNonNull(account);"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return versionedAccountList.hasAccount(account);"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public void addAccount(Account account) {"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        versionedAccountList.addAccount(account);"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        updateFilteredAccountList(PREDICATE_SHOW_ALL_ACCOUNTS);"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        indicateAccountListChanged();"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public void updateAccount(Account target, Account editedAccount) {"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        requireAllNonNull(target, editedAccount);"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        versionedAccountList.updateAccount(target, editedAccount);"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        indicateAccountListChanged();"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public void deleteAccount(Account target) {"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        versionedAccountList.removeAccount(target);"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        indicateAccountListChanged();"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public ReadOnlyAccountList getAccountList() {"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return versionedAccountList;"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public ObservableList\u003cAccount\u003e getFilteredAccountList() {"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredAccounts);"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public void updateFilteredAccountList(Predicate\u003cAccount\u003e predicate) {"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        filteredAccounts.setPredicate(predicate);"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public void resetAccountData(ReadOnlyAccountList newData) {"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        versionedAccountList.resetData(newData);"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        indicateAccountListChanged();"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    /** Raises an event to indicate the model has changed */"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    private void indicateAccountListChanged() {"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        new AccountListChangedEvent(versionedAccountList);"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public boolean getLoginStatus() {"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return loggedInAccount.getLoginStatus();"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public String getLoggedInUser() {"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return loggedInAccount.getUsername().toString();"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public void setLoggedOutStatus() {"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        loggedInAccount.setLoggedOutStatus();"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public void setLoggedInUser(Username username) {"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        loggedInAccount.setLoggedInUser(username);"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public void exportFilteredAccountList(Path filePath) throws IOException, IllegalValueException {"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        Export export \u003d new ExportManager(getFilteredAccountList(), null, filePath);"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        export.saveFilteredAccountList();"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public void importAccountsFromAccountList(Path filePath) throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        Import importManager \u003d new ImportManager(filePath);"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        ReadOnlyAccountList accountListImported \u003d importManager.readAccountList().orElseThrow(IOException::new);"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        boolean hasChanged \u003d addAccountsToAccountList(accountListImported);"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (hasChanged) {"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            updateFilteredAccountList(PREDICATE_SHOW_ALL_ACCOUNTS);"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            indicateAccountListChanged();"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public boolean addAccountsToAccountList(ReadOnlyAccountList accountListImported) {"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        ObservableList\u003cAccount\u003e accounts \u003d accountListImported.getAccountList();"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        AtomicBoolean hasChanged \u003d new AtomicBoolean(false);"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        accounts.forEach((account) -\u003e {"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            if (!hasAccount(account)) {"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                hasChanged.set(true);"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                versionedAccountList.addAccount(account);"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        });"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return hasChanged.get();"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 128,
      "cheahzk": 137,
      "jingchen-z": 3,
      "BrittonAlone": 76,
      "Zeyang-Li": 60,
      "-": 186
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAccountList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": " * Unmodifiable view of an account list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "public interface ReadOnlyAccountList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * Returns an unmodifiable view of the accounts list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * This list will not contain any duplicate accounts."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    ObservableList\u003cAccount\u003e getAccountList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyTaskBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import javafx.beans.Observable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.day.Day;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Unmodifiable view of an task book"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public interface ReadOnlyTaskBook extends Observable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns an unmodifiable view of the tasks list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    ObservableList\u003cTask\u003e getTaskList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    ObservableList\u003cDay\u003e getDayList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    Path getTaskBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/TaskBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.commons.util.InvalidationListenerManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.day.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.day.Day;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.day.UniqueDayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.UniqueTaskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Wraps all data at the task-book level"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Duplicates are not allowed (by .isSameTask comparison)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class TaskBook implements ReadOnlyTaskBook {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final UniqueTaskList tasks;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final UniqueDayList days;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private Map\u003cDate, Day\u003e dayMap;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final InvalidationListenerManager invalidationListenerManager \u003d new InvalidationListenerManager();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        tasks \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        days \u003d new UniqueDayList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        dayMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public TaskBook() {}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Creates an TaskBook using the Tasks in the {@code toBeCopied}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public TaskBook(ReadOnlyTaskBook toBeCopied) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Replaces the contents of the task list with {@code tasks}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * {@code tasks} must not contain duplicate tasks."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void setDatas(List\u003cTask\u003e tasks, List\u003cDay\u003e days) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.tasks.setTasks(tasks);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.days.setDays(days);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.dayMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        resetDayMap(tasks);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Reset the dayMap after reset data"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @param tasks"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void resetDayMap(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        dayMap.clear();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        days.clear();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        for (int i \u003d 0; i \u003c\u003d tasks.size() - 1; i++) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            Task t \u003d tasks.get(i);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            String dateS \u003d t.getStartDate().toString();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            String dateE \u003d t.getEndDate().toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            if (dateS.equalsIgnoreCase(dateE)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                addingDay(t, dateS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Adding day into dayMap and days"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @param dateS"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void addingDay(Task t, String dateS) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Date date \u003d new Date(dateS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (!dayMap.containsKey(date)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            dayMap.put(date, new Day(date));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            Day a \u003d dayMap.get(date);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            days.add(a);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Day d \u003d dayMap.get(date);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        dayMap.remove(date, d);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        days.remove(d);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        d.addCategory(t);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        dayMap.put(date, d);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        addDay(d);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Resets the existing data of this {@code TaskBook} with {@code newData}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void resetData(ReadOnlyTaskBook newData) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        setDatas(newData.getTaskList(), newData.getDayList());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    //// task-level operations"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns true if a task with the same identity as {@code task} exists in the task book."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return tasks.contains(task);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Adds a task to the task book."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * The task must not already exist in the task book."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void addTask(Task t) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        tasks.add(t);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String dateS \u003d t.getStartDate().toString();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String dateE \u003d t.getEndDate().toString();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (dateS.equalsIgnoreCase(dateE)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            addingDay(t, dateS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Add day into uniqueDayList"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @param d"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void addDay(Day d) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        days.add(d);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Replaces the given task {@code target} in the list with {@code editedTask}."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * {@code target} must exist in the task book."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * The task identity of {@code editedTask} must not be the same as another existing task in the task book."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        requireNonNull(editedTask);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        tasks.setTask(target, editedTask);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String targetDateS \u003d target.getStartDate().toString();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String targetDateE \u003d target.getEndDate().toString();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String editedDateS \u003d editedTask.getStartDate().toString();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String editedDateE \u003d editedTask.getEndDate().toString();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (targetDateE.equalsIgnoreCase(targetDateS) \u0026\u0026 !editedDateE.equalsIgnoreCase(editedDateS)) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            Date date \u003d new Date(targetDateS);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            if (!dayMap.containsKey(date)) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            Day d \u003d dayMap.get(date);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            days.remove(d);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            dayMap.remove(date, d);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            d.removeCategory(target);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            if (!d.isDayEmpty()) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                days.add(d);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                dayMap.put(date, d);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            indicateModified();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        } else if (!targetDateE.equalsIgnoreCase(targetDateS) \u0026\u0026 editedDateE.equalsIgnoreCase(editedDateS)) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            Date date \u003d new Date(editedDateS);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            if (!dayMap.containsKey(date)) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                dayMap.put(date, new Day(date));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                Day a \u003d dayMap.get(date);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                dayMap.remove(date, a);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                days.add(a);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                dayMap.put(date, a);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            Day d \u003d dayMap.get(date);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            dayMap.remove(date, d);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            days.remove(d);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            d.addCategory(editedTask);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            addDay(d);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            dayMap.put(date, d);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            indicateModified();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        } else if (targetDateE.equalsIgnoreCase(targetDateS) \u0026\u0026 editedDateE.equalsIgnoreCase(editedDateS)) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            Date targetStartDate \u003d new Date(targetDateS);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            Date editedStartDate \u003d new Date(editedDateS);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            if (!targetStartDate.equals(editedStartDate)) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                if (!dayMap.containsKey(editedStartDate)) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                    dayMap.put(editedStartDate, new Day(editedStartDate));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                Day eD \u003d dayMap.get(editedStartDate);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                dayMap.remove(editedStartDate, eD);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                days.add(eD);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                days.remove(eD);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                eD.addCategory(editedTask);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                days.add(eD);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                dayMap.put(editedStartDate, eD);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                Day tD \u003d dayMap.get(targetStartDate);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                dayMap.remove(targetStartDate, tD);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                days.remove(tD);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                tD.removeCategory(target);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                days.add(tD);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                dayMap.put(targetStartDate, tD);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                indicateModified();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            Day tD \u003d dayMap.get(targetStartDate);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            dayMap.remove(targetStartDate, tD);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            days.remove(tD);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            tD.editCategory(target, editedTask);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            addDay(tD);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            dayMap.put(targetStartDate, tD);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            indicateModified();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Removes {@code key} from this {@code TaskBook}."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * {@code key} must exist in the task book."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void removeTask(Task key) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String dateS \u003d key.getStartDate().toString();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String dateE \u003d key.getEndDate().toString();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (dateS.equalsIgnoreCase(dateE)) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            Date date \u003d new Date(dateS);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            if (dayMap.containsKey(date)) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                Day d \u003d dayMap.get(date);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                dayMap.remove(date, d);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                days.remove(d);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                d.removeCategory(key);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                if (!d.isDayEmpty()) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                    days.add(d);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                    dayMap.put(date, d);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                tasks.remove(key);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                indicateModified();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        tasks.remove(key);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     * Sort tasks in the storage by given comparator."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public void sortTaskByDate(Comparator\u003cTask\u003e comparator) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        tasks.sortByDate(comparator);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        invalidationListenerManager.removeListener(listener);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Notifies listeners that the task book has been modified."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    protected void indicateModified() {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        invalidationListenerManager.callListeners(this);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return tasks.asUnmodifiableObservableList().size() + \" tasks\" + days.asUnmodifiableObservableList().size()"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                + \" days\";"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public ObservableList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return tasks.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public ObservableList\u003cDay\u003e getDayList() {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return days.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                || (other instanceof TaskBook // instanceof handles nulls"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                \u0026\u0026 tasks.equals(((TaskBook) other).tasks));"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return tasks.hashCode();"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 297,
      "BrittonAlone": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private Path taskBookFilePath \u003d Paths.get(\"data\" , \"taskbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private Path daysKeeperFilePath \u003d Paths.get(\"data\" , \"dayskeeper.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private Path exportCsvFilePath \u003d Paths.get(\"data\", \"tasketch.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    private Path accountListFilePath \u003d Paths.get(\"data\" , \"AccountList.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        setTaskBookFilePath(newUserPrefs.getTaskBookFilePath());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public Path getAccountListFilePath() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return accountListFilePath;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public Path getTaskBookFilePath() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return taskBookFilePath;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void setTaskBookFilePath(Path taskBookFilePath) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        requireNonNull(taskBookFilePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.taskBookFilePath \u003d taskBookFilePath;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public Path getExportCsvFilePath() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return exportCsvFilePath;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void setDaysKeeperFilePath(Path daysKeeperFilePath) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        requireNonNull(daysKeeperFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.daysKeeperFilePath \u003d daysKeeperFilePath;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                \u0026\u0026 taskBookFilePath.equals(o.taskBookFilePath)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                \u0026\u0026 daysKeeperFilePath.equals(o.daysKeeperFilePath)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                \u0026\u0026 exportCsvFilePath.equals(o.exportCsvFilePath)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                \u0026\u0026 taskBookFilePath.equals(o.taskBookFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return Objects.hash(guiSettings, taskBookFilePath);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        sb.append(\"\\nLocal taskBook data file location : \" + taskBookFilePath);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 6,
      "cheahzk": 17,
      "Zeyang-Li": 9,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/model/VersionedAccountList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": " * {@code AccountList} that keeps track of its own history."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "public class VersionedAccountList extends AccountList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    private final List\u003cReadOnlyAccountList\u003e accountListStateList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public VersionedAccountList(ReadOnlyAccountList initialState) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        accountListStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        accountListStateList.add(new AccountList(initialState));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * Saves a copy of the current {@code AccountList} state at the end of the state list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Undone states are removed from the state list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        accountListStateList.add(new AccountList(this));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        accountListStateList.subList(currentStatePointer + 1, accountListStateList.size()).clear();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * Restores the account list to its previous state."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        resetData(accountListStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * Restores the account list to its previously undone state."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        resetData(accountListStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * Returns true if {@code undo()} has account list states to undo."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * Returns true if {@code redo()} has stock list states to redo."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return currentStatePointer \u003c accountListStateList.size() - 1;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (!(other instanceof VersionedAccountList)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        VersionedAccountList otherVersionedAccountList \u003d (VersionedAccountList) other;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return super.equals(otherVersionedAccountList)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                \u0026\u0026 accountListStateList.equals(otherVersionedAccountList.accountListStateList)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                \u0026\u0026 currentStatePointer \u003d\u003d otherVersionedAccountList.currentStatePointer;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Thrown when trying to {@code undo()} but can\u0027t."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class NoUndoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        private NoUndoableStateException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            super(\"Current state pointer at start of accountListState list, unable to undo.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Thrown when trying to {@code redo()} but can\u0027t."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class NoRedoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        private NoRedoableStateException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            super(\"Current state pointer at end of accountListState list, unable to redo.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 33,
      "-": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/model/VersionedTaskBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * {@code TaskBook} that keeps track of its own history."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class VersionedTaskBook extends TaskBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final List\u003cReadOnlyTaskBook\u003e taskBookStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public VersionedTaskBook(ReadOnlyTaskBook initialState) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        taskBookStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        taskBookStateList.add(new TaskBook(initialState));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Saves a copy of the current {@code TaskBook} state at the end of the state list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Undone states are removed from the state list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        taskBookStateList.add(new TaskBook(this));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        taskBookStateList.subList(currentStatePointer + 1, taskBookStateList.size()).clear();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Restores the task book to its previous state."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        resetData(taskBookStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Restores the task book to its previously undone state."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        resetData(taskBookStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns true if {@code undo()} has task book states to undo."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns true if {@code redo()} has task book states to redo."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return currentStatePointer \u003c taskBookStateList.size() - 1;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (!(other instanceof VersionedTaskBook)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        VersionedTaskBook otherVersionedTaskBook \u003d (VersionedTaskBook) other;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return super.equals(otherVersionedTaskBook)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                \u0026\u0026 taskBookStateList.equals(otherVersionedTaskBook.taskBookStateList)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                \u0026\u0026 currentStatePointer \u003d\u003d otherVersionedTaskBook.currentStatePointer;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Thrown when trying to {@code undo()} but can\u0027t."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static class NoUndoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        private NoUndoableStateException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            super(\"Current state pointer at start of taskBookState list, unable to undo.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Thrown when trying to {@code redo()} but can\u0027t."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static class NoRedoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        private NoRedoableStateException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            super(\"Current state pointer at end of taskBookState list, unable to redo.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 110
    }
  },
  {
    "path": "src/main/java/seedu/address/model/account/Account.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "package seedu.address.model.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": " * Represents an Account in the stock list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "public class Account {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    private final Username username;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    private final Password password;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public Account(Username username, Password password) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        requireAllNonNull(username, password);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        this.username \u003d username;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public Username getUsername() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return username;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public Password getPassword() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return password;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * Returns true if both items of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * This defines a weaker notion of equality between two items."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public boolean isSameAccount(Account otherAccount) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (otherAccount \u003d\u003d this) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return otherAccount !\u003d null"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                \u0026\u0026 (otherAccount.getUsername().fullUsername.toLowerCase()).equals(getUsername().fullUsername"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                .toLowerCase());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * Returns true if both items have the same identity and data fields."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * This defines a stronger notion of equality between two items."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (!(other instanceof Account)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        Account otherAccount \u003d (Account) other;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return (otherAccount.getUsername().fullUsername.toLowerCase()).equals(getUsername().fullUsername.toLowerCase());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return Objects.hash(username, password);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        builder.append(getUsername());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/model/account/LoggedInAccount.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "package seedu.address.model.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": " * Represents a logged in Account in the model."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "public class LoggedInAccount {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    private Username username;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    private boolean loginStatus;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public LoggedInAccount() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        this.username \u003d null;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        this.loginStatus \u003d false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public Username getUsername() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return username;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public boolean getLoginStatus() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return loginStatus;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * Returns true if both items of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * This defines a weaker notion of equality between two items."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public boolean isSameAccount(LoggedInAccount otherAccount) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (otherAccount \u003d\u003d this) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return otherAccount !\u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                \u0026\u0026 (otherAccount.getUsername().fullUsername.toLowerCase()).equals(getUsername().fullUsername"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                .toLowerCase());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * Returns true if both items have the same identity and data fields."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * This defines a stronger notion of equality between two items."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (!(other instanceof LoggedInAccount)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        LoggedInAccount otherAccount \u003d (LoggedInAccount) other;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return (otherAccount.getUsername().fullUsername.toLowerCase()).equals(getUsername().fullUsername.toLowerCase());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return Objects.hash(username);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        builder.append(getUsername());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public void setLoggedInUser(Username username) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        this.username \u003d username;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        this.loginStatus \u003d true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public void setLoggedOutStatus() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        this.username \u003d null;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        this.loginStatus \u003d false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/model/account/Password.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "package seedu.address.model.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": " * Represents an Account\u0027s password in the stock list login command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPassword(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "public class Password {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final String MESSAGE_PASSWORD_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            \"Passwords should have no spaces and cannot be empty\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * The first character of the password must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final String PASSWORD_VALIDATION_REGEX \u003d \"^[^\\\\s]+$\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public final String fullPassword;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * Constructs a {@code Password}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * @param password A valid password."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public Password(String password) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        requireNonNull(password);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        checkArgument(isValidPassword(password), MESSAGE_PASSWORD_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        fullPassword \u003d password;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * Returns true if a given string is a valid password."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static boolean isValidPassword(String test) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return test.matches(PASSWORD_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return fullPassword;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                || (other instanceof Password // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                \u0026\u0026 fullPassword.equals(((Password) other).fullPassword)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return fullPassword.hashCode();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/model/account/UniqueAccountList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "package seedu.address.model.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.account.exceptions.AccountNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.account.exceptions.DuplicateAccountException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": " * A list of accounts that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": " * An account is considered unique by comparing using {@code Account#isSameAccount(Account)}. As such, adding and"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": " * updating of accounts uses Account#isSameAccount(Account) for equality so as to ensure that the account being added"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": " * or updated is unique in terms of identity in the UniqueAccountList. However, the removal of an account uses"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": " * Account#equals(Object) so as to ensure that the account with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": " * @see Account#isSameAccount(Account)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "public class UniqueAccountList {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    private final ObservableList\u003cAccount\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * Returns true if the list contains an equivalent account as the given argument."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public boolean contains(Account toCheck) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameAccount);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * Adds an account to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * The account must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public void add(Account toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            throw new DuplicateAccountException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * Replaces the account {@code target} in the list with {@code editedAccount}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * The account identity of {@code editedAccount} must not be the same as another existing account in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public void setAccount(Account target, Account editedAccount) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        requireAllNonNull(target, editedAccount);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            throw new AccountNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (!target.isSameAccount(editedAccount) \u0026\u0026 contains(editedAccount)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            throw new DuplicateAccountException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        internalList.set(index, editedAccount);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * Removes the equivalent account from the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * The account must exist in the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public void remove(Account toRemove) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            throw new AccountNotFoundException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public void setAccounts(UniqueAccountList replacement) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * Replaces the contents of this list with {@code accounts}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * {@code accounts} must not contain duplicate accounts."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public void setAccounts(List\u003cAccount\u003e accounts) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        requireAllNonNull(accounts);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (!accountsAreUnique(accounts)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            throw new DuplicateAccountException();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        internalList.setAll(accounts);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public ObservableList\u003cAccount\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    //@Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    //public Iterator\u003cAccount\u003e iterator() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    //    return internalList.iterator();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                || (other instanceof UniqueAccountList // instanceof handles nulls"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueAccountList) other).internalList));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * Returns true if {@code accounts} contains only unique accounts."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    private boolean accountsAreUnique(List\u003cAccount\u003e accounts) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        for (int i \u003d 0; i \u003c accounts.size() - 1; i++) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            for (int j \u003d i + 1; j \u003c accounts.size(); j++) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                if (accounts.get(i).isSameAccount(accounts.get(j))) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 145
    }
  },
  {
    "path": "src/main/java/seedu/address/model/account/Username.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "package seedu.address.model.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": " * Represents an Account\u0027s username in the stock list login command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidUsername(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "public class Username {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final String MESSAGE_USERNAME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            \"Usernames should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * The first character of the username must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final String USERNAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public final String fullUsername;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * Constructs a {@code Username}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * @param username A valid username."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public Username(String username) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        requireNonNull(username);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        checkArgument(isValidUsername(username), MESSAGE_USERNAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        fullUsername \u003d username;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * Returns true if a given string is a valid username."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static boolean isValidUsername(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return test.matches(USERNAME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return fullUsername;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                || (other instanceof Username // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                \u0026\u0026 fullUsername.equals(((Username) other).fullUsername)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return fullUsername.hashCode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/model/account/UsernameContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "package seedu.address.model.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": " * Tests that a {@code Account}\u0027s {@code Username} matches any of the keywords given."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "public class UsernameContainsKeywordsPredicate implements Predicate\u003cAccount\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public UsernameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public boolean test(Account account) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                .anyMatch(keyword -\u003e account.getUsername().fullUsername.toLowerCase().contains(keyword.toLowerCase()));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                || (other instanceof UsernameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                \u0026\u0026 keywords.equals(((UsernameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/account/UsernameMatchPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "package seedu.address.model.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": " * Tests that a {@code Account}\u0027s {@code Username} matches any of the keywords given."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "public class UsernameMatchPredicate implements Predicate\u003cAccount\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public UsernameMatchPredicate(String name) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public boolean test(Account account) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return name.equals(account.getUsername().toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                || (other instanceof UsernameMatchPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                \u0026\u0026 name.equals(((UsernameMatchPredicate) other).name)); // state check"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/model/account/exceptions/AccountNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "package seedu.address.model.account.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": " * Signals that the operation is unable to find the specified item."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "public class AccountNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/account/exceptions/DuplicateAccountException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "package seedu.address.model.account.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": " * Signals that the operation will result in duplicate Accounts (Accounts are considered duplicates if they have the"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": " * same name)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "public class DuplicateAccountException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public DuplicateAccountException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        super(\"Operation would result in duplicate accounts\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/day/Academic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.model.day;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Represents a Day\u0027s academic in the task book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class Academic extends Category {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            \"Academic time should only contain numbers \u0026 \u0027.\u0027, ie: 1.0\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d*\" + \"\\\\.\" + \"\\\\d*\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private String value;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Constructs a {@code Academic}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @param time A valid time."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public Academic(String time) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        value \u003d time;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns true if a given string is a valid start time."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static boolean isValidTime(String test) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Adding time after update"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @param result"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @return value"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public String addTime(double result) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        double t \u003d Double.parseDouble(value);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        t +\u003d result;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        value \u003d String.valueOf(t);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Deducting time after update"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @param result"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @return value"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public String removeTime(double result) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        double t \u003d Double.parseDouble(value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        t -\u003d result;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        value \u003d String.valueOf(t);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public double getTimeDouble() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        double t;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        double scale \u003d Math.pow(10, 2);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        t \u003d Double.parseDouble(value);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return Math.round(t * scale) / scale;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                || (other instanceof Academic // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                \u0026\u0026 value.equals(((Academic) other).value)); // state check"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return Objects.hash(value);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/model/day/Category.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.model.day;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * To extend an object to category."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class Category {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/day/Cca.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.model.day;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Represents a Day\u0027s cca in the task book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class Cca extends Category {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            \"Cca time should only contain numbers \u0026 \u0027.\u0027, ie: 3.0\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d\" + \"\\\\.\" + \"\\\\d\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private String value;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Constructs a {@code Academic}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @param time A valid time."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public Cca(String time) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        value \u003d time;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns true if a given string is a valid start time."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static boolean isValidTime(String test) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Adding time after update"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @param result"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @return value"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public String addTime(double result) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        double t \u003d Double.parseDouble(value);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        t +\u003d result;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        value \u003d String.valueOf(t);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Deducting time after update"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @param result"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @return value"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public String removeTime(double result) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        double t \u003d Double.parseDouble(value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        t -\u003d result;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        value \u003d String.valueOf(t);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public double getTimeDouble() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        double t;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        double scale \u003d Math.pow(10, 2);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        t \u003d Double.parseDouble(value);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return Math.round(t * scale) / scale;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                || (other instanceof Cca // instanceof handles nulls"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                \u0026\u0026 value.equals(((Cca) other).value)); // state check"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return Objects.hash(value);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/model/day/Date.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.model.day;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Represents a Day\u0027s date in the task book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDate(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class Date {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            \"Date should only contain numbers \u0026 -, 2 digits-2 digits-2digits, ie: 12-03-19\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            + \"Day should only contain numbers range from 01 to 31\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            + \"Month should only contain numbers range from 01 to 12\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{2}\" + \"-\" + \"\\\\d{2}\" + \"-\" + \"\\\\d{2}\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Constructs a {@code Date}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @param date A valid date."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public Date(String date) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        checkArgument(isValidDate(date), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        value \u003d date;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns true if a given string is a valid date."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (test.matches(VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            String[] spiltDate \u003d test.split(\"-\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            int day \u003d Integer.parseInt(spiltDate[0]);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            int month \u003d Integer.parseInt(spiltDate[1]);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            if (day \u003c 1 || day \u003e 31) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            if (month \u003c 1 || month \u003e 12) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                || (other instanceof Date // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                \u0026\u0026 value.equals(((Date) other).value)); // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/model/day/Day.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.model.day;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Categories;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Represents a day in the task book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class Day {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public final String dafault \u003d \"0.0\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final Date date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private Academic academic;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private Entertainment entertainment;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private Cca cca;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private Errand errand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private Other other;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public Day(Date date) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        requireAllNonNull(date);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.academic \u003d new Academic(dafault);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.entertainment \u003d new Entertainment(dafault);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.cca \u003d new Cca(dafault);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.errand \u003d new Errand(dafault);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.other \u003d new Other(dafault);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public Day(Date date, Academic academic, Entertainment entertainment, Cca cca, Errand errand, Other other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.academic \u003d academic;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.entertainment \u003d entertainment;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.cca \u003d cca;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.errand \u003d errand;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.other \u003d other;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public Academic getAcademic() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return academic;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public Entertainment getEntertainment() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return entertainment;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public Cca getCca() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return cca;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public Errand getErrand() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return errand;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public Other getOther() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return other;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * To add a time into the category for each task"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void addCategory(Task task) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String timeStart \u003d task.getStartTime().value;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String timeEnd \u003d task.getEndTime().value;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String category \u003d task.getCategories().value;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        switch(category) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        case Categories.CAT_ACADEMIC:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            academic.addTime(calculateTime(timeStart, timeEnd));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        case Categories.CAT_CCA:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            cca.addTime(calculateTime(timeStart, timeEnd));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        case Categories.CAT_ENTERTAINMENT:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            entertainment.addTime(calculateTime(timeStart, timeEnd));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        case Categories.CAT_ERRAND:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            errand.addTime(calculateTime(timeStart, timeEnd));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        case Categories.CAT_OTHER:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            other.addTime(calculateTime(timeStart, timeEnd));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * To remove a time into the category for each task"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void removeCategory(Task task) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String timeStart \u003d task.getStartTime().value;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String timeEnd \u003d task.getEndTime().value;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String category \u003d task.getCategories().value;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        switch(category) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        case Categories.CAT_ACADEMIC:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            academic.removeTime(calculateTime(timeStart, timeEnd));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        case Categories.CAT_CCA:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            cca.removeTime(calculateTime(timeStart, timeEnd));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        case Categories.CAT_ENTERTAINMENT:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            entertainment.removeTime(calculateTime(timeStart, timeEnd));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        case Categories.CAT_ERRAND:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            errand.removeTime(calculateTime(timeStart, timeEnd));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        case Categories.CAT_OTHER:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            other.removeTime(calculateTime(timeStart, timeEnd));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * To edit a time into the category for each task"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void editCategory(Task task, Task editedTask) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String taskCategory \u003d task.getCategories().value;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String editedTaskCategory \u003d editedTask.getCategories().value;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (taskCategory.equals(editedTaskCategory)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            removeCategory(task);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            addCategory(editedTask);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            removeCategory(task);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            addCategory(editedTask);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * To calculate time into the category for each task"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public double calculateTime(String start, String end) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String[] splitStart \u003d start.split(\"\\\\.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String[] splitEnd \u003d end.split(\"\\\\.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        int startHour \u003d Integer.valueOf(splitStart[0]);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        int startMinute \u003d Integer.valueOf(splitStart[1]);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        int endHour \u003d Integer.valueOf(splitEnd[0]);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        int endMinute \u003d Integer.valueOf(splitEnd[1]);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        int s \u003d startHour * 60 + startMinute;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        int e \u003d endHour * 60 + endMinute;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        int duration \u003d e - s;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        int hours \u003d duration / 60;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        int mins \u003d duration % 60;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        builder.append(hours)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .append(\".\")"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .append(mins);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String st \u003d builder.toString();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return Double.valueOf(st);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * To check whether each categories for a task is empty"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean isDayEmpty() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        double academicTime;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        double ccaTime;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        double entertainmentTime;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        double errandTime;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        double otherTime;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        academicTime \u003d academic.getTimeDouble();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        ccaTime \u003d cca.getTimeDouble();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        entertainmentTime \u003d entertainment.getTimeDouble();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        errandTime \u003d errand.getTimeDouble();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        otherTime \u003d other.getTimeDouble();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (academicTime \u003d\u003d 0 \u0026\u0026 ccaTime \u003d\u003d 0 \u0026\u0026 entertainmentTime \u003d\u003d 0 \u0026\u0026 errandTime \u003d\u003d 0 \u0026\u0026 otherTime \u003d\u003d 0) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns true if both days of the same topic have at least one other identity field that is the same."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * This defines a weaker notion of equality between two days."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean isSameDay(Day otherDay) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (otherDay \u003d\u003d this) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return otherDay !\u003d null"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                \u0026\u0026 otherDay.getDate().equals(getDate());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns true if both days have the same identity and data fields."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * This defines a stronger notion of equality between two tasks."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (!(other instanceof Day)) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Day otherDay \u003d (Day) other;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return otherDay.getDate().equals(getDate());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return Objects.hash(date, academic, entertainment, cca, errand, other);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        builder.append(getDate())"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .append(\" AcademicTime: \")"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .append(getAcademic().getTime())"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .append(\" EntertainmentTime: \")"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .append(getEntertainment().getTime())"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .append(\" CcaTime: \")"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .append(getCca().getTime())"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .append(\" ErrandTime: \")"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .append(getErrand().getTime())"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .append(\" OtherTime: \")"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .append(getOther().getTime());"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 250
    }
  },
  {
    "path": "src/main/java/seedu/address/model/day/DayContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.model.day;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Tests that a {@code Day}\u0027s {@code date} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class DayContainsKeywordsPredicate implements Predicate\u003cDay\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public DayContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean test(Day day) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(day.getDate().value, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                || (other instanceof DayContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                \u0026\u0026 keywords.equals(((DayContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/day/Entertainment.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.model.day;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Represents a Day\u0027s entertainment in the task book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class Entertainment extends Category {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            \"Entertainment time should only contain numbers \u0026 \u0027.\u0027, ie: 1.0\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d\" + \"\\\\.\" + \"\\\\d\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private String value;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Constructs a {@code Academic}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @param time A valid time."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public Entertainment(String time) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        value \u003d time;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns true if a given string is a valid start time."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static boolean isValidTime(String test) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Adding time after update"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @param result"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @return value"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public String addTime(double result) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        double t \u003d Double.parseDouble(value);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        t +\u003d result;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        value \u003d String.valueOf(t);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Deducting time after update"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @param result"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @return value"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public String removeTime(double result) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        double t \u003d Double.parseDouble(value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        t -\u003d result;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        value \u003d String.valueOf(t);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public double getTimeDouble() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        double t;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        double scale \u003d Math.pow(10, 2);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        t \u003d Double.parseDouble(value);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return Math.round(t * scale) / scale;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                || (other instanceof Entertainment // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                \u0026\u0026 value.equals(((Entertainment) other).value)); // state check"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return Objects.hash(value);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/model/day/Errand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.model.day;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Represents a Day\u0027s errand in the task book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class Errand extends Category {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            \"Errand time should only contain numbers \u0026 \u0027.\u0027, ie: 1.0\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d*\" + \"\\\\.\" + \"\\\\d*\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private String value;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Constructs a {@code Academic}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @param time A valid time."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public Errand(String time) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        value \u003d time;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns true if a given string is a valid start time."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static boolean isValidTime(String test) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Adding time after update"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @param result"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @return value"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public String addTime(double result) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        double t \u003d Double.parseDouble(value);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        t +\u003d result;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        value \u003d String.valueOf(t);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Deducting time after update"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @param result"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @return value"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public String removeTime(double result) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        double t \u003d Double.parseDouble(value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        t -\u003d result;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        value \u003d String.valueOf(t);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public double getTimeDouble() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        double t;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        double scale \u003d Math.pow(10, 2);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        t \u003d Double.parseDouble(value);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return Math.round(t * scale) / scale;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                || (other instanceof Errand // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                \u0026\u0026 value.equals(((Errand) other).value)); // state check"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return Objects.hash(value);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/model/day/Other.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.model.day;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Represents a Day\u0027s other in the task book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class Other extends Category {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            \"Other time should only contain numbers \u0026 \u0027.\u0027, ie: 1.0\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d\" + \"\\\\.\" + \"\\\\d\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private String value;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Constructs a {@code Academic}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @param time A valid time."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public Other(String time) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        value \u003d time;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns true if a given string is a valid start time."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static boolean isValidTime(String test) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Adding time after update"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @param result"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @return value"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public String addTime(double result) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        double t \u003d Double.parseDouble(value);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        t +\u003d result;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        value \u003d String.valueOf(t);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Deducting time after update"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @param result"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @return value"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public String removeTime(double result) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        double t \u003d Double.parseDouble(value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        t -\u003d result;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        value \u003d String.valueOf(t);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public double getTimeDouble() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        double t;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        double scale \u003d Math.pow(10, 2);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        t \u003d Double.parseDouble(value);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return Math.round(t * scale) / scale;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                || (other instanceof Other // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                \u0026\u0026 value.equals(((Other) other).value)); // state check"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return Objects.hash(value);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/model/day/UniqueDayList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.model.day;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.day.exceptions.DayNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.day.exceptions.DuplicateDayException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * A list of days that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * A day is considered unique by comparing using {@code Day#isSameDay(Day)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * days uses Day#isSameDay(Day) for equality so as to ensure that the day being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * unique in terms of identity in the UniqueDayList. However, the removal of a day uses Day#equals(Day) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * as to ensure that the day with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * @see Day#isSameDay(Day)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class UniqueDayList implements Iterable\u003cDay\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final ObservableList\u003cDay\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final ObservableList\u003cDay\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns true if the list contains an equivalent day as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean contains(Day toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameDay);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Adds a day to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * The day must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void add(Day toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new DuplicateDayException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Removes the equivalent day from the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * The day must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void remove(Day toRemove) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new DayNotFoundException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Clear all the days in the list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        internalList.clear();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void setDays(UniqueDayList replacement) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Replaces the contents of this list with {@code days}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * {@code days} must not contain duplicate days."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void setDays(List\u003cDay\u003e days) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        requireAllNonNull(days);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (!daysAreUnique(days)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new DuplicateDayException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        internalList.setAll(days);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public ObservableList\u003cDay\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public Iterator\u003cDay\u003e iterator() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                || (other instanceof UniqueDayList // instanceof handles nulls"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueDayList) other).internalList));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns true if {@code days} contains only unique days."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private boolean daysAreUnique(List\u003cDay\u003e days) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        for (int i \u003d 0; i \u003c days.size() - 1; i++) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            for (int j \u003d i + 1; j \u003c days.size(); j++) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                if (days.get(i).isSameDay(days.get(j))) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "cheahzk": 125
    }
  },
  {
    "path": "src/main/java/seedu/address/model/day/exceptions/DayNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.model.day.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class DayNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/day/exceptions/DuplicateDayException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.model.day.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Signals that the operation will result in duplicate Days (Tasks are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class DuplicateDayException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public DuplicateDayException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        super(\"Operation would result in duplicate days\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Tag in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            \"Task name should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 3,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Categories.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Represents a Task\u0027s category in the task book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidCategories(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class Categories {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String CAT_ACADEMIC \u003d \"a\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String CAT_CCA \u003d \"c\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String CAT_ENTERTAINMENT \u003d \"e\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String CAT_ERRAND \u003d \"r\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String CAT_OTHER \u003d \"o\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            \"Category should contains 1 alphabet\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            + \"Should be a (academic), c (cca), e (entertainment), r (errand), o (other)\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[acero]\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Constructs a {@code Categories}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @param categories A valid categories."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public Categories(String categories) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        requireNonNull(categories);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        checkArgument(isValidCategories(categories), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        value \u003d categories;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (value.equalsIgnoreCase(CAT_ACADEMIC)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            fullName \u003d \"Academic\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        } else if (value.equalsIgnoreCase(CAT_CCA)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            fullName \u003d \"Cca\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        } else if (value.equalsIgnoreCase(CAT_ENTERTAINMENT)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            fullName \u003d \"Entertainment\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        } else if (value.equalsIgnoreCase(CAT_ERRAND)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            fullName \u003d \"Errand\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        } else if (value.equalsIgnoreCase(CAT_OTHER)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            fullName \u003d \"Other\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            fullName \u003d \"Invalid\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns true if a given string is a valid category."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static boolean isValidCategories(String test) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                || (other instanceof Categories // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                \u0026\u0026 value.equals(((Categories) other).value)); // state check"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Description.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Represents a Task\u0027s description in the task book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDescription(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Description can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * The first character of the description must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\w].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Constructs an {@code Description}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @param description A valid description."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        checkArgument(isValidDescription(description), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        value \u003d description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns true if a given string is a valid description."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                || (other instanceof Description // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                \u0026\u0026 value.equals(((Description) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/EndDate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Represents a Task\u0027s endDate in the task book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEndDate(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class EndDate {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            \"End date should only contain numbers \u0026 -, 2 digits-2 digits-2digits, ie: 12-03-19\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            + \"Day should only contain numbers range from 01 to 31\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            + \"Month should only contain numbers range from 01 to 12\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{2}\" + \"-\" + \"\\\\d{2}\" + \"-\" + \"\\\\d{2}\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Constructs a {@code StartDate}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @param date A valid date."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public EndDate(String date) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        checkArgument(isValidEndDate(date), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        value \u003d date;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns true if a given string is a valid date."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static boolean isValidEndDate(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (test.matches(VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            String[] spiltDate \u003d test.split(\"-\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            int day \u003d Integer.parseInt(spiltDate[0]);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            int month \u003d Integer.parseInt(spiltDate[1]);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            if (day \u003c 1 || day \u003e 31) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            if (month \u003c 1 || month \u003e 12) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                || (other instanceof EndDate // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                \u0026\u0026 value.equals(((EndDate) other).value)); // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/EndTime.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Represents a Task\u0027s startTime in the task book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEndTime(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class EndTime {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            \"Time should only contain numbers \u0026 \u0027.\u0027, 2 digits\u0027.\u00272digits, ie: 13.00\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            + \"Hours should only contain numbers range from 00 to 23\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            + \"Minutes should only contain numbers range from 00 to 59\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{2}\" + \"\\\\.\" + \"\\\\d{2}\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Constructs a {@code StartTime}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @param time A valid time."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public EndTime(String time) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        checkArgument(isValidEndTime(time), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        value \u003d time;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns true if a given string is a valid start time."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static boolean isValidEndTime(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (test.matches(VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            String[] splitTime \u003d test.split(\"\\\\.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            int hour \u003d Integer.parseInt(splitTime[0]);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            int minute \u003d Integer.parseInt(splitTime[1]);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            if (hour \u003c 0 || hour \u003e 23) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            if (minute \u003c 0 || minute \u003e 59) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Get double version of time."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public double getTimeDouble(String time) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        double t;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        double scale \u003d Math.pow(10, 2);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        t \u003d Double.parseDouble(time);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return Math.round(t * scale) / scale;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                || (other instanceof EndTime // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                \u0026\u0026 value.equals(((EndTime) other).value)); // state check"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Name.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Represents a Task\u0027s topic in the task book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            \"Task name should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * The first character of the topic must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns true if a given string is a valid topic."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 5,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/StartDate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Represents a Task\u0027s startDate in the task book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidStartDate(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class StartDate {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            \"Start date should only contain numbers \u0026 -, 2 digits-2 digits-2digits, ie: 12-03-19\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            + \"Day should only contain numbers range from 01 to 31\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            + \"Month should only contain numbers range from 01 to 12\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{2}\" + \"-\" + \"\\\\d{2}\" + \"-\" + \"\\\\d{2}\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Constructs a {@code StartDate}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @param date A valid date."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public StartDate(String date) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        checkArgument(isValidStartDate(date), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        value \u003d date;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns true if a given string is a valid date."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static boolean isValidStartDate(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (test.matches(VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            String[] spiltDate \u003d test.split(\"-\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            int day \u003d Integer.parseInt(spiltDate[0]);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            int month \u003d Integer.parseInt(spiltDate[1]);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            if (day \u003c 1 || day \u003e 31) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            if (month \u003c 1 || month \u003e 12) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                || (other instanceof StartDate // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                \u0026\u0026 value.equals(((StartDate) other).value)); // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/StartTime.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Represents a Task\u0027s startTime in the task book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidStartTime(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class StartTime {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            \"Time should only contain numbers \u0026 \u0027.\u0027, 2 digits\u0027.\u00272digits, ie: 13.00\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            + \"Hours should only contain numbers range from 00 to 23\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            + \"Minutes should only contain numbers range from 00 to 59\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{2}\" + \"\\\\.\" + \"\\\\d{2}\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Constructs a {@code StartTime}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @param time A valid time."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public StartTime(String time) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        checkArgument(isValidStartTime(time), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        value \u003d time;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns true if a given string is a valid start time."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static boolean isValidStartTime(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (test.matches(VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            String[] splitTime \u003d test.split(\"\\\\.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            int hour \u003d Integer.parseInt(splitTime[0]);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            int minute \u003d Integer.parseInt(splitTime[1]);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            if (hour \u003c 0 || hour \u003e 23) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            if (minute \u003c 0 || minute \u003e 59) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Get double version of time."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public double getTimeDouble(String time) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        double t;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        double scale \u003d Math.pow(10, 2);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        t \u003d Double.parseDouble(time);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return Math.round(t * scale) / scale;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                || (other instanceof StartTime // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                \u0026\u0026 value.equals(((StartTime) other).value)); // state check"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Task.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Represents a Task in the task book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final StartDate startDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final EndDate endDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final StartTime startTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final EndTime endTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final Categories categories;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public Task(Name name, StartDate startDate, StartTime startTime, EndDate endDate, EndTime endTime,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Description description, Categories categories, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        requireAllNonNull(name, startDate, endDate, startTime, endTime, description, categories, tags);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.categories \u003d categories;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public StartDate getStartDate() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public EndDate getEndDate() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return endDate;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public StartTime getStartTime() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return startTime;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public EndTime getEndTime() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return endTime;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public Categories getCategories() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return categories;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns true if both tasks of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * This defines a weaker notion of equality between two tasks."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean isSameTask(Task otherTask) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (otherTask \u003d\u003d this) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return otherTask !\u003d null"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                \u0026\u0026 otherTask.getName().equals(getName());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns true if both tasks have the same identity and data fields."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * This defines a stronger notion of equality between two tasks."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (!(other instanceof Task)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Task otherTask \u003d (Task) other;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return otherTask.getName().equals(getName());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return Objects.hash(name, startDate, startTime, endDate, endTime, description, categories, tags);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .append(\" StartDate: \")"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .append(getStartDate())"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .append(\" StartTime: \")"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .append(getStartTime())"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .append(\" EndDate: \")"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .append(getEndDate())"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .append(\" EndTime: \")"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .append(getEndTime())"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .append(\" Description: \")"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .append(\" Category: \")"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .append(getCategories().value)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 141
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/TaskContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Tests that a {@code Task}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class TaskContainsKeywordsPredicate implements Predicate\u003cTask\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public TaskContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean test(Task task) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(task.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                || (other instanceof TaskContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                \u0026\u0026 keywords.equals(((TaskContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 8,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/UniqueTaskList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * A list of tasks that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * A task is considered unique by comparing using {@code Task#isSameTask(Task)}. As such, adding and updating of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * tasks uses Task#isSameTask(Task) for equality so as to ensure that the task being added or updated is"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * unique in terms of identity in the UniqueTaskList. However, the removal of a task uses Task#equals(Object) so"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * as to ensure that the task with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * @see Task#isSameTask(Task)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class UniqueTaskList implements Iterable\u003cTask\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final ObservableList\u003cTask\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final ObservableList\u003cTask\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns true if the list contains an equivalent task as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean contains(Task toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameTask);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Adds a task to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * The task must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void add(Task toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Replaces the task {@code target} in the list with {@code editedTask}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * The task identity of {@code editedTask} must not be the same as another existing task in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        requireAllNonNull(target, editedTask);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (!target.isSameTask(editedTask) \u0026\u0026 contains(editedTask)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        internalList.set(index, editedTask);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Removes the equivalent task from the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * The task must exist in the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void remove(Task toRemove) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void setTasks(UniqueTaskList replacement) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Replaces the contents of this list with {@code tasks}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * {@code tasks} must not contain duplicate tasks."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void setTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        requireAllNonNull(tasks);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (!tasksAreUnique(tasks)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        internalList.setAll(tasks);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public void sortByDate(Comparator\u003cTask\u003e comparator) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        FXCollections.sort(internalList, comparator);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public ObservableList\u003cTask\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public Iterator\u003cTask\u003e iterator() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                || (other instanceof UniqueTaskList // instanceof handles nulls"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueTaskList) other).internalList));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private boolean tasksAreUnique(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size() - 1; i++) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            for (int j \u003d i + 1; j \u003c tasks.size(); j++) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                if (tasks.get(i).isSameTask(tasks.get(j))) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "cheahzk": 138,
      "BrittonAlone": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/exceptions/DuplicateTaskException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.model.task.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Signals that the operation will result in duplicate Tasks (Tasks are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class DuplicateTaskException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public DuplicateTaskException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        super(\"Operation would result in duplicate tasks\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/exceptions/TaskNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.model.task.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class TaskNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleAccountDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.AccountList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.ReadOnlyAccountList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.account.Password;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.account.Username;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": " * Contains utility methods for populating {@code AccountList} with sample data."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "public class SampleAccountDataUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static Account[] getSampleAccounts() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return new Account[] {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            new Account(new Username(\"admin\"), new Password(\"admin\"))"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        };"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static ReadOnlyAccountList getSampleAccountList() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        AccountList sampleSl \u003d new AccountList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        for (Account sampleAccount : getSampleAccounts()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            sampleSl.addAccount(sampleAccount);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return sampleSl;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.ReadOnlyTaskBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.TaskBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.day.Academic;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.day.Cca;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.day.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.day.Day;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.day.Entertainment;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.day.Errand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.day.Other;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Categories;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.EndDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.EndTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.StartDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.StartTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Contains utility methods for populating {@code TaskBook} with sample data."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final Day SAMPLE_DAYS \u003d new Day(new Date(\"15-03-19\"), new Academic(\"3.0\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            new Entertainment(\"0.0\"), new Cca(\"0.0\"), new Errand(\"0.0\"), new Other(\"0.0\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static Task[] getSampleTasks() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return new Task[] {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            new Task(new Name(\"Revise CS2113T\"), new StartDate(\"15-03-19\"), new StartTime(\"14.00\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                new EndDate(\"15-03-19\"), new EndTime(\"17.00\"), new Description(\"Class diagram\"), new Categories(\"a\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                getTagSet(\"CS2113T\")),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            new Task(new Name(\"Do CS2101\"), new StartDate(\"17-03-19\"), new StartTime(\"10.00\"), new EndDate(\"17-03-19\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                new EndTime(\"14.00\"), new Description(\"User Guide\"), new Categories(\"a\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                getTagSet(\"CS2101\"))"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static Day[] getSampleDays() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return new Day[] {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            new Day(new Date(\"15-03-19\"), new Academic(\"3.0\"), new Entertainment(\"0.0\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                    new Cca(\"0.0\"), new Errand(\"0.0\"), new Other(\"0.0\")),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            new Day(new Date(\"17-03-19\"), new Academic(\"2.0\"), new Entertainment(\"0.0\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                    new Cca(\"0.0\"), new Errand(\"0.00\"), new Other(\"0.0\"))"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static ReadOnlyTaskBook getSampleTaskBook() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        TaskBook sampleTb \u003d new TaskBook();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        for (Task sampleTask : getSampleTasks()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            sampleTb.addTask(sampleTask);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return sampleTb;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 42,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/AccountListStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.ReadOnlyAccountList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": " * Represents a storage for {@link seedu.address.model.AccountList}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "public interface AccountListStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    Path getAccountListFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * Returns AccountList data as a {@link ReadOnlyAccountList}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    Optional\u003cReadOnlyAccountList\u003e readAccountList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * @see #getAccountListFilePath()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    Optional\u003cReadOnlyAccountList\u003e readAccountList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * Saves the given {@link ReadOnlyAccountList} to the storage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * @param accountList cannot be null."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * @throws Exception"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    void saveAccountList(ReadOnlyAccountList accountList) throws IOException, Exception;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * @throws Exception"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * @see #saveAccountList(ReadOnlyAccountList)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    void saveAccountList(ReadOnlyAccountList accountList, Path filePath) throws IOException, Exception;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAccountListStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.ReadOnlyAccountList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": " * A class to access AccountList data stored as an Json file on the hard disk."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "public class JsonAccountListStorage implements AccountListStorage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAccountListStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    private final Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * Reused from https://github.com/se-edu/addressbook-level4 solutions"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * @param filePath"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public JsonAccountListStorage(Path filePath) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public Path getAccountListFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public Optional\u003cReadOnlyAccountList\u003e readAccountList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return readAccountList(filePath);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * Similar to {@link #readAccountList()}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public Optional\u003cReadOnlyAccountList\u003e readAccountList(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            FileNotFoundException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            logger.info(\"AccountList file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        Optional\u003cJsonSerializableAccountList\u003e jsonAccountList \u003d JsonFileStorage.loadAccountListFromSaveFile(filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            return Optional.of(jsonAccountList.get().toModelType());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public void saveAccountList(ReadOnlyAccountList accountList) throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        saveAccountList(accountList, filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * Similar to {@link #saveAccountList(ReadOnlyAccountList)}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * @throws Exception"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public void saveAccountList(ReadOnlyAccountList accountList, Path filePath) throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        requireNonNull(accountList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        JsonFileStorage.saveAccountListToFile(filePath, new JsonSerializableAccountList(accountList));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 89
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedAccount.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.account.Password;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.account.Username;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": " * JAXB-friendly version of the Account."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "public class JsonAdaptedAccount {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Account\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    private String username;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    private String password;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * Constructs an {@code XmlAdaptedItem} with the given item details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public JsonAdaptedAccount(@JsonProperty(\"username\") String username, @JsonProperty(\"password\") String password) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        this.username \u003d username;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * Converts a given Account into this class for JAXB use."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedItem"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public JsonAdaptedAccount(Account source) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        username \u003d source.getUsername().fullUsername;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        password \u003d source.getPassword().toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * Converts this jaxb-friendly adapted account object into the model\u0027s Account object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted account"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public Account toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (username \u003d\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Username.class"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                    .getSimpleName()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (!Username.isValidUsername(username)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            throw new IllegalValueException(Username.MESSAGE_USERNAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        final Username modelUsername \u003d new Username(username);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (password \u003d\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Password.class"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                    .getSimpleName()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (!Password.isValidPassword(password)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            throw new IllegalValueException(Password.MESSAGE_PASSWORD_CONSTRAINTS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        final Password modelPassword \u003d new Password(password);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return new Account(modelUsername, modelPassword);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (!(other instanceof JsonAdaptedAccount)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        JsonAdaptedAccount otherAccount \u003d (JsonAdaptedAccount) other;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return Objects.equals(username, otherAccount.username)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                \u0026\u0026 Objects.equals(password, otherAccount.password);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 89
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedDay.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.day.Academic;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.day.Cca;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.day.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.day.Day;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.day.Entertainment;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.day.Errand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.day.Other;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Jackson-friendly version of {@link Day}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "class JsonAdaptedDay {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Date\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final String academic;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final String cca;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final String entertainment;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final String errand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final String other;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Constructs a {@code JsonAdaptedTask} with the given task details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public JsonAdaptedDay(@JsonProperty(\"date\") String date, @JsonProperty(\"AcademicTime\") String academic,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                          @JsonProperty(\"ccaTime\") String cca,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                          @JsonProperty(\"entertainmentTime\") String entertainment,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                          @JsonProperty(\"errandTime\") String errand, @JsonProperty(\"otherTime\") String other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.academic \u003d academic;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.cca \u003d cca;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.entertainment \u003d entertainment;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.errand \u003d errand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.other \u003d other;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Converts a given {@code Day} into this class for Jackson use."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public JsonAdaptedDay(Day source) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        date \u003d source.getDate().value;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        academic \u003d source.getAcademic().getTime();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        cca \u003d source.getCca().getTime();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        entertainment \u003d source.getEntertainment().getTime();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        errand \u003d source.getErrand().getTime();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        other \u003d source.getOther().getTime();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Converts this Jackson-friendly adapted day object into the model\u0027s {@code Day} object."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted day."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public Day toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (!Date.isValidDate(date)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new IllegalValueException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        final Date modelDate \u003d new Date(date);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (academic \u003d\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                    Academic.class.getSimpleName()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (!Academic.isValidTime(academic)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new IllegalValueException(Academic.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        final Academic modelAcademic \u003d new Academic(academic);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (cca \u003d\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                    Cca.class.getSimpleName()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (!Cca.isValidTime(cca)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new IllegalValueException(Cca.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        final Cca modelCca \u003d new Cca(cca);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (entertainment \u003d\u003d null) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                    Entertainment.class.getSimpleName()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (!Entertainment.isValidTime(entertainment)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new IllegalValueException(Entertainment.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        final Entertainment modelEntertainment \u003d new Entertainment(entertainment);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (errand \u003d\u003d null) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                    Errand.class.getSimpleName()));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (!Errand.isValidTime(errand)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new IllegalValueException(Errand.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        final Errand modelErrand \u003d new Errand(errand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (other \u003d\u003d null) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                    Other.class.getSimpleName()));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (!Other.isValidTime(other)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new IllegalValueException(Other.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        final Other modelOther \u003d new Other(other);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return new Day(modelDate, modelAcademic, modelEntertainment, modelCca, modelErrand, modelOther);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 121
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedTask.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Categories;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.EndDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.EndTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.StartDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.StartTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Jackson-friendly version of {@link Task}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "class JsonAdaptedTask {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Name\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final String startDate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final String startTime;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final String endDate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final String endTime;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final String categories;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Constructs a {@code JsonAdaptedTask} with the given task details."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public JsonAdaptedTask(@JsonProperty(\"name\") String name, @JsonProperty(\"start date\") String startDate,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            @JsonProperty(\"start time\") String startTime, @JsonProperty(\"end date\") String endDate,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            @JsonProperty(\"end time\") String endTime, @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            @JsonProperty(\"category\") String categories, @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.categories \u003d categories;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Converts a given {@code Task} into this class for Jackson use."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public JsonAdaptedTask(Task source) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        startDate \u003d source.getStartDate().value;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        startTime \u003d source.getStartTime().value;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        endDate \u003d source.getEndDate().value;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        endTime \u003d source.getEndTime().value;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        description \u003d source.getDescription().value;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        categories \u003d source.getCategories().value;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Converts this Jackson-friendly adapted task object into the model\u0027s {@code Task} object."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted task."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public Task toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        final List\u003cTag\u003e taskTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            taskTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (startDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                    StartDate.class.getSimpleName()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (!StartDate.isValidStartDate(startDate)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new IllegalValueException(StartDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        final StartDate modelStartDate \u003d new StartDate(startDate);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (startTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                    StartTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (!StartTime.isValidStartTime(startTime)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new IllegalValueException(StartTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        final StartTime modelStartTime \u003d new StartTime(startTime);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (endDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                    EndDate.class.getSimpleName()));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (!EndDate.isValidEndDate(endDate)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new IllegalValueException(EndDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        final EndDate modelEndDate \u003d new EndDate(endDate);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (endTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                    EndTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (!EndTime.isValidEndTime(endTime)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new IllegalValueException(EndTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        final EndTime modelEndTime \u003d new EndTime(endTime);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                    Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (!Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        final Description modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (categories \u003d\u003d null) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                    Categories.class.getSimpleName()));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (!Categories.isValidCategories(categories)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new IllegalValueException(Categories.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        final Categories modelCategories \u003d new Categories(categories);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(taskTags);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return new Task(modelName, modelStartDate, modelStartTime, modelEndDate, modelEndTime, modelDescription,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                modelCategories, modelTags);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 150,
      "BrittonAlone": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonFileStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " * Stores taskbook data in an Json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "public class JsonFileStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Saves the given taskbook data to the specified file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static void saveDataToFile(Path file, JsonSerializableTaskBook taskBook)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            throws FileNotFoundException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            JsonUtil.saveJsonFile(taskBook, file);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * Stores AccountList data in an Json file"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static void saveAccountListToFile(Path file, JsonSerializableAccountList accountList)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            throws FileNotFoundException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            JsonUtil.saveJsonFile(accountList, file);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Returns task book in the file or an empty address book"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static Optional\u003cJsonSerializableTaskBook\u003e loadDataFromSaveFile(Path file) throws DataConversionException,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            FileNotFoundException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return JsonUtil.readJsonFile(file, JsonSerializableTaskBook.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static Optional\u003cJsonSerializableAccountList\u003e loadAccountListFromSaveFile(Path file)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            throws DataConversionException,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            FileNotFoundException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return JsonUtil.readJsonFile(file, JsonSerializableAccountList.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 18,
      "Zeyang-Li": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableAccountList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.AccountList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.ReadOnlyAccountList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": " * An Immutable AccountList that is serializable to Json format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "@JsonRootName(value \u003d \"Source\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "public class JsonSerializableAccountList {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ACCOUNT \u003d \"Account list contains duplicate account(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    private final List\u003cJsonAdaptedAccount\u003e accounts \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * Constructs a {@code JsonSerializableAccountList} with the given accounts."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public JsonSerializableAccountList(@JsonProperty(\"accounts\") List\u003cJsonAdaptedAccount\u003e accounts) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        this.accounts.addAll(accounts);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * Conversion"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public JsonSerializableAccountList(ReadOnlyAccountList src) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        accounts.addAll(src.getAccountList().stream().map(JsonAdaptedAccount::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * Conversion with filtered accounts instead of the whole AccountList."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public JsonSerializableAccountList(ObservableList\u003cAccount\u003e filteredAccountList) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        accounts.addAll(filteredAccountList.stream().map(JsonAdaptedAccount::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * Converts account list into the model\u0027s {@code AccountList} object."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * {@code XmlAdaptedAccount}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public AccountList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        AccountList accountList \u003d new AccountList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        for (JsonAdaptedAccount p : accounts) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            Account account \u003d p.toModelType();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            if (accountList.hasAccount(account)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_ACCOUNT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            accountList.addAccount(account);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return accountList;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (!(other instanceof JsonSerializableAccountList)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return accounts.equals(((JsonSerializableAccountList) other).accounts);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableTaskBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.ReadOnlyTaskBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.TaskBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * An Immutable TaskBook that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "@JsonRootName(value \u003d \"aaaaa\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "public class JsonSerializableTaskBook {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"Tasks list contains duplicate task(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_DAY \u003d \"Days list contains duplicate day(s).\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final List\u003cJsonAdaptedTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final List\u003cJsonAdaptedDay\u003e days \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Constructs a {@code JsonSerializableTaskBook} with the given tasks."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public JsonSerializableTaskBook(@JsonProperty(\"tasks\") List\u003cJsonAdaptedTask\u003e tasks) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.tasks.addAll(tasks);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Converts a given {@code ReadOnlyTaskBook} into this class for Jackson use."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableTaskBook}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public JsonSerializableTaskBook(ReadOnlyTaskBook source) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        tasks.addAll(source.getTaskList().stream().map(JsonAdaptedTask::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        days.addAll(source.getDayList().stream().map(JsonAdaptedDay::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Conversion with filtered tasks instead of the whole task book."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public JsonSerializableTaskBook(ObservableList\u003cTask\u003e filteredPersons) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        tasks.addAll(filteredPersons.stream().map(JsonAdaptedTask::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Converts this task book into the model\u0027s {@code TaskBook} object."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public TaskBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        TaskBook taskBook \u003d new TaskBook();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        for (JsonAdaptedTask jsonAdaptedTask : tasks) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            Task task \u003d jsonAdaptedTask.toModelType();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            if (taskBook.hasTask(task)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            taskBook.addTask(task);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return taskBook;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        if (!(other instanceof JsonSerializableTaskBook)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return tasks.equals(((JsonSerializableTaskBook) other).tasks);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 1,
      "cheahzk": 61,
      "Zeyang-Li": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonTaskBookStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.ReadOnlyTaskBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * A class to access TaskBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class JsonTaskBookStorage implements TaskBookStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonTaskBookStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private Path backupPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public JsonTaskBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        this.backupPath \u003d Paths.get(filePath.toString() + \".backup\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public Path getTaskBookFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public Optional\u003cReadOnlyTaskBook\u003e readTaskBook() throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return readTaskBook(filePath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Similar to {@link #readTaskBook()}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public Optional\u003cReadOnlyTaskBook\u003e readTaskBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Optional\u003cJsonSerializableTaskBook\u003e jsonTaskBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                filePath, JsonSerializableTaskBook.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (!jsonTaskBook.isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            return Optional.of(jsonTaskBook.get().toModelType());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void saveTaskBook(ReadOnlyTaskBook taskBook) throws IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        saveTaskBook(taskBook, filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Similar to {@link #saveTaskBook(ReadOnlyTaskBook)}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void saveTaskBook(ReadOnlyTaskBook taskBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        requireNonNull(taskBook);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableTaskBook(taskBook), filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Similar to {@link #backupTaskBook(ReadOnlyTaskBook)}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public void backupTaskBook(ReadOnlyTaskBook taskBook) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        saveTaskBook(taskBook, backupPath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 79,
      "Zeyang-Li": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.commons.events.model.AccountListChangedEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.commons.events.model.TaskBookChangedEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.ReadOnlyAccountList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.ReadOnlyTaskBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "public interface Storage extends TaskBookStorage, UserPrefsStorage, AccountListStorage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    Path getTaskBookFilePath();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    Optional\u003cReadOnlyTaskBook\u003e readTaskBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    Optional\u003cReadOnlyAccountList\u003e readAccountList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    void saveTaskBook(ReadOnlyTaskBook taskBook) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    void saveAccountList(ReadOnlyAccountList accountList) throws IOException, Exception;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Saves the current version of the Address Book to the hard disk."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     *   Creates the data file if it is missing."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    void handleTaskBookChangedEvent(TaskBookChangedEvent abce);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * Saves the current version of the Account List to the hard disk."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     *   Creates the data file if it is missing."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * @throws Exception"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    void handleAccountListChangedEvent(AccountListChangedEvent accountList) throws Exception;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 15,
      "cheahzk": 4,
      "Zeyang-Li": 9,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.commons.events.model.AccountListChangedEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.commons.events.model.TaskBookChangedEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.ReadOnlyAccountList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.ReadOnlyTaskBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Manages storage of Tasketch data in local storage."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private TaskBookStorage taskBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    private AccountListStorage accountListStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public StorageManager(TaskBookStorage taskBookStorage, UserPrefsStorage userPrefsStorage, AccountListStorage"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            accountListStorage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.taskBookStorage \u003d taskBookStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        this.accountListStorage \u003d accountListStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TaskBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public Path getTaskBookFilePath() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return taskBookStorage.getTaskBookFilePath();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public Optional\u003cReadOnlyTaskBook\u003e readTaskBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return readTaskBook(taskBookStorage.getTaskBookFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public Optional\u003cReadOnlyTaskBook\u003e readTaskBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return taskBookStorage.readTaskBook(filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void saveTaskBook(ReadOnlyTaskBook taskBook) throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        saveTaskBook(taskBook, taskBookStorage.getTaskBookFilePath());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void saveTaskBook(ReadOnlyTaskBook taskBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        taskBookStorage.saveTaskBook(taskBook, filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public void backupTaskBook(ReadOnlyTaskBook taskBook) throws IOException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        taskBookStorage.backupTaskBook(taskBook);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public void handleTaskBookChangedEvent(TaskBookChangedEvent event) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            saveTaskBook(event.data);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            new DataSavingExceptionEvent(e);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public Path getAccountListFilePath() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return accountListStorage.getAccountListFilePath();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public Optional\u003cReadOnlyAccountList\u003e readAccountList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return readAccountList(accountListStorage.getAccountListFilePath());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public Optional\u003cReadOnlyAccountList\u003e readAccountList(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return accountListStorage.readAccountList(filePath);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public void saveAccountList(ReadOnlyAccountList accountList) throws Exception {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        saveAccountList(accountList, accountListStorage.getAccountListFilePath());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public void saveAccountList(ReadOnlyAccountList accountList, Path filePath) throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        accountListStorage.saveAccountList(accountList, filePath);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public void handleAccountListChangedEvent(AccountListChangedEvent event) throws Exception {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            saveAccountList(event.data);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            raise(new DataSavingExceptionEvent(e));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    private void raise(DataSavingExceptionEvent dataSavingExceptionEvent) {}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 48,
      "cheahzk": 15,
      "Zeyang-Li": 18,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/TaskBookStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.ReadOnlyTaskBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Represents a storage for {@link seedu.address.model.TaskBook}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public interface TaskBookStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    Path getTaskBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns TaskBook data as a {@link ReadOnlyTaskBook}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    Optional\u003cReadOnlyTaskBook\u003e readTaskBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @see #getTaskBookFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    Optional\u003cReadOnlyTaskBook\u003e readTaskBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Saves the given {@link ReadOnlyTaskBook} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @param taskBook cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    void saveTaskBook(ReadOnlyTaskBook taskBook) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @see #saveTaskBook(ReadOnlyTaskBook)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    void saveTaskBook(ReadOnlyTaskBook taskBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Backup the given {@link ReadOnlyTaskBook} to a temporary local backup file."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @param taskBook cannot be null."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    void backupTaskBook(ReadOnlyTaskBook taskBook) throws IOException;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 45,
      "Zeyang-Li": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BrowserPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The Browser Panel of the App."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final URL DEFAULT_PAGE \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(MainApp.class.getResource(FXML_FILE_FOLDER + \"default.html\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SEARCH_PAGE_URL \u003d \"https://se-education.org/dummy-search-page/?name\u003d\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"BrowserPanel.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public BrowserPanel(ObservableValue\u003cTask\u003e selectedTask) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // To prevent triggering events for typing inside the loaded Web page."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().setOnKeyPressed(Event::consume);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Load person page when selected person changes."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        selectedTask.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                loadDefaultPage();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            loadTaskPage(newValue);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        loadDefaultPage();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private void loadTaskPage(Task task) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        loadPage(SEARCH_PAGE_URL + task.getName().fullName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void loadPage(String url) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e browser.getEngine().load(url));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads a default HTML file with a background that matches the general theme."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadDefaultPage() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        loadPage(DEFAULT_PAGE.toExternalForm());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 6,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.logic.commands.CommandFormatString.ADDACCOUNT_COMMAND_FORMATSTRING;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.logic.commands.CommandFormatString.ADD_COMMAND_FORMATSTRING;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.logic.commands.CommandFormatString.CLEAR_COMMAND_FORMATSTRING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.logic.commands.CommandFormatString.DELETEACCOUNT_COMMAND_FORMATSTRING;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.logic.commands.CommandFormatString.DELETE_COMMAND_FORMATSTRING;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.logic.commands.CommandFormatString.EDITACCOUNT_COMMAND_FORMATSTRING;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.logic.commands.CommandFormatString.EDIT_COMMAND_FORMATSTRING;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.logic.commands.CommandFormatString.EXPORT_COMMAND_FORMATSTRING;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.logic.commands.CommandFormatString.FINDACCOUNT_COMMAND_FORMATSTRING;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.logic.commands.CommandFormatString.FIND_COMMAND_FORMATSTRING;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.logic.commands.CommandFormatString.IMPORT_COMMAND_FORMATSTRING;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.logic.commands.CommandFormatString.LIST_COMMAND_FORMATSTRING;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.logic.commands.CommandFormatString.LOGIN_COMMAND_FORMATSTRING;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.logic.commands.CommandFormatString.MONTH_COMMAND_FORMATSTRING;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.logic.commands.CommandFormatString.REMIND_COMMAND_CATEGORY_FORMATSTRING;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.logic.commands.CommandFormatString.REMIND_COMMAND_FORMATSTRING;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.logic.commands.CommandFormatString.TIMELINE_COMMAND_FORMATSTRING;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.logic.commands.AddAccountCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.logic.commands.DeleteAccountCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.logic.commands.EditAccountCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.logic.commands.FindAccountCommand;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.logic.commands.ListAccountsCommand;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.logic.commands.LoginCommand;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.logic.commands.LoginStatusCommand;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.logic.commands.LogoutCommand;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.logic.commands.MonthCommand;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import seedu.address.logic.commands.RemindCommand;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.logic.commands.ShowTimeCommand;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.logic.commands.TimelineCommand;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final String NO_MATCHED_COMMAND \u003d \"No matched command!\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    private static final String[] CommandList;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        CommandList \u003d new String[] {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            AddCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            AddAccountCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            ClearCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            DeleteCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            DeleteAccountCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            EditCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            EditAccountCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            ExitCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            ExportCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            FindCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            FindAccountCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            HelpCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            HistoryCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            ImportCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            ListCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            ListAccountsCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            LoginCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            LoginStatusCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            LogoutCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            MonthCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            RemindCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            RedoCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            ShowTimeCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            TimelineCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            UndoCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        };"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e history;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListElementPointer historySnapshot;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor, List\u003cString\u003e history) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        this.history \u003d history;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d new ListElementPointer(history);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the key press event, {@code keyEvent}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * @throws Exception"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    private void handleKeyPress(KeyEvent keyEvent) throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (keyEvent.getCode()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        case UP:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            // As up and down buttons will alter the position of the caret,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            // consuming it causes the caret\u0027s position to remain unchanged"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToPreviousInput();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        case DOWN:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToNextInput();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        case TAB:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            if (Arrays.asList(CommandList).contains(commandTextField.getText())"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                    || commandTextField.getText().equals(RemindCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                            + \" \" + REMIND_COMMAND_FORMATSTRING)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                showParameterForCommand(commandTextField.getText());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                autoCompleteInputCommand();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            // let JavaFx handle the keypress"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * Show the format string of parameter for commands in Command line."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    private void showParameterForCommand(String text) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        String completedtext \u003d null;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        switch (text) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        case \"add\":"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            completedtext \u003d text + \" \" + ADD_COMMAND_FORMATSTRING;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            replaceText(completedtext);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        case \"addAccount\":"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            completedtext \u003d text + \" \" + ADDACCOUNT_COMMAND_FORMATSTRING;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            replaceText(completedtext);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        case \"clear\":"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            completedtext \u003d text + \" \" + CLEAR_COMMAND_FORMATSTRING;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            replaceText(completedtext);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            completedtext \u003d text + \" \" + DELETE_COMMAND_FORMATSTRING;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            replaceText(completedtext);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        case \"deleteAccount\":"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            completedtext \u003d text + \" \" + DELETEACCOUNT_COMMAND_FORMATSTRING;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            replaceText(completedtext);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        case \"edit\":"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            completedtext \u003d text + \" \" + EDIT_COMMAND_FORMATSTRING;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            replaceText(completedtext);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        case \"editAccount\":"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            completedtext \u003d text + \" \" + EDITACCOUNT_COMMAND_FORMATSTRING;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            replaceText(completedtext);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        case \"export\":"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            completedtext \u003d text + \" \" + EXPORT_COMMAND_FORMATSTRING;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            replaceText(completedtext);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            completedtext \u003d text + \" \" + FIND_COMMAND_FORMATSTRING;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            replaceText(completedtext);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        case \"findAccount\":"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            completedtext \u003d text + \" \" + FINDACCOUNT_COMMAND_FORMATSTRING;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            replaceText(completedtext);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        case \"import\":"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            completedtext \u003d text + \" \" + IMPORT_COMMAND_FORMATSTRING;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            replaceText(completedtext);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            completedtext \u003d text + \" \" + LIST_COMMAND_FORMATSTRING;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            replaceText(completedtext);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        case \"login\":"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            completedtext \u003d text + \" \" + LOGIN_COMMAND_FORMATSTRING;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            replaceText(completedtext);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        case \"month\":"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            completedtext \u003d text + \" \" + MONTH_COMMAND_FORMATSTRING;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            replaceText(completedtext);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        case \"remind\":"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            completedtext \u003d text + \" \" + REMIND_COMMAND_FORMATSTRING;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            replaceText(completedtext);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        case \"timeline\":"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            completedtext \u003d text + \" \" + TIMELINE_COMMAND_FORMATSTRING;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            replaceText(completedtext);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        case RemindCommand.COMMAND_WORD + \" \" + REMIND_COMMAND_FORMATSTRING:"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            completedtext \u003d RemindCommand.COMMAND_WORD + \" \" + REMIND_COMMAND_CATEGORY_FORMATSTRING;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            replaceText(completedtext);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    private void autoCompleteInputCommand() throws Exception {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        String text \u003d commandTextField.getText();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        String completedtext \u003d getCompletedtext(text);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        replaceText(completedtext);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    private String getCompletedtext(String text) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return getMostSimilarCommand(text, CommandList);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * Get the most similar command with the text field input."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    private String getMostSimilarCommand(String text, String[] commandlist) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        int length \u003d text.length();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        float highestRatio \u003d 0;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        String highestRatioCommand \u003d null;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        for (String commands: commandlist) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            if (length \u003c\u003d commands.length() \u0026\u0026 text.equals(commands.substring(0, length))) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                return commands;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            } else if (highestRatio \u003d\u003d 0 || highestRatio \u003c getSimilarityRatio(text, commands)) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                highestRatio \u003d getSimilarityRatio(text, commands);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                highestRatioCommand \u003d commands;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            //System.out.println(getSimilarityRatio(text, commands));"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (highestRatio \u003c 0.5) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            return NO_MATCHED_COMMAND;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return highestRatioCommand;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    private float getSimilarityRatio(String text, String commands) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        int max \u003d Math.max(text.length(), commands.length());"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return 1 - (float) compare(text, commands) / max;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * Compare input text with the command to get the similarity of them."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    private float compare(String text, String command) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        int[][] difference;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        int textLength \u003d text.length();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        int commandLength \u003d command.length();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        char ch1;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        char ch2;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        int temp;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (textLength \u003d\u003d 0) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            return commandLength;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (commandLength \u003d\u003d 0) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            return textLength;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        difference \u003d new int[textLength + 1][commandLength + 1];"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        for (int i \u003d 0; i \u003c\u003d textLength; i++) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            difference[i][0] \u003d i;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        for (int j \u003d 0; j \u003c\u003d commandLength; j++) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            difference[0][j] \u003d j;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d textLength; i++) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            ch1 \u003d text.charAt(i - 1);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            for (int j \u003d 1; j \u003c\u003d commandLength; j++) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                ch2 \u003d command.charAt(j - 1);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                if (ch1 \u003d\u003d ch2 || ch1 \u003d\u003d ch2 + 32 || ch1 + 32 \u003d\u003d ch2) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                    temp \u003d 0;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                    temp \u003d 1;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                difference[i][j] \u003d min(difference[i - 1][j] + 1,"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                                       difference[i][j - 1] + 1, difference[i - 1][j - 1] + temp);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return difference[textLength][commandLength];"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    private int min(int one, int two, int three) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return (one \u003d one \u003c two ? one : two) \u003c three ? one : three;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the previous input in {@code historySnapshot},"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a previous input in {@code historySnapshot}"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToPreviousInput() {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasPrevious()) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.previous());"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the next input in {@code historySnapshot},"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a next input in {@code historySnapshot}"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToNextInput() {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasNext()) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.next());"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets {@code CommandBox}\u0027s text field with {@code text} and"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "     * positions the caret to the end of the {@code text}."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    private void replaceText(String text) {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.setText(text);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.positionCaret(commandTextField.getText().length());"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private void handleCommandEntered() throws IOException, IllegalValueException {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "            historySnapshot.next();"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * Handles the tap button pressed event."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private void handleCommandtapped() throws IOException, IllegalValueException {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            historySnapshot.next();"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the history snapshot."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initHistory() {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d new ListElementPointer(history);"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "        // the user if she tries to navigate past the most-recent end of the historySnapshot."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot.add(\"\");"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "         * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, IllegalValueException, IOException;"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 263,
      "BrittonAlone": 2,
      "Zeyang-Li": 6,
      "-": 151
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/DayCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.day.Day;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * An UI component that displays information of a {@code Task}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class DayCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static final String FXML \u003d \"DayListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public final Day day;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private Label academic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private Label aName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private Label cca;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private Label cName;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private Label entertainment;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private Label entName;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private Label errand;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private Label errName;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private Label other;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private Label oName;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public DayCard(Day day, int displayedIndex) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        date.setText(day.getDate().value);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        academic.setText(day.getAcademic().getTime());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        cca.setText(day.getCca().getTime());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        entertainment.setText(day.getEntertainment().getTime());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        errand.setText(day.getErrand().getTime());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        other.setText(day.getOther().getTime());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        aName.setText(\"Academic: \");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        cName.setText(\"Cca: \");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        entName.setText(\"Entertainment: \");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        errName.setText(\"Errand: \");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        oName.setText(\"Other: \");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (!(other instanceof DayCard)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        DayCard card \u003d (DayCard) other;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                \u0026\u0026 day.equals(card.day);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/DayListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.day.Day;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Panel containing the list of tasks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class DayListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static final String FXML \u003d \"DayListPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(DayListPanel.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private ListView\u003cDay\u003e dayListView;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public DayListPanel(ObservableList\u003cDay\u003e dayList, ObservableValue\u003cDay\u003e selectedDay,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                        Consumer\u003cDay\u003e onSelectedDayChange) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        dayListView.setItems(dayList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        dayListView.setCellFactory(listView -\u003e new DayListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        dayListView.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            logger.fine(\"Selection in day list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            onSelectedDayChange.accept(newValue);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        });"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        selectedDay.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            logger.fine(\"Selected day changed to: \" + newValue);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            // Don\u0027t modify selection if we are already selecting the selected day,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            // otherwise we would have an infinite loop."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            if (Objects.equals(dayListView.getSelectionModel().getSelectedItem(), newValue)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                dayListView.getSelectionModel().clearSelection();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                int index \u003d dayListView.getItems().indexOf(newValue);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                dayListView.scrollTo(index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                dayListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        });"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Day} using a {@code DayCard}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    class DayListViewCell extends ListCell\u003cDay\u003e {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        protected void updateItem(Day day, boolean empty) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            super.updateItem(day, empty);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            if (empty || day \u003d\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                setGraphic(new DayCard(day, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/DefaultPage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import javafx.scene.control.SplitPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import seedu.address.ui.calendar.Calendar;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import seedu.address.ui.reminder.ReminderPane;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import seedu.address.ui.timeline.TimePane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": " * Default page contains calendar, reminder and timeline."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "public class DefaultPage extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private static final String FXML \u003d \"DefaultPage.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private String day;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private ObservableList\u003cTask\u003e all;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private DayListPanel dayListPanel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private SplitPane overallPane;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private AnchorPane calendarAnchorPane;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private AnchorPane reminderAnchorPane;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private StackPane dayListPane;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private AnchorPane timelineAnchorPane;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private AnchorPane upperPartAnchorPane;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public DefaultPage(ObservableList\u003cTask\u003e taskList, Logic logic) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        init();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        this.all \u003d taskList;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        this.day \u003d getDay();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.dayListPanel \u003d new DayListPanel(logic.getFilteredDayList(), logic.selectedDayProperty(),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                logic::setSelectedDay);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        //Show the calendar"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        calendarAnchorPane.getChildren().add(new Calendar(YearMonth.now(), taskList).getView());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        timelineAnchorPane.getChildren().add(new TimePane(taskList, day).getView());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        reminderAnchorPane.getChildren().add(new ReminderPane(logic, logic.getRemindTaskList()).getView());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        dayListPane.getChildren().add(dayListPanel.getRoot());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * Set each window to proper fixed size."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private void init() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        upperPartAnchorPane.maxHeightProperty().bind(overallPane.heightProperty().multiply(0.5));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        timelineAnchorPane.maxHeightProperty().bind(overallPane.heightProperty().multiply(0.5));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        calendarAnchorPane.maxWidthProperty().bind(upperPartAnchorPane.widthProperty().multiply(0.5));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        reminderAnchorPane.maxWidthProperty().bind(upperPartAnchorPane.widthProperty().multiply(0.5));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        dayListPane.maxWidthProperty().bind(upperPartAnchorPane.widthProperty().multiply(0.5));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * Set the desired month."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public void setMonth(String month) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        Calendar c \u003d new Calendar(YearMonth.now(), all);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        //System.out.println(month);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        if (month.equals(\"Viewing next month\u0027s calendar!\")) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            c.nextMonth();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            //System.out.println(month);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        if (month.equals(\"Viewing previous month\u0027s calendar!\")) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            c.previousMonth();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            //System.out.println(month);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        if (month.equals(\"Viewing this month\u0027s calendar!\")) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            c.thisMonth();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            //System.out.println(month);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        calendarAnchorPane.getChildren().clear();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        calendarAnchorPane.getChildren().add(c.getView());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * Set the desired timeline to that day."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * @param feedback"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public void setTimeline(String feedback) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        if (!feedback.split(\" \")[0].equals(\"Timeline\")) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            //System.out.println(\"not\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        this.day \u003d feedback.split(\" \")[3];"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        if (!feedback.split(\" \")[3].contains(\"-\")) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            this.day \u003d feedback.split(\" \")[2];"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        //System.out.println(day);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        timelineAnchorPane.getChildren().clear();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        timelineAnchorPane.getChildren().add(new TimePane(all, day).getView());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        //System.out.println(day);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * This returns the current date."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * To be updated."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public String getDay() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        Date today \u003d new Date();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd-MM-YY\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        String formattedToday \u003d formatter.format(today);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        return formattedToday;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public void setReminder(Logic logic) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        ReminderPane r \u003d new ReminderPane(logic, logic.getRemindTaskList());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        reminderAnchorPane.getChildren().clear();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        reminderAnchorPane.getChildren().add(r.getView());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jingchen-z": 115,
      "cheahzk": 9,
      "BrittonAlone": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private static final String DEFAULT_PAGE \u003d \"defaultPage\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private static final String PROJECT_DETAILS \u003d \"projectDetails\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private DefaultPage defaultPage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private TaskListPanel taskListPanel;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    private CommandBox commandBox;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    //To check which scene to show"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private String optionPage \u003d DEFAULT_PAGE;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private StackPane defaultBrowserPlaceholder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private StackPane taskListPanelPlaceholder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private StackPane dayListPanelPlaceholder;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        defaultPage \u003d new DefaultPage(logic.getFilteredTaskList(), logic);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        defaultBrowserPlaceholder.getChildren().add(defaultPage.getRoot());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        taskListPanel \u003d new TaskListPanel(logic.getFilteredTaskList(), logic.selectedTaskProperty(),"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                logic::setSelectedTask);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        taskListPanelPlaceholder.getChildren().add(taskListPanel.getRoot());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getTaskBookFilePath(), logic.getTaskBook());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        commandBox \u003d new CommandBox(commandText -\u003e {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                return executeCommand(commandText);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }, logic.getHistory());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * Choose which page to show."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public void setScene(String value) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        optionPage \u003d value;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * @throws DataConversionException"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            IllegalValueException, IOException, DataConversionException {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            defaultPage.setMonth(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            defaultPage.setTimeline(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            defaultPage.setReminder(logic);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            if (!commandText.equals(\"list\")) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                logic.reinitializeRemindList();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                defaultPage.setReminder(logic);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        } catch (IllegalArgumentException | ParseException | CommandException e) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 14,
      "jingchen-z": 16,
      "cheahzk": 8,
      "BrittonAlone": 6,
      "Zeyang-Li": 3,
      "-": 189
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatusBarFooter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.ReadOnlyTaskBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used to generate time stamps."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * TODO: change clock to an instance variable."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * We leave it as a static variable because manual dependency injection"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * will require passing down the clock reference all the way from MainApp,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * but it should be easier once we have factories/DI frameworks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Clock clock \u003d Clock.systemDefaultZone();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label syncStatus;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public StatusBarFooter(Path saveLocation, ReadOnlyTaskBook taskBook) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        taskBook.addListener(observable -\u003e updateSyncStatus());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        syncStatus.setText(SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the clock used to determine the current time."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setClock(Clock clock) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.clock \u003d clock;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the clock currently in use."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Clock getClock() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return clock;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates \"last updated\" status to the current time."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private void updateSyncStatus() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        long now \u003d clock.millis();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String lastUpdated \u003d new Date(now).toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        syncStatus.setText(String.format(SYNC_STATUS_UPDATED, lastUpdated));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 3,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TaskCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * An UI component that displays information of a {@code Task}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class TaskCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static final String FXML \u003d \"TaskListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public final Task task;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private Label startDate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private Label startTime;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private Label endDate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private Label endTime;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private Label categories;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public TaskCard(Task task, int displayedIndex) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        name.setText(task.getName().fullName);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        startDate.setText(task.getStartDate().value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        startTime.setText(task.getStartTime().value);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        endDate.setText(task.getEndDate().value);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        endTime.setText(task.getEndTime().value);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        description.setText(task.getDescription().value);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        categories.setText(task.getCategories().fullName);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        task.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (!(other instanceof TaskCard)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        TaskCard card \u003d (TaskCard) other;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                \u0026\u0026 task.equals(card.task);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     * Set tags to urgent;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public void setUrgent(int i) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        //name.set(Font.createFont(\"Verdana\", ))"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        if (i \u003d\u003d 1) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            cardPane.setStyle(\"-fx-background-color: #dc5712;\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        } else if (i \u003d\u003d 2) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            cardPane.setStyle(\"-fx-background-color: #e58308;\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        } else if (i \u003d\u003d 3) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            cardPane.setStyle(\"-fx-background-color: #f4d000;\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        } else if (i \u003d\u003d 4) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            cardPane.setStyle(\"-fx-background-color: #8a977b;\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        } else if (i \u003d\u003d 5) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            cardPane.setStyle(\"-fx-background-color: #b6c29a;\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "cheahzk": 79,
      "BrittonAlone": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TaskListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Panel containing the list of tasks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class TaskListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static final String FXML \u003d \"TaskListPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TaskListPanel.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private ListView\u003cTask\u003e taskListView;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public TaskListPanel(ObservableList\u003cTask\u003e taskList, ObservableValue\u003cTask\u003e selectedTask,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            Consumer\u003cTask\u003e onSelectedTaskChange) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        taskListView.setItems(taskList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        taskListView.setCellFactory(listView -\u003e new TaskListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        taskListView.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            logger.fine(\"Selection in task list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            onSelectedTaskChange.accept(newValue);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        });"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        selectedTask.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            logger.fine(\"Selected task changed to: \" + newValue);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            // Don\u0027t modify selection if we are already selecting the selected task,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            // otherwise we would have an infinite loop."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            if (Objects.equals(taskListView.getSelectionModel().getSelectedItem(), newValue)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                taskListView.getSelectionModel().clearSelection();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                int index \u003d taskListView.getItems().indexOf(newValue);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                taskListView.scrollTo(index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                taskListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        });"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Task} using a {@code TaskCard}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    class TaskListViewCell extends ListCell\u003cTask\u003e {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        protected void updateItem(Task task, boolean empty) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            super.updateItem(task, empty);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            if (empty || task \u003d\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                setGraphic(new TaskCard(task, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/Tasketch.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 1,
      "jingchen-z": 1,
      "-": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/calendar/Calendar.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "package seedu.address.ui.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": " * The real implementation for calendar will be here."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "public class Calendar extends Node {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private static final int CALENDAR_WIDTH \u003d 350;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private static final int CALENDAR_HEIGHT \u003d 175;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private static final int GRID_WIDTH \u003d 48;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private static final int GRID_HEIGHT \u003d 40;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private static final double ANCHOR_SIZE \u003d 5;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private ArrayList\u003cPaneNode\u003e allCalendarDays \u003d new ArrayList\u003c\u003e(35);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private VBox view;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private YearMonth shownYearMonth;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private int[][][] numOfTasks \u003d new int[5][12][35]; //Assuming 5 years"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private ObservableList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * Create a calendar with 35 grids (5x7)."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * @param yearMonth"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public Calendar(YearMonth yearMonth, ObservableList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        shownYearMonth \u003d yearMonth;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        this.taskList \u003d tasks;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        // Create the calendar grid pane"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        GridPane calendar \u003d new GridPane();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        GridPane.setMargin(calendar, new Insets(0, 0, 0, 5));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        calendar.setPrefSize(CALENDAR_WIDTH, CALENDAR_HEIGHT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        //Fill up the calendar."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        for (int i \u003d 0; i \u003c 5; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            for (int j \u003d 0; j \u003c 7; j++) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                PaneNode newGrid \u003d new PaneNode();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                newGrid.setPrefSize(GRID_WIDTH, GRID_HEIGHT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                newGrid.setStyle(\"-fx-background-color: white;\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                calendar.add(newGrid, j, i);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                allCalendarDays.add(newGrid);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        Text[] weekDays \u003d { new Text(\"Sun\"),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                            new Text(\"Mon\"), new Text(\"Tues\"),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                            new Text(\"Wed\"), new Text(\"Thur\"),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                            new Text(\"Fri\"), new Text(\"Sat\") };"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        GridPane weekDayLabel \u003d new GridPane();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        weekDayLabel.setPrefWidth(CALENDAR_WIDTH);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        int col \u003d 1;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        for (Text day : weekDays) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            AnchorPane aGrid \u003d new AnchorPane();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            aGrid.setPrefSize(GRID_WIDTH, GRID_HEIGHT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            aGrid.getChildren().add(day);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            weekDayLabel.add(aGrid, col, 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            col++;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        //Text calendarTitle \u003d new Text(); //Title to be added later"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        //HBox titleBar \u003d new HBox(calendarTitle);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        //titleBar.setAlignment(Pos.BASELINE_CENTER);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        weekDayLabel.setAlignment(Pos.BASELINE_CENTER);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        calendar.setAlignment(Pos.BASELINE_CENTER);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        showCalendar(yearMonth);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        calendar.setGridLinesVisible(true);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        //view.getChildren().add(weekDayLabel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        //view.getChildren().add(calendar);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        view \u003d new VBox(new Text(\"\"), weekDayLabel, calendar);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * Show the calendar."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * Show from the first Sunday before current month."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * @param"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public void showCalendar(YearMonth yearMonth) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        LocalDate calendarDate \u003d LocalDate.of(yearMonth.getYear(), yearMonth.getMonthValue(), 1);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        while (!calendarDate.getDayOfWeek().toString().equals(\"SUNDAY\")) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            calendarDate \u003d calendarDate.minusDays(1);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        //Pre process tasks to count # of tasks in a day"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        //resetNum();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        //System.out.println(yearMonth.getMonthValue());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        //preProcess(taskList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        for (PaneNode aGrid : allCalendarDays) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            if (aGrid.getChildren().size() !\u003d 0) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                aGrid.getChildren().remove(0);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            Text txt \u003d new Text(String.valueOf(calendarDate.getDayOfMonth()));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            aGrid.setDay(calendarDate);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            aGrid.setTopAnchor(txt, ANCHOR_SIZE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            aGrid.setLeftAnchor(txt, ANCHOR_SIZE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            aGrid \u003d setColor(aGrid, yearMonth.getYear(), yearMonth.getMonthValue(), calendarDate.getDayOfMonth());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            aGrid.getChildren().add(txt);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            calendarDate \u003d calendarDate.plusDays(1);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * Change the current view to previous month, FOR FUTURE DEVELOPMENT."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public void previousMonth() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        shownYearMonth \u003d shownYearMonth.minusMonths(1);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        showCalendar(shownYearMonth);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * Change the current view to next month, FOR FUTURE DEVELOPMENT."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public void nextMonth() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        shownYearMonth \u003d shownYearMonth.plusMonths(1);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        showCalendar(shownYearMonth);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * Change the current view to next month, FOR FUTURE DEVELOPMENT."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public void thisMonth() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        showCalendar(shownYearMonth);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * Required by Travis."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public VBox getView() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        return view;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public ArrayList\u003cPaneNode\u003e getAllCalendarDays() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        return allCalendarDays;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public void setAllCalendarDays(ArrayList\u003cPaneNode\u003e allCalendarDays) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        this.allCalendarDays \u003d allCalendarDays;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * Set the calendar day to specific colors."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * @param p"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * @param year"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * @param month"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * @param day"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private PaneNode setColor(PaneNode p, int year, int month, int day) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        if (!checkdate(year - 2017, month, day)) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            //System.out.println(year - 2017);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            return p;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        if (numOfTasks[year - 2017][month][day] \u003e\u003d 10) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            p.setStyle(\"-fx-background-color: #ff0000\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            numOfTasks[year - 2017][month][day] \u003d -1;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        } else if (numOfTasks[year - 2017][month][day] \u003e 5) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            p.setStyle(\"-fx-background-color: #00ff00\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            numOfTasks[year - 2017][month][day] \u003d -1;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        } else if (numOfTasks[year - 2017][month][day] \u003e 1) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            p.setStyle(\"-fx-background-color: #0000ff\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            numOfTasks[year - 2017][month][day] \u003d -1;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        return p;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * set the desired color of each calendar node."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private void preProcess(ObservableList \u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        for (Task t : tasks) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            String date \u003d t.getEndDate().toString();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            String day \u003d date.split(\"-\")[0];"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            String month \u003d date.split(\"-\")[1];"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            String year \u003d date.split(\"-\")[2];"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            //System.out.print(Integer.parseInt(year)-17);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            if (!checkdate(Integer.parseInt(year) - 17,"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                Integer.parseInt(month) - 1,"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                Integer.parseInt(day) - 1)) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            numOfTasks[Integer.parseInt(year) - 17][Integer.parseInt(month)][Integer.parseInt(day)] +\u003d 1;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * Checks whether the tasks is with in 10 years."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * @param year"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * @param month"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * @param day"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private boolean checkdate(int year, int month, int day) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        if (year \u003c 0 || year \u003e\u003d 5) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        if (month \u003c 0 || month \u003e\u003d 12) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        if (day \u003c 0 || day \u003e\u003d 31) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * Reset number of tasks."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private void resetNum() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        for (int i \u003d 0; i \u003c 5; i++) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            for (int j \u003d 0; j \u003c 12; j++) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                for (int k \u003d 0; k \u003c 35; k++) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                    numOfTasks[i][j][k] \u003d 0;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public Node getStyleableNode() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jingchen-z": 240
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/calendar/PaneNode.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "package seedu.address.ui.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": " * This is each single date grid."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "public class PaneNode extends AnchorPane {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private LocalDate day;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * Initialize."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * @param children"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public PaneNode(Node... children) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        super(children);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * Get today. required by Travis."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public LocalDate getDay() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        return day;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * Set current date."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * @param newDay"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public void setDay(LocalDate newDay) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        this.day \u003d newDay;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jingchen-z": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/reminder/ReminderPane.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "package seedu.address.ui.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import seedu.address.ui.TaskCard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": " * The UI part of remind feature."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "public class ReminderPane extends AnchorPane {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    private VBox vbox \u003d new VBox();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    private ObservableList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    private ListView\u003cTaskCard\u003e taskListView;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     * The constructor."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public ReminderPane(Logic logic, ObservableList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        taskListView \u003d new ListView\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        addTask();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     * Add task to UI."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public void addTask() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            TaskCard t \u003d new TaskCard(task, i++);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            t.setUrgent(i - 1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            taskListView.getItems().add(t);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        taskListView.setCellFactory(listView -\u003e new TaskListViewCell());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        vbox.getChildren().addAll(taskListView);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     * Get logic."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public Logic getLogic() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        return this.logic;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public ListView\u003cTaskCard\u003e getListView() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return this.taskListView;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public ObservableList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     * Get view."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public VBox getView() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        return this.vbox;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     * Travis"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    class TaskListViewCell extends ListCell\u003cTaskCard\u003e {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        protected void updateItem(TaskCard taskCard, boolean empty) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            super.updateItem(taskCard, empty);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            if (empty || taskCard \u003d\u003d null) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                setGraphic(taskCard.getRoot());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrittonAlone": 80,
      "Zeyang-Li": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/timeline/PreTask.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "package seedu.address.ui.timeline;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": " * This class is to store processed data."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "public class PreTask {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private String cate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private String day;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private String month;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private String year;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private float start;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private float end;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * Pre-processing the tasks as PreTask."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * Used in the timeline and calendar."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * @param ttl"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * @param cat"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * @param s"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * @param e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public PreTask(String ttl, String cat, float s, float e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        this.title \u003d ttl;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        this.cate \u003d cat;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        this.start \u003d s;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        this.end \u003d e;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void setDay(String s) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.day \u003d s;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void setMonth(String s) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.month \u003d s;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void setYear(String s) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.year \u003d s;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public String getCate() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        return cate;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public String getDat() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return day;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public String getMonth() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return month;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public String getYear() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return year;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public float getStart() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        return start;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public float getEnd() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        return end;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jingchen-z": 49,
      "cheahzk": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/timeline/TimePane.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "package seedu.address.ui.timeline;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import javafx.scene.shape.Rectangle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": " * This is the overall arrangement of timeline pane."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "public class TimePane extends AnchorPane {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private static final float LINE_WIDTH \u003d 920.0f;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private static final float LINE_HEIGHT \u003d 10.0f;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private static final float BAR_LINE_HEIGHT \u003d 3.0f;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private static final int GRID_WIDTH \u003d 96;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private static final int GRID_HEIGHT \u003d 10;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private static final int TIMELINE_WIDTH \u003d 800;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private static final String CATEGORY_ACADEMIC \u003d \"a\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private static final String CATEGORY_CCA \u003d \"c\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private static final String CATEGORY_ENTERTAINMENT \u003d \"e\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private static final String CATEGORY_ERRANDS \u003d \"r\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private static final String CATEGORY_OTHER \u003d \"o\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private VBox vbox \u003d new VBox();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private String[] category \u003d {CATEGORY_ACADEMIC,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                                 CATEGORY_CCA,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                                 CATEGORY_ENTERTAINMENT,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                                 CATEGORY_ERRANDS,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                                 CATEGORY_OTHER};"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public TimePane(ObservableList\u003cTask\u003e taskList, String d) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        showTimeline(taskList, d);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * This update the timeline."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * @param taskList"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * @param d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public void showTimeline(ObservableList\u003cTask\u003e taskList, String d) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        vbox.setSpacing(0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dSet up time points\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        Text[] timePoints \u003d { new Text(\" \"), new Text(\"6:00\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                              new Text(\"8:00\"), new Text(\"10:00\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                              new Text(\"12:00\"), new Text(\"14:00\"),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                              new Text(\"16:00\"), new Text(\"18:00\"),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                              new Text(\"20:00\"), new Text(\"22:00\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                              new Text(\"0:00\"), new Text(\" \")};"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        GridPane timelineLabel \u003d new GridPane();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        timelineLabel.setPrefWidth(TIMELINE_WIDTH);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        //timelineLabel.setGridLinesVisible(true);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        int col \u003d 1;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        for (Text time : timePoints) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            AnchorPane aGrid \u003d new AnchorPane();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            aGrid.setPrefSize(GRID_WIDTH, GRID_HEIGHT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            aGrid.getChildren().add(time);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            aGrid.setStyle(\"-fx-text-inner-color: white;\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            timelineLabel.add(aGrid, col, 0);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            col++;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dSet up a heading rectangle\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        Rectangle heading \u003d new Rectangle();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        //Setting the properties of the rectangle"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        heading.setFill(Color.WHITE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        heading.setWidth(LINE_WIDTH);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        heading.setHeight(LINE_HEIGHT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dSet up a bottom rectangle\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        Rectangle bottom \u003d new Rectangle();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        //Setting the properties of the rectangle"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        bottom.setFill(Color.WHITE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        bottom.setWidth(LINE_WIDTH);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        bottom.setHeight(BAR_LINE_HEIGHT);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        //Setting the height and width of the arc"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        //heading.setArcWidth(10.0);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        //heading.setArcHeight(10.0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        //Add to the view"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        vbox.getChildren().add(heading);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        vbox.getChildren().add(timelineLabel);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dSet up each timeline for 4 categories\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        String[] cate \u003d {CATEGORY_ACADEMIC,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                         CATEGORY_CCA,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                         CATEGORY_ENTERTAINMENT,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                         CATEGORY_ERRANDS,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                         CATEGORY_OTHER};"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        PreTask[] filteredDate \u003d filterDate(taskList, d);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        for (int i \u003d 0; i \u003c 5; i++) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            PreTask[] filteredCate \u003d filterCate(filteredDate, category[i]);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            Timeline t \u003d new Timeline(filteredCate, cate[i]);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            vbox.getChildren().add(t.getOneTimeline());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        vbox.getChildren().add(bottom);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * This function filters the tasks to desired date."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * @param taskList"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * @param day"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private PreTask[] filterDate(ObservableList\u003cTask\u003e taskList, String day) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        PreTask[] filteredDate \u003d new PreTask[1000];"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        for (Task t : taskList) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                t.getCategories();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            } catch (NullPointerException ep) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            if (t.getStartDate().toString().equals(day)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                filteredDate[count] \u003d new PreTask(t.getName().toString(),"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                        t.getCategories().toString(),"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                        parse(t.getStartTime().toString()),"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                        parse(t.getEndTime().toString()));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        return filteredDate;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * returns filtered category list."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * The O(n^2) filtering method could be improved to O(n)."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * @param taskList"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * @param cate"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private PreTask[] filterCate(PreTask[] taskList, String cate) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        PreTask[] filtered \u003d new PreTask[1000];"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        for (PreTask t : taskList) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                t.getCate();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            } catch (NullPointerException ep) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            if (t.getCate().equals(cate)) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                filtered[count] \u003d new PreTask(t.getTitle(),"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                        t.getCate(),"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                        t.getStart(),"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                        t.getEnd());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        return filtered;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * Thie parse a string to a float, representing time."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * Called in filteredDate method."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * @param time"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private float parse(String time) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        return Float.parseFloat(time);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public VBox getView() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        return this.vbox;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jingchen-z": 176
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/timeline/Timeline.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "package seedu.address.ui.timeline;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import javafx.scene.shape.Rectangle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import javafx.scene.text.TextAlignment;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": " * Individual Timeline for each category."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "public class Timeline {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private static final int GRIDSIZE \u003d 100;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private static final int GRIDHEIGHT \u003d 5;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private static final int TIMELINE_WIDTH \u003d 50;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private static final int TIMELINE_HEIGHT \u003d 10;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private static final double PREF_WIDTH \u003d 850.0f;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private static final float HEADING_HEIGHT \u003d 1.0f;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private static final float ARC_SIZE \u003d 0.3f;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private VBox oneTimeline \u003d new VBox();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private PreTask[] tasks;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private String cate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private Text[] taskNames \u003d {new Text(\"Cate\"), new Text(\" \"), new Text(\" \"), new Text(\" \"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                                new Text(\" \"), new Text(\" \"), new Text(\" \"), new Text(\" \"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                                new Text(\" \"), new Text(\" \"), new Text(\" \"), new Text(\" \"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                                new Text(\" \"), new Text(\" \"), new Text(\" \"), new Text(\" \"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                                new Text(\" \"), new Text(\" \"), new Text(\" \"), new Text(\" \"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                                new Text(\" \"), new Text(\" \"), new Text(\" \"), new Text(\" \")};"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public Timeline(PreTask[] pre, String c) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        this.tasks \u003d pre;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        this.cate \u003d c;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        sort();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        oneTimeline.setSpacing(12);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dSet up a seperate line\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        prepLine();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dSet up Titles\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        prepTitle(c);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dSet up Timelines\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        prepTimeline(pre);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * This method will prepare the line."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private void prepLine() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        Rectangle heading \u003d new Rectangle();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        heading.setFill(Color.GRAY);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        //Setting the properties of the rectangle"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        heading.setWidth(PREF_WIDTH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        heading.setHeight(HEADING_HEIGHT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        //Setting the height and width of the arc"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        heading.setArcWidth(ARC_SIZE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        heading.setArcHeight(ARC_SIZE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        //Add to the view"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        oneTimeline.getChildren().add(heading);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * This method will prepare the name of the task."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * This is done by using putting task names into separated grids."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private void prepTitle(String c) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        GridPane taskNameLine \u003d new GridPane();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        taskNameLine.setPrefWidth(PREF_WIDTH);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        //taskNameLine.setGridLinesVisible(true);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        int col \u003d 1;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        taskNames[0] \u003d new Text(getCate(c));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        for (Text n : taskNames) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            AnchorPane aGrid \u003d new AnchorPane();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            aGrid.setPrefSize(GRIDSIZE, GRIDHEIGHT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            //n.setBoundsType(TextBoundsType.VISUAL);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            n.setStyle(\"-fx-padding: 0 0 0 0;\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                       + \"-fx-font-size: 14px;\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            n.setFill(Color.WHITE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            n.setTextAlignment(TextAlignment.RIGHT);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            aGrid.getChildren().add(n);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            taskNameLine.add(aGrid, col, 0);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            col++;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        oneTimeline.getChildren().add(taskNameLine);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * This method will prepare the real timeline."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private void prepTimeline(PreTask[] pre) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        GridPane time \u003d new GridPane();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        time.setPrefWidth(PREF_WIDTH);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        //time.setGridLinesVisible(true);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        int[] timeInterval \u003d markTimeInterval(pre);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        for (int i \u003d 0; i \u003c timeInterval.length; i++) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            //System.out.print(timeInterval[i]);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            switch (timeInterval[i]) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            case 1:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                Region rect1 \u003d new Region();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                rect1.setPrefSize(TIMELINE_WIDTH, TIMELINE_HEIGHT);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                time.add(setColor(rect1, timeInterval[i]), i, 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            case 2:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                Region rect2 \u003d new Region();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                rect2.setPrefSize(TIMELINE_WIDTH, TIMELINE_HEIGHT);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                time.add(setColor(rect2, timeInterval[i]), i, 0);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            case 3:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                Region rect3 \u003d new Region();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                rect3.setPrefSize(TIMELINE_WIDTH, TIMELINE_HEIGHT);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                time.add(setColor(rect3, timeInterval[i]), i, 0);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            case 4:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                Region rect4 \u003d new Region();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                rect4.setPrefSize(TIMELINE_WIDTH, TIMELINE_HEIGHT);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                time.add(setColor(rect4, timeInterval[i]), i, 0);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                AnchorPane aGrid \u003d new AnchorPane();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                aGrid.setPrefSize(TIMELINE_WIDTH, TIMELINE_HEIGHT);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                aGrid.getChildren().add(new Text(\" \"));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                time.add(aGrid, i, 0);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        oneTimeline.getChildren().add(time);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * Marks time intervals to fill in."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private int[] markTimeInterval(PreTask[] pre) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        int[] timeInterval \u003d new int[24];"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        int start \u003d 0;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        int end \u003d 0;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        for (PreTask t : pre) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                t.getStart();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            } catch (NullPointerException np) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                //System.out.println(\"null\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                return timeInterval;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            start \u003d (Math.round(t.getStart()) + 20) % 24;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            end \u003d (Math.round(t.getEnd()) + 20) % 24;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            if ((start \u003e\u003d 20 \u0026\u0026 start \u003c\u003d 23) || (start \u003e\u003d 0 \u0026\u0026 start \u003c\u003d 1) || (end \u003e\u003d 22 \u0026\u0026 end \u003c\u003d 23)) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            if ((end - start) \u003c\u003d 1) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                timeInterval[start] \u003d 4;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            for (int i \u003d 0; i \u003c end - start; i++) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                timeInterval[i + start + 1] \u003d 1;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            timeInterval[(start) % 24] \u003d 2;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            timeInterval[(end) % 24] \u003d 3;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        return timeInterval;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * Sort the tasks."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * The sorting function could be improved to quicksork / mergesort etc."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private void sort() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        int total \u003d getSize();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        for (int i \u003d 0; i \u003c total; i++) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            for (int j \u003d 0; j \u003c total - i - 1; j++) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                if (tasks[j].getStart() \u003e tasks[j + 1].getStart()) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                    PreTask t \u003d tasks[j];"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                    tasks[j] \u003d tasks[j + 1];"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                    tasks[j + 1] \u003d t;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        for (int i \u003d 0; i \u003c total; i++) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            int time \u003d (Math.round(tasks[i].getStart()) + 20) % 24;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            if (time \u003e 19) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                //System.out.println(time);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            taskNames[(Math.round(tasks[i].getStart()) + 20) % 24] \u003d new Text(tasks[i].getTitle());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * get size"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private int getSize() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        int i;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        for (i \u003d 0; true; i++) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                tasks[i].getCate();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            } catch (NullPointerException np) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        return i;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * Get cate"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private String getCate(String s) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        switch (s) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        case \"a\":"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            return \"Academic \";"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        case \"c\":"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            return \"CCA      \";"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        case \"e\":"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            return \"Entertain\";"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        case \"r\":"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            return \"Errands  \";"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            return \"Other    \";"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * Set the color of each timeline to be different."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * @param r"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private Region setColor(Region r, int i) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        switch (cate) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        case \"a\":"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            switch (i) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            case 1:"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                r.setStyle(\"-fx-background-color: #39b9fd; -fx-background-radius: 0 0 0 0\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                return r;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            case 2:"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                r.setStyle(\"-fx-background-color: #39b9fd; -fx-background-radius: 10 0 0 10\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                return r;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            case 3:"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                r.setStyle(\"-fx-background-color: #39b9fd; -fx-background-radius: 0 10 10 0\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                return r;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            case 4:"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                r.setStyle(\"-fx-background-color: #39b9fd; -fx-background-radius: 10 10 10 10\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                return r;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                r.setStyle(\"-fx-background-color: #39b9fd; -fx-background-radius: 0 0 0 0\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                return r;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        case \"c\":"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            switch (i) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            case 1:"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                r.setStyle(\"-fx-background-color: #3bd979; -fx-background-radius: 0 0 0 0\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                return r;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            case 2:"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                r.setStyle(\"-fx-background-color: #3bd979; -fx-background-radius: 10 0 0 10\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                return r;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            case 3:"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                r.setStyle(\"-fx-background-color: #3bd979; -fx-background-radius: 0 10 10 0\");"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                return r;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            case 4:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                r.setStyle(\"-fx-background-color: #3bd979; -fx-background-radius: 10 10 10 10\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                return r;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                r.setStyle(\"-fx-background-color: #3bd979; -fx-background-radius: 0 0 0 0\");"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                return r;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        case \"e\":"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            switch (i) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            case 1:"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                r.setStyle(\"-fx-background-color: #fc4429; -fx-background-radius: 0 0 0 0\");"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                return r;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            case 2:"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                r.setStyle(\"-fx-background-color: #fc4429; -fx-background-radius: 10 0 0 10\");"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                return r;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            case 3:"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                r.setStyle(\"-fx-background-color: #fc4429; -fx-background-radius: 0 10 10 0\");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                return r;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            case 4:"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                r.setStyle(\"-fx-background-color: #fc4429; -fx-background-radius: 10 10 10 10\");"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                return r;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                r.setStyle(\"-fx-background-color: #fc4429; -fx-background-radius: 0 0 0 0\");"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                return r;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        case \"r\":"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            switch (i) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            case 1:"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                r.setStyle(\"-fx-background-color: #ffa741; -fx-background-radius: 0 0 0 0\");"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                return r;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            case 2:"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                r.setStyle(\"-fx-background-color: #ffa741; -fx-background-radius: 10 0 0 10\");"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                return r;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            case 3:"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                r.setStyle(\"-fx-background-color: #ffa741; -fx-background-radius: 0 10 10 0\");"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                return r;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            case 4:"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                r.setStyle(\"-fx-background-color: #ffa741; -fx-background-radius: 10 10 10 10\");"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                return r;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                r.setStyle(\"-fx-background-color: #ffa741; -fx-background-radius: 0 0 0 0\");"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                return r;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        case \"o\":"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            switch (i) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            case 1:"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                r.setStyle(\"-fx-background-color: #ded38c; -fx-background-radius: 0 0 0 0\");"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                return r;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            case 2:"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                r.setStyle(\"-fx-background-color: #ded38c; -fx-background-radius: 10 0 0 10\");"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                return r;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            case 3:"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                r.setStyle(\"-fx-background-color: #ded38c; -fx-background-radius: 0 10 10 0\");"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                return r;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            case 4:"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                r.setStyle(\"-fx-background-color: #ded38c; -fx-background-radius: 10 10 10 10\");"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                return r;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                r.setStyle(\"-fx-background-color: #ded38c; -fx-background-radius: 0 0 0 0\");"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                return r;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            switch (i) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            case 1:"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                r.setStyle(\"-fx-background-color: white; -fx-background-radius: 0 0 0 0\");"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                return r;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            case 2:"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                r.setStyle(\"-fx-background-color: white; -fx-background-radius: 10 0 0 10\");"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                return r;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            case 3:"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                r.setStyle(\"-fx-background-color: white; -fx-background-radius: 0 10 10 0\");"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                return r;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            case 4:"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                r.setStyle(\"-fx-background-color: white; -fx-background-radius: 10 10 10 10\");"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                return r;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                r.setStyle(\"-fx-background-color: white; -fx-background-radius: 0 0 0 0\");"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                return r;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public VBox getOneTimeline() {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        return oneTimeline;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jingchen-z": 346
    }
  },
  {
    "path": "src/main/resources/view/DayListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/9.0.4\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "      \u003cLabel fx:id\u003d\"academic\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$academic\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            \u003cgraphic\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "               \u003cLabel fx:id\u003d\"aName\" text\u003d\"\\$acaName\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            \u003c/graphic\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "      \u003cLabel fx:id\u003d\"cca\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$cca\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            \u003cgraphic\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "               \u003cLabel fx:id\u003d\"cName\" text\u003d\"\\$ccaName\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            \u003c/graphic\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "      \u003cLabel fx:id\u003d\"entertainment\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$entertainment\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            \u003cgraphic\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "               \u003cLabel fx:id\u003d\"entName\" text\u003d\"\\$entName\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            \u003c/graphic\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "      \u003cLabel fx:id\u003d\"errand\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$errand\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            \u003cgraphic\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "               \u003cLabel fx:id\u003d\"errName\" text\u003d\"\\$errName\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            \u003c/graphic\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "      \u003cLabel fx:id\u003d\"other\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$other\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            \u003cgraphic\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "               \u003cLabel fx:id\u003d\"oName\" text\u003d\"\\$otherName\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            \u003c/graphic\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 55
    }
  },
  {
    "path": "src/main/resources/view/DayListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    \u003cListView fx:id\u003d\"dayListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/DefaultPage.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003cSplitPane fx:id\u003d\"overallPane\" dividerPositions\u003d\"0.5\" orientation\u003d\"VERTICAL\" prefHeight\u003d\"430.0\" prefWidth\u003d\"860.0\" xmlns\u003d\"http://javafx.com/javafx/9.0.4\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "  \u003citems\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    \u003cAnchorPane fx:id\u003d\"upperPartAnchorPane\" minHeight\u003d\"240.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"100.0\" prefWidth\u003d\"160.0\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            \u003cSplitPane dividerPositions\u003d\"0.41238317757009346, 0.7114485981308412\" prefHeight\u003d\"242.0\" prefWidth\u003d\"858.0\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "              \u003citems\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                \u003cAnchorPane fx:id\u003d\"calendarAnchorPane\" minHeight\u003d\"240.0\" minWidth\u003d\"350.0\" prefHeight\u003d\"212.0\" prefWidth\u003d\"350.0\" style\u003d\"-fx-background-color: grey;\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                \u003cAnchorPane fx:id\u003d\"reminderAnchorPane\" minHeight\u003d\"240.0\" minWidth\u003d\"250.0\" prefHeight\u003d\"240.0\" prefWidth\u003d\"220.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                  \u003cStackPane fx:id\u003d\"dayListPane\" minHeight\u003d\"240.0\" minWidth\u003d\"250.0\" prefHeight\u003d\"240.0\" prefWidth\u003d\"250.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "              \u003c/items\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "         \u003c/children\u003e\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    \u003cAnchorPane fx:id\u003d\"timelineAnchorPane\" minHeight\u003d\"190.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"190.0\" prefWidth\u003d\"160.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "  \u003c/items\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "\u003c/SplitPane\u003e"
      }
    ],
    "authorContributionMap": {
      "jingchen-z": 14,
      "cheahzk": 7
    }
  },
  {
    "path": "src/main/resources/view/LoginPage.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!--//@@author tianhang--\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "\u003c?import javafx.scene.control.PasswordField?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"407.0\" prefWidth\u003d\"589.0\" style\u003d\"-fx-background-color: #ffffff;\" xmlns\u003d\"http://javafx.com/javafx/10.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"seedu.address.ui.controller.LoginController\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        \u003cTextField fx:id\u003d\"usernameField\" layoutX\u003d\"357.0\" layoutY\u003d\"197.0\" onKeyPressed\u003d\"#handleEnterPressed\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        \u003cLabel layoutX\u003d\"373.0\" layoutY\u003d\"82.0\" text\u003d\"Welcome to\" textFill\u003d\"#ed0505\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            \u003cfont\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                \u003cFont name\u003d\"Lucida Console\" size\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            \u003c/font\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        \u003cLabel layoutX\u003d\"365.0\" layoutY\u003d\"115.0\" text\u003d\"Drink I/O\" textFill\u003d\"#3b33e2\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            \u003cfont\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                \u003cFont name\u003d\"Marlett\" size\u003d\"33.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            \u003c/font\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        \u003cLabel layoutX\u003d\"357.0\" layoutY\u003d\"167.0\" text\u003d\"Username\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            \u003cfont\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                \u003cFont name\u003d\"Arial Black\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            \u003c/font\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        \u003cImageView fitHeight\u003d\"394.0\" fitWidth\u003d\"200.0\" layoutX\u003d\"6.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        \u003cLabel layoutX\u003d\"359.0\" layoutY\u003d\"234.0\" text\u003d\"Password\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            \u003cfont\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                \u003cFont name\u003d\"Arial Black\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            \u003c/font\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        \u003cButton layoutX\u003d\"391.0\" layoutY\u003d\"334.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleLoginButtonClick\" prefHeight\u003d\"26.0\" prefWidth\u003d\"54.0\" style\u003d\"-fx-background-color: #6fa1f2;\" text\u003d\"Login\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        \u003cImageView fitHeight\u003d\"109.0\" fitWidth\u003d\"54.0\" layoutX\u003d\"509.0\" layoutY\u003d\"55.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" style\u003d\"-fx-rotate: -20;\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            \u003cimage\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                \u003cImage url\u003d\"@../images/login_page_pic_2.jpg\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            \u003c/image\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        \u003cLabel fx:id\u003d\"loginError\" layoutX\u003d\"356.0\" layoutY\u003d\"293.0\" prefHeight\u003d\"18.0\" prefWidth\u003d\"156.0\" textFill\u003d\"#fa0c0c\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        \u003cPasswordField fx:id\u003d\"passwordField\" layoutX\u003d\"357.0\" layoutY\u003d\"263.0\" onKeyPressed\u003d\"#handleEnterPressed\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        \u003cLabel layoutX\u003d\"576.0\" layoutY\u003d\"28.0\" onMouseClicked\u003d\"#handleClose\" prefHeight\u003d\"18.0\" prefWidth\u003d\"19.0\" text\u003d\"x\" textFill\u003d\"#e20505\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            \u003cfont\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                \u003cFont size\u003d\"17.0\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            \u003c/font\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "      \u003cTextField fx:id\u003d\"commandBox\" layoutY\u003d\"2.0\" onKeyReleased\u003d\"#handleInputFromCommandBox\" prefHeight\u003d\"26.0\" prefWidth\u003d\"600.0\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "      \u003cImageView fitHeight\u003d\"119.0\" fitWidth\u003d\"64.0\" layoutX\u003d\"518.0\" layoutY\u003d\"174.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "         \u003cimage\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            \u003cImage url\u003d\"@../images/login_page_pic_1.jpg\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "         \u003c/image\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "      \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "      \u003cImageView fitHeight\u003d\"370.0\" fitWidth\u003d\"314.0\" layoutY\u003d\"30.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "         \u003cimage\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            \u003cImage url\u003d\"@../images/login_page_pic_4.jpg\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "         \u003c/image\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "      \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "      \u003cText layoutX\u003d\"314.0\" layoutY\u003d\"45.0\" onMouseClicked\u003d\"#handleHelpButtonClicked\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"HELP\" /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 64,
      "-": 1
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"450\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Tasketch App\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/9.0.4\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4, 0.5\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "          \u003cVBox fx:id\u003d\"taskList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "              \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            \u003cStackPane fx:id\u003d\"taskListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "          \u003cStackPane fx:id\u003d\"defaultBrowserPlaceholder\" prefWidth\u003d\"340\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "              \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 11,
      "jingchen-z": 1,
      "-": 55
    }
  },
  {
    "path": "src/main/resources/view/TaskListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/9.0.4\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "      \u003cLabel fx:id\u003d\"startDate\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$startDate\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "      \u003cLabel fx:id\u003d\"startTime\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$startTime\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "      \u003cLabel fx:id\u003d\"endDate\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$endDate\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "      \u003cLabel fx:id\u003d\"endTime\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$endTime\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "      \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "         \u003cLabel fx:id\u003d\"categories\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$categories\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 14,
      "-": 29
    }
  },
  {
    "path": "src/main/resources/view/TaskListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "  \u003cListView fx:id\u003d\"taskListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 8
    }
  },
  {
    "path": "src/test/data/JsonSerializableTaskBookTest/duplicateTaskTaskBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "  \"tasks\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    \"name\" : \"CS2110\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    \"description\" : \"Do sequence\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    \"tagged\" : [ \"CS2110\" ],"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    \"startDate\" : \"01-01-11\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    \"startTime\" : \"01.00\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    \"endDate\" : \"02-01-02\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    \"endTime\" : \"02.00\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    \"categories\" : \"a\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    \"name\" : \"CS2110\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    \"description\" : \"Do user\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    \"tagged\" : [ \"CS2100\" ],"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    \"startDate\" : \"03-03-03\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    \"startTime\" : \"03.00\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    \"endDate\" : \"04-03-04\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    \"endTime\" : \"04.00\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    \"categories\" : \"a\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 21
    }
  },
  {
    "path": "src/test/data/JsonSerializableTaskBookTest/invalidTaskTaskBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "  \"tasks\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    \"name\" : \"CS2110\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    \"description\" : \"Do sequence\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    \"tagged\" : [ \"CS2110\" ],"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    \"startDate\" : \"01.01.11\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    \"startTime\" : \"01.00\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    \"endDate\" : \"02-01-02\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    \"endTime\" : \"02.00\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    \"categories\" : \"a\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 12
    }
  },
  {
    "path": "src/test/data/JsonSerializableTaskBookTest/typicalTasksTaskBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "  \"_comment\": \"TaskBook save file which contains the same Task values as in TypicalTasks#getTypicalTaskBook()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "  \"tasks\" : [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    \"name\" : \"CS2110\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    \"description\" : \"Do sequence\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    \"tagged\" : [ \"CS2110\" ],"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    \"startDate\" : \"01-01-11\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    \"startTime\" : \"01.00\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    \"endDate\" : \"02-01-02\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    \"endTime\" : \"02.00\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    \"categories\" : \"a\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    \"name\" : \"cs2100\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    \"description\" : \"Do user\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    \"tagged\" : [ \"CS2100\" ],"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    \"startDate\" : \"03-03-03\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    \"startTime\" : \"03.00\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    \"endDate\" : \"04-03-04\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    \"endTime\" : \"04.00\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    \"categories\" : \"a\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 22
    }
  },
  {
    "path": "src/test/data/JsonTaskBookStorageTest/invalidAndValidTaskTaskBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "  \"tasks\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    \"name\" : \"Task with valid startDate\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    \"description\" : \"Do sequence\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    \"tagged\" : [ \"CS2110\" ],"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    \"startDate\" : \"01-01-11\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    \"startTime\" : \"01.00\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    \"endDate\" : \"02-01-02\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    \"endTime\" : \"02.00\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    \"categories\" : \"a\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    \"name\" : \"Task with invalid startDate\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    \"description\" : \"Do user\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    \"tagged\" : [ \"CS2100\" ],"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    \"startDate\" : \"03.03.03\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    \"startTime\" : \"03.00\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    \"endDate\" : \"04-03-04\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    \"endTime\" : \"04.00\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    \"categories\" : \"a\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 21
    }
  },
  {
    "path": "src/test/data/JsonTaskBookStorageTest/invalidTaskTaskBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "  \"tasks\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    \"name\" : \"Task with invalid description\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    \"description\" : \" \","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    \"tagged\" : [ \"CS2110\" ],"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    \"startDate\" : \"01-01-11\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    \"startTime\" : \"01.00\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    \"endDate\" : \"02-01-02\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    \"endTime\" : \"02.00\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    \"categories\" : \"a\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 12
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/DayCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.day.Day;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Provides a handle to a day card in the day list panel."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class DayCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static final String DATE_FIELD_ID \u003d \"#date\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static final String ACADEMIC_FIELD_ID \u003d \"#academic\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static final String CCA_FIELD_ID \u003d \"#cca\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static final String ENTERTAINMENT_FIELD_ID \u003d \"#entertainment\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static final String ERRAND_FIELD_ID \u003d \"#errand\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static final String OTHER_FIELD_ID \u003d \"#other\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final Label dateLabel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final Label academicLabel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final Label aName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final Label ccaLabel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final Label cName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final Label entertainmentLabel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final Label eName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final Label errandLabel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final Label errName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final Label otherLabel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final Label oName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public DayCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        dateLabel \u003d getChildNode(DATE_FIELD_ID);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        academicLabel \u003d getChildNode(ACADEMIC_FIELD_ID);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        ccaLabel \u003d getChildNode(CCA_FIELD_ID);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        entertainmentLabel \u003d getChildNode(ENTERTAINMENT_FIELD_ID);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        errandLabel \u003d getChildNode(ERRAND_FIELD_ID);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        otherLabel \u003d getChildNode(OTHER_FIELD_ID);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        aName \u003d getChildNode(\"Academic: \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        cName \u003d getChildNode(\"Cca: \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        eName \u003d getChildNode(\"Entertainment: \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        errName \u003d getChildNode(\"Errand: \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        oName \u003d getChildNode(\"Other: \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return dateLabel.getText();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public String getAcademic() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return academicLabel.getText();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public String getCca() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return ccaLabel.getText();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public String getEntertainment() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return entertainmentLabel.getText();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public String getErrand() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return errandLabel.getText();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public String getOther() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return otherLabel.getText();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns true if this handle contains {@code day}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean equals(Day day) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return getDate().equals(day.getDate().value)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                \u0026\u0026 getAcademic().equals(day.getAcademic().getTime())"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                \u0026\u0026 getCca().equals(day.getCca().getTime())"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                \u0026\u0026 getEntertainment().equals(day.getEntertainment().getTime())"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                \u0026\u0026 getErrand().equals(day.getErrand().getTime())"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                \u0026\u0026 getOther().equals(day.getOther().getTime());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 88
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/DayListPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.day.Day;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Provides a handle for {@code TaskListPanel} containing the list of {@code TaskCard}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class DayListPanelHandle extends NodeHandle\u003cListView\u003cDay\u003e\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String DAY_LIST_VIEW_ID \u003d \"#dayListView\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static final String CARD_PANE_ID \u003d \"#cardPane\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private Optional\u003cDay\u003e lastRememberedSelectedDayCard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public DayListPanelHandle(ListView\u003cDay\u003e dayListPanelNode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        super(dayListPanelNode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns a handle to the selected {@code DayCardHandle}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * A maximum of 1 item can be selected at any time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @throws AssertionError if no card is selected, or more than 1 card is selected."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public DayCardHandle getHandleToSelectedCard() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        List\u003cDay\u003e selectedDayList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (selectedDayList.size() !\u003d 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new AssertionError(\"Day list size expected 1.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .map(DayCardHandle::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .filter(handle -\u003e handle.equals(selectedDayList.get(0)))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns the index of the selected card."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public int getSelectedCardIndex() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return getRootNode().getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns true if a card is currently selected."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean isAnyCardSelected() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        List\u003cDay\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (selectedCardsList.size() \u003e 1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new AssertionError(\"Card list size expected 0 or 1.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return !selectedCardsList.isEmpty();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Navigates the listview to display {@code day}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void navigateToCard(Day day) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (!getRootNode().getItems().contains(day)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new IllegalArgumentException(\"Day does not exist.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            getRootNode().scrollTo(day);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        });"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Navigates the listview to {@code index}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void navigateToCard(int index) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d getRootNode().getItems().size()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new IllegalArgumentException(\"Index is out of bounds.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            getRootNode().scrollTo(index);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        });"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Selects the {@code DayCard} at {@code index} in the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void select(int index) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        getRootNode().getSelectionModel().select(index);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns the day card handle of a day associated with the {@code index} in the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public DayCardHandle getDayCardHandle(int index) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .map(DayCardHandle::new)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .filter(handle -\u003e handle.equals(getDay(index)))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private Day getDay(int index) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return getRootNode().getItems().get(index);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns all card nodes in the scene graph."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Card nodes that are visible in the listview are definitely in the scene graph, while some nodes that are not"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * visible in the listview may also be in the scene graph."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private Set\u003cNode\u003e getAllCardNodes() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return guiRobot.lookup(CARD_PANE_ID).queryAll();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Remembers the selected {@code DayCard} in the list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void rememberSelectedDayCard() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        List\u003cDay\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            lastRememberedSelectedDayCard \u003d Optional.empty();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            lastRememberedSelectedDayCard \u003d Optional.of(selectedItems.get(0));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns true if the selected {@code DayCard} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * {@code rememberSelectedDayCard()} call."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean isSelectedDayCardChanged() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        List\u003cDay\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            return lastRememberedSelectedDayCard.isPresent();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            return !lastRememberedSelectedDayCard.isPresent()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                    || !lastRememberedSelectedDayCard.get().equals(selectedItems.get(0));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return getRootNode().getItems().size();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 159
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/HelpWindowHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A handle to the {@code HelpWindow} of the application."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_WINDOW_TITLE \u003d \"Help\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String HELP_WINDOW_BROWSER_ID \u003d \"#browser\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindowHandle(Stage helpWindowStage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        super(helpWindowStage);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a help window is currently present in the application."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isWindowPresent() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return new GuiRobot().isWindowShown(HELP_WINDOW_TITLE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the {@code URL} of the currently loaded page."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public URL getLoadedUrl() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return WebViewUtil.getLoadedUrl(getChildNode(HELP_WINDOW_BROWSER_ID));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/MainWindowHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle for {@code MainWindow}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final TaskListPanelHandle taskListPanel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final DayListPanelHandle dayListPanel;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ResultDisplayHandle resultDisplay;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandBoxHandle commandBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBarFooterHandle statusBarFooter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final MainMenuHandle mainMenu;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        taskListPanel \u003d new TaskListPanelHandle(getChildNode(TaskListPanelHandle.TASK_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        dayListPanel \u003d new DayListPanelHandle(getChildNode(DayListPanelHandle.DAY_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public TaskListPanelHandle getTaskListPanel() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return taskListPanel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public DayListPanelHandle getDayListPanel() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return dayListPanel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return resultDisplay;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandBox;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return statusBarFooter;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainMenu;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 8,
      "-": 43
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/TaskCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import com.google.common.collect.ImmutableMultiset;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Provides a handle to a task card in the task list panel."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class TaskCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static final String STARTDATE_FIELD_ID \u003d \"#startDate\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static final String STARTTIME_FIELD_ID \u003d \"#startTime\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static final String ENDDATE_FIELD_ID \u003d \"#endDate\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static final String ENDTIME_FIELD_ID \u003d \"#endTime\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static final String DESCRIPTION_FIELD_ID \u003d \"#description\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static final String CATEGORIES_FIELD_ID \u003d \"#categories\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#tags\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final Label startDateLabel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final Label startTimeLabel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final Label endDateLabel;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final Label endTimeLabel;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final Label descriptionLabel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final Label categoriesLabel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public TaskCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        startDateLabel \u003d getChildNode(STARTDATE_FIELD_ID);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        startTimeLabel \u003d getChildNode(STARTTIME_FIELD_ID);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        endDateLabel \u003d getChildNode(ENDDATE_FIELD_ID);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        endTimeLabel \u003d getChildNode(ENDTIME_FIELD_ID);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        descriptionLabel \u003d getChildNode(DESCRIPTION_FIELD_ID);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        categoriesLabel \u003d getChildNode(CATEGORIES_FIELD_ID);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public String getStartDate() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return startDateLabel.getText();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public String getStartTime() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return startTimeLabel.getText();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public String getEndDate() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return endDateLabel.getText();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public String getEndTime() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return endTimeLabel.getText();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return descriptionLabel.getText();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public String getCategories() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return categoriesLabel.getText();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns true if this handle contains {@code task}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean equals(Task task) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return getName().equals(task.getName().fullName)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                \u0026\u0026 getStartDate().equals(task.getStartDate().value)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                \u0026\u0026 getStartTime().equals(task.getStartTime().value)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                \u0026\u0026 getEndDate().equals(task.getEndDate().value)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                \u0026\u0026 getEndTime().equals(task.getEndTime().value)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                \u0026\u0026 getDescription().equals(task.getDescription().value)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                \u0026\u0026 getCategories().equals(task.getCategories().fullName)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                \u0026\u0026 ImmutableMultiset.copyOf(getTags()).equals(ImmutableMultiset.copyOf(task.getTags().stream()"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                        .map(tag -\u003e tag.tagName)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                        .collect(Collectors.toList())));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 111
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/TaskListPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Provides a handle for {@code TaskListPanel} containing the list of {@code TaskCard}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class TaskListPanelHandle extends NodeHandle\u003cListView\u003cTask\u003e\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String TASK_LIST_VIEW_ID \u003d \"#taskListView\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CARD_PANE_ID \u003d \"#cardPane\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private Optional\u003cTask\u003e lastRememberedSelectedTaskCard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public TaskListPanelHandle(ListView\u003cTask\u003e taskListPanelNode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        super(taskListPanelNode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns a handle to the selected {@code TaskCardHandle}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * A maximum of 1 item can be selected at any time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws AssertionError if no card is selected, or more than 1 card is selected."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public TaskCardHandle getHandleToSelectedCard() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        List\u003cTask\u003e selectedTaskList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (selectedTaskList.size() !\u003d 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new AssertionError(\"Task list size expected 1.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .map(TaskCardHandle::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .filter(handle -\u003e handle.equals(selectedTaskList.get(0)))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the selected card."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getSelectedCardIndex() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a card is currently selected."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isAnyCardSelected() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        List\u003cTask\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedCardsList.size() \u003e 1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Card list size expected 0 or 1.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return !selectedCardsList.isEmpty();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Navigates the listview to display {@code person}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void navigateToCard(Task task) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (!getRootNode().getItems().contains(task)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new IllegalArgumentException(\"Task does not exist.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            getRootNode().scrollTo(task);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Navigates the listview to {@code index}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void navigateToCard(int index) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d getRootNode().getItems().size()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Index is out of bounds.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            getRootNode().scrollTo(index);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selects the {@code PersonCard} at {@code index} in the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select(int index) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        getRootNode().getSelectionModel().select(index);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the person card handle of a person associated with the {@code index} in the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public TaskCardHandle getTaskCardHandle(int index) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .map(TaskCardHandle::new)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .filter(handle -\u003e handle.equals(getTask(index)))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private Task getTask(int index) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().get(index);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all card nodes in the scene graph."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Card nodes that are visible in the listview are definitely in the scene graph, while some nodes that are not"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * visible in the listview may also be in the scene graph."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cNode\u003e getAllCardNodes() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiRobot.lookup(CARD_PANE_ID).queryAll();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Remembers the selected {@code TaskCard} in the list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void rememberSelectedTaskCard() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        List\u003cTask\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            lastRememberedSelectedTaskCard \u003d Optional.empty();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            lastRememberedSelectedTaskCard \u003d Optional.of(selectedItems.get(0));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns true if the selected {@code TaskCard} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * {@code rememberSelectedTaskCard()} call."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean isSelectedTaskCardChanged() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        List\u003cTask\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            return lastRememberedSelectedTaskCard.isPresent();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            return !lastRememberedSelectedTaskCard.isPresent()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                    || !lastRememberedSelectedTaskCard.get().equals(selectedItems.get(0));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().size();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 35,
      "-": 124
    }
  },
  {
    "path": "src/test/java/seedu/address/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.ReadOnlyTaskBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.TaskBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.storage.JsonTaskBookStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import systemtests.ModelHelper;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.json\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    protected Supplier\u003cReadOnlyTaskBook\u003e initialDataSupplier \u003d () -\u003e null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public TestApp(Supplier\u003cReadOnlyTaskBook\u003e initialDataSupplier, Path saveFileLocation) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initialDataSupplier \u003d initialDataSupplier;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.saveFileLocation \u003d saveFileLocation;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (initialDataSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            JsonTaskBookStorage jsonTaskBookStorage \u003d new JsonTaskBookStorage(saveFileLocation);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                jsonTaskBookStorage.saveTaskBook(initialDataSupplier.get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1080.0, 700.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        userPrefs.setTaskBookFilePath(saveFileLocation);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the address book data stored inside the storage file."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public TaskBook readStorageTaskBook() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            return new TaskBook(storage.readTaskBook().get());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new AssertionError(\"Data is not in the TaskBook format.\", dce);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Storage file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the storage file."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getStorageSaveLocation() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return storage.getTaskBookFilePath();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the model."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        Model copy \u003d new ModelManager((model.getTaskBook()), new UserPrefs(), model.getAccountList());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        ModelHelper.setFilteredList(copy, model.getFilteredTaskList());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        ModelHelper.setFilteredDayList(copy, model.getFilteredDayList());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 1,
      "cheahzk": 15,
      "-": 94
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/CommandHistoryTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//public class CommandHistoryTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//    private CommandHistory history;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//    @Before"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//    public void setUp() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//    public void constructor_withCommandHistory_copiesCommandHistory() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//        final CommandHistory commandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//        commandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//        assertEquals(commandHistoryWithA, new CommandHistory(commandHistoryWithA));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//    public void add() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//        final String validCommand \u003d \"clear\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//        final String invalidCommand \u003d \"adds Bob\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//        history.add(validCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//        history.add(invalidCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//        assertEquals(Arrays.asList(validCommand, invalidCommand), history.getHistory());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//    public void equals() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//        final CommandHistory commandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//        commandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//        final CommandHistory anotherCommandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//        anotherCommandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//        final CommandHistory commandHistoryWithB \u003d new CommandHistory();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//        commandHistoryWithB.add(\"b\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//        assertTrue(commandHistoryWithA.equals(commandHistoryWithA));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//        // same values -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//        assertTrue(commandHistoryWithA.equals(anotherCommandHistoryWithA));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//        // null -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//        assertFalse(commandHistoryWithA.equals(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//        // different types -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//        assertFalse(commandHistoryWithA.equals(5.0f));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//        // different values -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//        assertFalse(commandHistoryWithA.equals(commandHistoryWithB));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//    public void hashcode() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//        final CommandHistory commandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//        commandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//        final CommandHistory anotherCommandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//        anotherCommandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//        final CommandHistory commandHistoryWithB \u003d new CommandHistory();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//        commandHistoryWithB.add(\"b\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//        assertEquals(commandHistoryWithA.hashCode(), anotherCommandHistoryWithA.hashCode());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//        // different values -\u003e returns different hashcode"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//        assertNotEquals(commandHistoryWithA.hashCode(), commandHistoryWithB.hashCode());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "Zeyang-Li": 79
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CATEGORY_DESC_CS2113;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_CS2113;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ENDDATE_DESC_CS2113;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ENDTIME_DESC_CS2113;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_CS2113;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.STARTDATE_DESC_CS2113;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.STARTTIME_DESC_CS2113;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.CS2113;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.logic.suggestions.WrongCommandSuggestion;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.ReadOnlyTaskBook;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.account.Username;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.storage.JsonAccountListStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.storage.JsonTaskBookStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder temporaryFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        Username admin \u003d new Username(\"admin\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        model \u003d new ModelManager();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        model.setLoggedInUser(admin);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        JsonTaskBookStorage taskBookStorage \u003d new JsonTaskBookStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        JsonAccountListStorage accountListStorage \u003d new JsonAccountListStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        StorageManager storage \u003d new StorageManager(taskBookStorage, userPrefsStorage, accountListStorage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            throws IOException, IllegalValueException, DataConversionException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND + \"\\n\" + WrongCommandSuggestion.NO_SUGGESTION);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        //assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException()"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            throws IOException, IllegalValueException, DataConversionException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        //assertHistoryCorrect(deleteCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public void execute_validCommand_success() throws IOException, IllegalValueException, DataConversionException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS1, model);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        //assertHistoryCorrect(listCommand);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        // Setup LogicManager with JsonTaskBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        JsonTaskBookStorage taskBookStorage \u003d"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                new JsonTaskBookIoExceptionThrowingStub(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        StorageManager storage \u003d new StorageManager(taskBookStorage, userPrefsStorage, null);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_CS2113 + STARTDATE_DESC_CS2113 + STARTTIME_DESC_CS2113"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                + ENDDATE_DESC_CS2113 + ENDTIME_DESC_CS2113 + DESCRIPTION_DESC_CS2113 + CATEGORY_DESC_CS2113;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Task expectedTask \u003d new TaskBuilder(CS2113).withTags().build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        expectedModel.addTask(expectedTask);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        expectedModel.commitTaskBook();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(CommandException.class, addCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        //assertHistoryCorrect(addCommand);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void getFilteredTaskList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        logic.getFilteredTaskList().remove(0);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * @throws DataConversionException"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            throws IOException, IllegalValueException, DataConversionException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * @throws DataConversionException"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) throws IOException,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            IllegalValueException, DataConversionException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * @throws DataConversionException"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) throws IOException,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            IllegalValueException, DataConversionException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * @throws DataConversionException"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            throws IOException, IllegalValueException, DataConversionException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTaskBook(), new UserPrefs(), model.getAccountList());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     *      - {@code expectedModel}\u0027s task book was saved to the storage file."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * @throws DataConversionException"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                                           String expectedMessage, Model expectedModel) throws IOException,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            IllegalValueException, DataConversionException {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static class JsonTaskBookIoExceptionThrowingStub extends JsonTaskBookStorage {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        private JsonTaskBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        public void saveTaskBook(ReadOnlyTaskBook taskBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 26,
      "cheahzk": 37,
      "BrittonAlone": 1,
      "Zeyang-Li": 6,
      "-": 143
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.AccountList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.account.Username;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        model \u003d new ModelManager(getTypicalTaskBook(), new UserPrefs(), new AccountList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Username admin \u003d new Username(\"admin\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        model.setLoggedInUser(admin);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void execute_newTask_success() throws DataConversionException, IllegalValueException, IOException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Task validTask \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTaskBook(), new UserPrefs(), new AccountList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        expectedModel.addTask(validTask);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        expectedModel.commitTaskBook();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertCommandSuccess(new AddCommand(validTask), model, commandHistory,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validTask), expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void execute_duplicateTask_throwsCommandException() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Task taskInList \u003d model.getTaskBook().getTaskList().get(0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertCommandFailure(new AddCommand(taskInList), model, commandHistory,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 22,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.CS2100;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.CS2110;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.SAMESTARTDATEWITHCS2110;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.model.AccountList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.model.TaskBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.model.account.Username;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private Model emptyModel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        model \u003d new ModelManager(getTypicalTaskBook(), new UserPrefs(), new AccountList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        Username admin \u003d new Username(\"admin\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        model.setLoggedInUser(admin);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public void setUpEmptyModel() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        emptyModel \u003d new ModelManager(new TaskBook(), new UserPrefs(), new AccountList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        Username admin \u003d new Username(\"admin\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        emptyModel.setLoggedInUser(admin);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public void emptyTaskBook_success() throws DataConversionException, IllegalValueException, IOException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        expectedModel.commitTaskBook();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        assertCommandSuccess(new ClearCommand(\"\"), emptyModel, commandHistory, ClearCommand.MESSAGE_CLEAR_SUCCESS,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public void nonEmptyTaskBook_success()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            throws DataConversionException, IllegalValueException, IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTaskBook(), new UserPrefs(), new AccountList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        expectedModel.resetData(new TaskBook());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        expectedModel.commitTaskBook();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        assertCommandSuccess(new ClearCommand(\"\"), model, commandHistory, ClearCommand.MESSAGE_CLEAR_SUCCESS,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public void clearBefore_nonEmptyTaskBook_success()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            throws DataConversionException, IllegalValueException, IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd-MM-YY\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        calendar.set(Calendar.HOUR_OF_DAY, -24);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        String specificDate \u003d formatter.format(calendar.getTime());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTaskBook(), new UserPrefs(), new AccountList());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        List\u003cTask\u003e tasksToBeCleared \u003d new ArrayList\u003c\u003e(Arrays.asList(CS2110, SAMESTARTDATEWITHCS2110, CS2100));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        expectedModel.deleteTaskList(tasksToBeCleared);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        expectedModel.commitTaskBook();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        assertCommandSuccess(new ClearCommand(\"before\"), model, commandHistory,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                String.format(ClearCommand.MESSAGE_CLEARYD_SUCCESS, 3, specificDate), expectedModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public void clearSpecificDate_nonEmptyTaskBook_success()"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            throws DataConversionException, IllegalValueException, IOException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTaskBook(), new UserPrefs(), new AccountList());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        List\u003cTask\u003e tasksToBeCleared \u003d new ArrayList\u003c\u003e(Arrays.asList(CS2110, SAMESTARTDATEWITHCS2110));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        expectedModel.deleteTaskList(tasksToBeCleared);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        expectedModel.commitTaskBook();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        assertCommandSuccess(new ClearCommand(CS2110.getStartDate().value), model, commandHistory,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                String.format(ClearCommand.MESSAGE_CLEARDATE_SUCCESS, 2, CS2110.getStartDate().value), expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public void clearSpecificDate2_nonEmptyTaskBook_success()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            throws DataConversionException, IllegalValueException, IOException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTaskBook(), new UserPrefs(), new AccountList());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        expectedModel.deleteTask(CS2100);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        expectedModel.commitTaskBook();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        assertCommandSuccess(new ClearCommand(CS2100.getStartDate().value), model, commandHistory,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                String.format(ClearCommand.MESSAGE_CLEARDATE_SUCCESS, 1, CS2100.getStartDate().value), expectedModel);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public void clearSpecificMonth_nonEmptyTaskBook_success()"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            throws DataConversionException, IllegalValueException, IOException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTaskBook(), new UserPrefs(), new AccountList());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        List\u003cTask\u003e tasksToBeCleared \u003d new ArrayList\u003c\u003e(Arrays.asList(CS2110, SAMESTARTDATEWITHCS2110));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        expectedModel.deleteTaskList(tasksToBeCleared);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        expectedModel.commitTaskBook();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        assertCommandSuccess(new ClearCommand(\"01-11\"), model, commandHistory,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                String.format(ClearCommand.MESSAGE_CLEARDATE_SUCCESS, 2, \"01-11\"), expectedModel);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public void clearSpecificMonth2_nonEmptyTaskBook_success()"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            throws DataConversionException, IllegalValueException, IOException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTaskBook(), new UserPrefs(), new AccountList());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        expectedModel.deleteTask(CS2100);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        expectedModel.commitTaskBook();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        assertCommandSuccess(new ClearCommand(\"03-03\"), model, commandHistory,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                String.format(ClearCommand.MESSAGE_CLEARDATE_SUCCESS, 1, \"03-03\"), expectedModel);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public void dateWithNoTask_nonEmptyTaskBook_success()"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            throws DataConversionException, IllegalValueException, IOException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTaskBook(), new UserPrefs(), new AccountList());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        expectedModel.commitTaskBook();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        assertCommandSuccess(new ClearCommand(\"01-01-00\"), model, commandHistory,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                String.format(ClearCommand.MESSAGE_CLEARDATE_SUCCESS, 0, \"01-01-00\"), expectedModel);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public void invalidDate_nonEmptyTaskBook_success()"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            throws DataConversionException {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        assertCommandFailure(new ClearCommand(\"aabb\"), model, commandHistory,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                ClearCommand.MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        assertCommandFailure(new ClearCommand(\"aa-bb\"), model, commandHistory,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                ClearCommand.MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        assertCommandFailure(new ClearCommand(\"aa-bb-cc\"), model, commandHistory,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                ClearCommand.MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        assertCommandFailure(new ClearCommand(\"34-01-99\"), model, commandHistory,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                ClearCommand.MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        assertCommandFailure(new ClearCommand(\"0a-0b-0c\"), model, commandHistory,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                ClearCommand.MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        assertCommandFailure(new ClearCommand(\"01-14-99\"), model, commandHistory,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                ClearCommand.MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        assertCommandFailure(new ClearCommand(\"01-01-2334\"), model, commandHistory,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                ClearCommand.MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        assertCommandFailure(new ClearCommand(\"aa-bb-cc-dd\"), model, commandHistory,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                ClearCommand.MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        assertCommandFailure(new ClearCommand(\"00-00-12\"), model, commandHistory,"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                ClearCommand.MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        assertCommandFailure(new ClearCommand(\"01-00-99\"), model, commandHistory,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                ClearCommand.MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        assertCommandFailure(new ClearCommand(\"012-12-10\"), model, commandHistory,"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                ClearCommand.MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        assertCommandFailure(new ClearCommand(\"12-012-20\"), model, commandHistory,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                ClearCommand.MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        assertCommandFailure(new ClearCommand(\"12-12-112\"), model, commandHistory,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                ClearCommand.MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zeyang-Li": 180,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENDDATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENDTIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTDATE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTTIME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.TaskBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.TaskContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.testutil.EditTaskDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String VALID_NAME_CS2113 \u003d \"CS2113\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String VALID_NAME_CS2101 \u003d \"CS2101\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String VALID_STARTDATE_CS2113 \u003d \"05-05-05\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String VALID_STARTDATE_CS2101 \u003d \"07-07-07\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String VALID_STARTTIME_CS2113 \u003d \"05.00\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String VALID_STARTTIME_CS2101 \u003d \"07.00\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String VALID_ENDDATE_CS2113 \u003d \"06-06-06\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String VALID_ENDDATE_CS2101 \u003d \"08-08-08\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String VALID_ENDTIME_CS2113 \u003d \"06.00\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String VALID_ENDTIME_CS2101 \u003d \"08.00\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String VALID_DESCRIPTION_CS2113 \u003d \"Do sequence diagram\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String VALID_DESCRIPTION_CS2101 \u003d \"Do user guide\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String VALID_CATEGORY_CS2113 \u003d \"a\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String VALID_CATEGORY_CS2101 \u003d \"a\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String VALID_TAG_CS2113 \u003d \"CS2113\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String VALID_TAG_CS2101 \u003d \"CS2101\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String NAME_DESC_CS2113 \u003d \" \" + PREFIX_NAME + VALID_NAME_CS2113;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String NAME_DESC_CS2101 \u003d \" \" + PREFIX_NAME + VALID_NAME_CS2101;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String STARTDATE_DESC_CS2113 \u003d \" \" + PREFIX_STARTDATE + VALID_STARTDATE_CS2113;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String STARTDATE_DESC_CS2101 \u003d \" \" + PREFIX_STARTDATE + VALID_STARTDATE_CS2101;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String STARTTIME_DESC_CS2113 \u003d \" \" + PREFIX_STARTTIME + VALID_STARTTIME_CS2113;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String STARTTIME_DESC_CS2101 \u003d \" \" + PREFIX_STARTTIME + VALID_STARTTIME_CS2101;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String ENDDATE_DESC_CS2113 \u003d \" \" + PREFIX_ENDDATE + VALID_ENDDATE_CS2113;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String ENDDATE_DESC_CS2101 \u003d \" \" + PREFIX_ENDDATE + VALID_ENDDATE_CS2101;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String ENDTIME_DESC_CS2113 \u003d \" \" + PREFIX_ENDTIME + VALID_ENDTIME_CS2113;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String ENDTIME_DESC_CS2101 \u003d \" \" + PREFIX_ENDTIME + VALID_ENDTIME_CS2101;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String DESCRIPTION_DESC_CS2113 \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_CS2113;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String DESCRIPTION_DESC_CS2101 \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_CS2101;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String CATEGORY_DESC_CS2113 \u003d \" \" + PREFIX_CATEGORY + VALID_CATEGORY_CS2113;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String CATEGORY_DESC_CS2101 \u003d \" \" + PREFIX_CATEGORY + VALID_CATEGORY_CS2101;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String TAG_DESC_CS2113 \u003d \" \" + PREFIX_TAG + VALID_TAG_CS2113;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String TAG_DESC_CS2101 \u003d \" \" + PREFIX_TAG + VALID_TAG_CS2101;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \" \"; // blank not allowed in names"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String INVALID_STARTDATE_DESC \u003d \" \" + PREFIX_STARTDATE + \"a\"; // arbitary not allowed startDates"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String INVALID_STARTTIME_DESC \u003d \" \" + PREFIX_STARTTIME + \"a\"; // arbitary not allowed startTimes"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String INVALID_ENDDATE_DESC \u003d \" \" + PREFIX_ENDDATE + \"a\"; // arbitary not allowed in endDates"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String INVALID_ENDTIME_DESC \u003d \" \" + PREFIX_ENDTIME + \"a\"; // arbitary not allowed in endTimes"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String INVALID_DESCRIPTION_DESC \u003d \" \" + PREFIX_DESCRIPTION; // empty str not allowed for desc"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String INVALID_CATEGORY_DESC \u003d \" \" + PREFIX_CATEGORY + \"b\"; // arbitary str not allowed in cat"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final EditTaskDescriptorBuilder DESC_CS2113;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final EditTaskDescriptorBuilder DESC_CS2101;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        DESC_CS2113 \u003d new EditTaskDescriptorBuilder().withName(VALID_NAME_CS2113)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                .withStartDate(VALID_STARTDATE_CS2113).withStartTime(VALID_STARTTIME_CS2113)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                .withEndDate(VALID_ENDDATE_CS2113).withEndTime(VALID_ENDTIME_CS2113)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                .withCategories(VALID_CATEGORY_CS2113).withDescription(VALID_DESCRIPTION_CS2113)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                .withTags(VALID_TAG_CS2113);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        DESC_CS2101 \u003d new EditTaskDescriptorBuilder().withName(VALID_NAME_CS2101)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                .withStartDate(VALID_STARTDATE_CS2101).withStartTime(VALID_STARTTIME_CS2101)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                .withEndDate(VALID_ENDDATE_CS2101).withEndTime(VALID_ENDTIME_CS2101)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                .withCategories(VALID_CATEGORY_CS2101).withDescription(VALID_DESCRIPTION_CS2101)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                .withTags(VALID_TAG_CS2101);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * @throws DataConversionException"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            CommandResult expectedCommandResult, Model expectedModel)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                    throws IOException, IllegalValueException, DataConversionException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandHistory, CommandResult, Model)}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * @throws DataConversionException"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            String expectedMessage, Model expectedModel)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                    throws IOException, IllegalValueException, DataConversionException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, actualCommandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * - the task book, filtered task list and selected task in {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * @throws DataConversionException"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            String expectedMessage) throws DataConversionException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        TaskBook expectedTaskBook \u003d new TaskBook(actualModel.getTaskBook());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        List\u003cTask\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredTaskList());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Task expectedSelectedTask \u003d actualModel.getSelectedTask();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        } catch (CommandException | IllegalValueException | IOException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            assertEquals(expectedTaskBook, actualModel.getTaskBook());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredTaskList());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            assertEquals(expectedSelectedTask, actualModel.getSelectedTask());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the task at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * {@code model}\u0027s task book."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static void showTaskAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredTaskList().size());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Task task \u003d model.getFilteredTaskList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        final String[] splitName \u003d task.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        model.updateFilteredTaskList(new TaskContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertEquals(1, model.getFilteredTaskList().size());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Deletes the first task in {@code model}\u0027s filtered list from {@code model}\u0027s task book."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static void deleteFirstTask(Model model) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Task firstTask \u003d model.getFilteredTaskList().get(0);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        model.deleteTask(firstTask);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        model.commitTaskBook();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 22,
      "cheahzk": 70,
      "BrittonAlone": 3,
      "Zeyang-Li": 3,
      "-": 88
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.AccountList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.account.Username;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        model \u003d new ModelManager(getTypicalTaskBook(), new UserPrefs(), new AccountList());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getTaskBook(), new UserPrefs(), new AccountList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        Username admin \u003d new Username(\"admin\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        model.setLoggedInUser(admin);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public void execute_exit_success() throws IOException, IllegalValueException, DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, commandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 15,
      "Zeyang-Li": 3,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExportCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.model.AccountList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.model.TaskBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.model.account.Username;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "public class ExportCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private Path exportFilePath;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        model \u003d new ModelManager(getTypicalTaskBook(), new UserPrefs(), new AccountList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getTaskBook(), new UserPrefs(), new AccountList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        Username admin \u003d new Username(\"admin\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        model.setLoggedInUser(admin);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        exportFilePath \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\", \"testExportCommand.json\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public void execute() throws DataConversionException, IllegalValueException, IOException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        String expectedMessage \u003d String.format(ExportCommand.MESSAGE_EXPORT_SUCCESS, exportFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        ExportCommand expectedCommand \u003d new ExportCommand(exportFilePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        assertCommandSuccess(expectedCommand, model, new CommandHistory(), expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public void emptyTaskbook_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        ExportCommand exportCommand \u003d new ExportCommand(exportFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        model.resetData(new TaskBook());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        thrown.expectMessage(ExportCommand.MESSAGE_FAILURE_EMPTY_AB);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        exportCommand.execute(model, new CommandHistory());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public void execute_exportWithCategoryA() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        expectedModel \u003d model;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        ExportCommand exportCommand \u003d new ExportCommand(exportFilePath, \"a\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        exportCommand.execute(model, new CommandHistory());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        String expectedMessage \u003d String.format(ExportCommand.MESSAGE_EXPORT_A_SUCCESS, exportFilePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        ExportCommand expectedCommand \u003d new ExportCommand(exportFilePath, \"a\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        assertCommandSuccess(expectedCommand, model, new CommandHistory(), expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public void execute_exportWithCategoryE() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        expectedModel \u003d model;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        ExportCommand exportCommand \u003d new ExportCommand(exportFilePath, \"e\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        exportCommand.execute(model, new CommandHistory());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        String expectedMessage \u003d String.format(ExportCommand.MESSAGE_EXPORT_E_SUCCESS, exportFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        ExportCommand expectedCommand \u003d new ExportCommand(exportFilePath, \"e\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        assertCommandSuccess(expectedCommand, model, new CommandHistory(), expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public void execute_exportWithCategorR() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        expectedModel \u003d model;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        ExportCommand exportCommand \u003d new ExportCommand(exportFilePath, \"r\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        exportCommand.execute(model, new CommandHistory());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        String expectedMessage \u003d String.format(ExportCommand.MESSAGE_EXPORT_R_SUCCESS, exportFilePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        ExportCommand expectedCommand \u003d new ExportCommand(exportFilePath, \"r\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        assertCommandSuccess(expectedCommand, model, new CommandHistory(), expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public void execute_exportWithCategoryO() throws Exception {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        expectedModel \u003d model;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        ExportCommand exportCommand \u003d new ExportCommand(exportFilePath, \"o\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        exportCommand.execute(model, new CommandHistory());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        String expectedMessage \u003d String.format(ExportCommand.MESSAGE_EXPORT_O_SUCCESS, exportFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        ExportCommand expectedCommand \u003d new ExportCommand(exportFilePath, \"o\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        assertCommandSuccess(expectedCommand, model, new CommandHistory(), expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zeyang-Li": 116
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import static junit.framework.TestCase.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import seedu.address.model.AccountList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import seedu.address.model.TaskBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import seedu.address.model.account.Username;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import seedu.address.model.task.TaskContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private Model emptyModel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        model \u003d new ModelManager(getTypicalTaskBook(), new UserPrefs(), new AccountList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        Username admin \u003d new Username(\"admin\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        model.setLoggedInUser(admin);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public void setUpEmptyModel() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        emptyModel \u003d new ModelManager(new TaskBook(), new UserPrefs(), new AccountList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        Username admin \u003d new Username(\"admin\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        emptyModel.setLoggedInUser(admin);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public void findCommand_test() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        TaskContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                new TaskContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        TaskContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                new TaskContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private TaskContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        return new TaskContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jingchen-z": 30,
      "-": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public void execute_help_success() throws IOException, IllegalValueException, DataConversionException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, commandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 2,
      "Zeyang-Li": 3,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HistoryCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public void execute() throws IllegalValueException, IOException, DataConversionException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history, HistoryCommand.MESSAGE_NO_HISTORY, expectedModel);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        String command1 \u003d \"clear\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(HistoryCommand.MESSAGE_SUCCESS, command1), expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        String command2 \u003d \"illegal command\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        String command3 \u003d \"list td\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command2);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command3);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(HistoryCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                String.join(\"\\n\", command3, command2, command1));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jingchen-z": 8,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ImportCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.ENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.HOME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.model.AccountList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.model.ReadOnlyTaskBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.model.account.Username;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.testutil.TaskBookBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "public class ImportCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private static final int TASKS_ADDED \u003d 2;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private Path importFilePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public void setUp() throws IOException, IllegalValueException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        model \u003d new ModelManager(new TaskBookBuilder().build(), new UserPrefs(), new AccountList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        expectedModel \u003d new ModelManager(new TaskBookBuilder().withTask(HOME).withTask(ENT).build(),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                new UserPrefs(), new AccountList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        Username admin \u003d new Username(\"admin\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        model.setLoggedInUser(admin);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        expectedModel.setLoggedInUser(admin);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        importFilePath \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\", \"testImportCommand.json\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        expectedModel.exportFilteredTaskBook(importFilePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public void constructor_nullImportFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        new ImportCommand(null);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public void execute() throws CommandException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        CommandResult commandResult \u003d new ImportCommand(importFilePath).execute(model, new CommandHistory());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        String expectedMessage \u003d String.format(ImportCommand.MESSAGE_IMPORT_SUCCESS, TASKS_ADDED);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        ReadOnlyTaskBook taskBook \u003d model.getTaskBook();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        ReadOnlyTaskBook expectedTaskBook \u003d expectedModel.getTaskBook();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        assertEquals(expectedMessage, commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        assertEquals(expectedTaskBook.getTaskList(), taskBook.getTaskList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        ImportCommand standardCommand \u003d new ImportCommand(importFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        final Path differentFilePath \u003d Paths.get(\"src\", \"test\", \"data\", \"testImportCommandDifferent.json\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        // same value -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        ImportCommand commandWithSameArgument \u003d new ImportCommand(importFilePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameArgument));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        // null value -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        // different filename -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        assertFalse(standardCommand.equals(new ImportCommand(differentFilePath)));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zeyang-Li": 87
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import static seedu.address.logic.commands.ClearCommand.MESSAGE_INVALID_DATE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import seedu.address.model.AccountList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.ReadOnlyAccountList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.account.Username;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    private String[] argument;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        model \u003d new ModelManager(getTypicalTaskBook(), new UserPrefs(), new AccountList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getTaskBook(), new UserPrefs(), model.getAccountList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        Username admin \u003d new Username(\"admin\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        model.setLoggedInUser(admin);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        expectedModel.setLoggedInUser(admin);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        this.argument \u003d new String[] {\"\"};"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    private ReadOnlyAccountList getTypicalAccountList() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public void execute_listAllTask_success()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            throws IOException, IllegalValueException, DataConversionException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        assertCommandSuccess(new ListCommand(argument), model, commandHistory,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                ListCommand.MESSAGE_SUCCESS1, expectedModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public void execute_listTdTask_success()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            throws IOException, IllegalValueException, DataConversionException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        this.argument \u003d new String[] {\"td\"};"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        Predicate\u003cTask\u003e predicate \u003d task -\u003e meetRequirementTd(task);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        expectedModel.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        expectedModel.commitTaskBook();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        assertCommandSuccess(new ListCommand(argument), model, commandHistory,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                ListCommand.MESSAGE_SUCCESS2, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public void execute_listDateTask_Date_success()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            throws IOException, IllegalValueException, DataConversionException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        this.argument \u003d new String[] {\"01-01-11\"};"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        String specifiedDate \u003d argument[0];"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        assertCommandSuccess(new ListCommand(argument), model, commandHistory,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                String.format(MESSAGE_SUCCESS3, specifiedDate),expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public void execute_listCategoryTask1_success()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            throws IOException, IllegalValueException, DataConversionException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        this.argument \u003d new String[] {\"a\"};"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        String specifiedCategory \u003d argument[0];"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        assertCommandSuccess(new ListCommand(argument), model, commandHistory,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                String.format(MESSAGE_SUCCESS4, categoryString(specifiedCategory)),expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public void execute_listCategoryTask2_success()"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            throws IOException, IllegalValueException, DataConversionException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        this.argument \u003d new String[] {\"c\"};"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        String specifiedCategory \u003d argument[0];"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        assertCommandSuccess(new ListCommand(argument), model, commandHistory,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                String.format(MESSAGE_SUCCESS4, categoryString(specifiedCategory)),expectedModel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public void invalidInput_failure()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            throws DataConversionException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        assertCommandFailure(new ListCommand(new String[] {\"abc\"}), model, commandHistory,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        assertCommandFailure(new ListCommand(new String[] {\"aa-bb-cc\"}), model, commandHistory,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        assertCommandFailure(new ListCommand(new String[] {\"38-01-11\"}), model, commandHistory,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        assertCommandFailure(new ListCommand(new String[] {\"01-13-11\"}), model, commandHistory,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        assertCommandFailure(new ListCommand(new String[] {\"01-01-1111\"}), model, commandHistory,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        assertCommandFailure(new ListCommand(new String[] {\"aa-bb-cc-dd\"}), model, commandHistory,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        assertCommandFailure(new ListCommand(new String[] {\"001-01-11\"}), model, commandHistory,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 11,
      "cheahzk": 1,
      "BrittonAlone": 72,
      "-": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/MonthCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import seedu.address.model.AccountList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import seedu.address.model.TaskBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import seedu.address.model.account.Username;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "public class MonthCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private Model emptyModel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        model \u003d new ModelManager(getTypicalTaskBook(), new UserPrefs(), new AccountList());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        Username admin \u003d new Username(\"admin\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        model.setLoggedInUser(admin);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public void setUpEmptyModel() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        emptyModel \u003d new ModelManager(new TaskBook(), new UserPrefs(), new AccountList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        Username admin \u003d new Username(\"admin\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        emptyModel.setLoggedInUser(admin);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public void executeNextMonth_success()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            throws DataConversionException, IllegalValueException, IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        String input \u003d \"+\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        String output \u003d \"next\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        assertCommandSuccess(new MonthCommand(input), model, commandHistory,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                String.format(MonthCommand.MESSAGE_SUCCESS, output), model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public void executePrevousMonth_success()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            throws DataConversionException, IllegalValueException, IOException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        String input \u003d \"-\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        String output \u003d \"previous\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        assertCommandSuccess(new MonthCommand(input), model, commandHistory,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                String.format(MonthCommand.MESSAGE_SUCCESS, output), model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public void executeThisMonth_success()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            throws DataConversionException, IllegalValueException, IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        String input \u003d \"\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        String output \u003d \"this\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        assertCommandSuccess(new MonthCommand(input), model, commandHistory,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                String.format(MonthCommand.MESSAGE_SUCCESS, output), model);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jingchen-z": 66
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RedoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstTask;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.model.AccountList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.model.account.Username;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalTaskBook(), new UserPrefs(), new AccountList());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalTaskBook(), new UserPrefs(), new AccountList());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of both models\u0027 undo/redo history"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        Username admin \u003d new Username(\"admin\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        model.setLoggedInUser(admin);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        deleteFirstTask(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        deleteFirstTask(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        model.undoTaskBook();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        model.undoTaskBook();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        expectedModel.setLoggedInUser(admin);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        deleteFirstTask(expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        deleteFirstTask(expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        expectedModel.undoTaskBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        expectedModel.undoTaskBook();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public void execute() throws DataConversionException, IllegalValueException, IOException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple redoable states in model"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        expectedModel.redoTaskBook();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // single redoable state in model"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        expectedModel.redoTaskBook();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // no redoable state in model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zeyang-Li": 25,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RemindCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import seedu.address.model.AccountList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import seedu.address.model.account.Username;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "public class RemindCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        model \u003d new ModelManager(getTypicalTaskBook(), new UserPrefs(), new AccountList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        Username admin \u003d new Username(\"admin\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        model.setLoggedInUser(admin);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public void remindStart_success() throws DataConversionException, IllegalValueException, IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getTaskBook(), new UserPrefs(), new AccountList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        expectedModel.commitTaskBook();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        assertCommandSuccess(new RemindCommand(\"start\"), model, commandHistory, RemindCommand.MESSAGE_REMIND_SUCCESS,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public void remindDdl_success() throws DataConversionException, IllegalValueException, IOException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getTaskBook(), new UserPrefs(), new AccountList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        expectedModel.commitTaskBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        assertCommandSuccess(new RemindCommand(\"ddl\"), model, commandHistory, RemindCommand.MESSAGE_REMIND_SUCCESS,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public void remindCategoryStart1_success() throws DataConversionException, IllegalValueException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getTaskBook(), new UserPrefs(), new AccountList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        expectedModel.commitTaskBook();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        assertCommandSuccess(new RemindCommand(\"a start\"), model, commandHistory, RemindCommand.MESSAGE_REMIND_SUCCESS,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public void remindCategoryStart2_success() throws DataConversionException, IllegalValueException, IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getTaskBook(), new UserPrefs(), new AccountList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        expectedModel.commitTaskBook();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        assertCommandSuccess(new RemindCommand(\"c start\"), model, commandHistory, RemindCommand.MESSAGE_REMIND_SUCCESS,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public void remindCategoryDdl1_success() throws DataConversionException, IllegalValueException, IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getTaskBook(), new UserPrefs(), new AccountList());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        expectedModel.commitTaskBook();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        assertCommandSuccess(new RemindCommand(\"a ddl\"), model, commandHistory, RemindCommand.MESSAGE_REMIND_SUCCESS,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public void remindCategoryDdl2_success() throws DataConversionException, IllegalValueException, IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getTaskBook(), new UserPrefs(), new AccountList());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        expectedModel.commitTaskBook();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        assertCommandSuccess(new RemindCommand(\"c ddl\"), model, commandHistory, RemindCommand.MESSAGE_REMIND_SUCCESS,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public void invalidInput_failure()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            throws DataConversionException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        assertCommandFailure(new RemindCommand(\"\"), model, commandHistory,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        assertCommandFailure(new RemindCommand(\" \"), model, commandHistory,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        assertCommandFailure(new RemindCommand(\"asdas\"), model, commandHistory,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        assertCommandFailure(new RemindCommand(\"asd aslf\"), model, commandHistory,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        assertCommandFailure(new RemindCommand(\"k start\"), model, commandHistory,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        assertCommandFailure(new RemindCommand(\"a sss\"), model, commandHistory,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrittonAlone": 118
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/TimelineCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import seedu.address.model.AccountList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import seedu.address.model.TaskBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import seedu.address.model.account.Username;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "public class TimelineCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private Model emptyModel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        model \u003d new ModelManager(getTypicalTaskBook(), new UserPrefs(), new AccountList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        Username admin \u003d new Username(\"admin\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        model.setLoggedInUser(admin);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public void setUpEmptyModel() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        emptyModel \u003d new ModelManager(new TaskBook(), new UserPrefs(), new AccountList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        Username admin \u003d new Username(\"admin\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        emptyModel.setLoggedInUser(admin);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public void executeTimeline_success()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            throws DataConversionException, IllegalValueException, IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        String input \u003d \"01-04-19\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        assertCommandSuccess(new TimelineCommand(input), model, commandHistory,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                String.format(TimelineCommand.MESSAGE_SUCCESS, input), model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public void executeTimeline_invalidDay()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            throws DataConversionException, IllegalValueException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        String invalidInput \u003d \"31-04-19\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        assertCommandFailure(new TimelineCommand(invalidInput), model, commandHistory,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                TimelineCommand.MESSAGE_ILLEGAL_VALUE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public void executeTimeline_invalidMonth()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            throws DataConversionException, IllegalValueException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        String invalidInput \u003d \"01-13-19\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        assertCommandFailure(new TimelineCommand(invalidInput), model, commandHistory,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                TimelineCommand.MESSAGE_ILLEGAL_VALUE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public void executeTimeline_invalidYear()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            throws DataConversionException, IllegalValueException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        String invalidInput \u003d \"01-04-100\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        assertCommandFailure(new TimelineCommand(invalidInput), model, commandHistory,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                TimelineCommand.MESSAGE_ILLEGAL);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jingchen-z": 75
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UndoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstTask;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.model.AccountList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.model.account.Username;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalTaskBook(), new UserPrefs(), new AccountList());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalTaskBook(), new UserPrefs(), new AccountList());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of models\u0027 undo/redo history"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        Username admin \u003d new Username(\"admin\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        model.setLoggedInUser(admin);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        deleteFirstTask(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        deleteFirstTask(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        expectedModel.setLoggedInUser(admin);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        deleteFirstTask(expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        deleteFirstTask(expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public void execute() throws DataConversionException, IllegalValueException, IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple undoable states in model"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        expectedModel.undoTaskBook();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // single undoable state in model"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        expectedModel.undoTaskBook();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // no undoable states in model"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zeyang-Li": 21,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CATEGORY_DESC_CS2101;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_CS2101;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ENDDATE_DESC_CS2101;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ENDTIME_DESC_CS2101;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_CATEGORY_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DESCRIPTION_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ENDDATE_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ENDTIME_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_STARTDATE_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_STARTTIME_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_CS2101;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_CS2113;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.STARTDATE_DESC_CS2101;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.STARTTIME_DESC_CS2101;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_CS2101;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_CS2113;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_CS2101;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_CS2101;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ENDDATE_CS2101;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ENDTIME_CS2101;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_CS2101;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STARTDATE_CS2101;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STARTTIME_CS2101;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_CS2101;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_CS2113;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.CS2101;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Categories;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.EndDate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.EndTime;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.StartDate;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.StartTime;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Task expectedTask \u003d new TaskBuilder(CS2101).withTags(VALID_TAG_CS2101).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_CS2101 + STARTDATE_DESC_CS2101"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                + STARTTIME_DESC_CS2101 + ENDDATE_DESC_CS2101 + ENDTIME_DESC_CS2101 + DESCRIPTION_DESC_CS2101"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                + CATEGORY_DESC_CS2101 + TAG_DESC_CS2101, new AddCommand(expectedTask));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_CS2113 + NAME_DESC_CS2101 + STARTDATE_DESC_CS2101"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                + STARTTIME_DESC_CS2101 + ENDDATE_DESC_CS2101 + ENDTIME_DESC_CS2101 + DESCRIPTION_DESC_CS2101"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                + CATEGORY_DESC_CS2101 + TAG_DESC_CS2101, new AddCommand(expectedTask));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Task expectedTaskMultipleTags \u003d new TaskBuilder(CS2101).withTags(VALID_TAG_CS2101, VALID_TAG_CS2113)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_CS2101 + STARTDATE_DESC_CS2101"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                + STARTTIME_DESC_CS2101 + ENDDATE_DESC_CS2101 + ENDTIME_DESC_CS2101 + DESCRIPTION_DESC_CS2101"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                + CATEGORY_DESC_CS2101 + TAG_DESC_CS2101 + TAG_DESC_CS2113, new AddCommand(expectedTaskMultipleTags));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Task expectedTask \u003d new TaskBuilder(CS2101).withTags().build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_CS2101 + STARTDATE_DESC_CS2101"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                + STARTTIME_DESC_CS2101 + ENDDATE_DESC_CS2101 + ENDTIME_DESC_CS2101 + DESCRIPTION_DESC_CS2101"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                + CATEGORY_DESC_CS2101, new AddCommand(expectedTask));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_CS2101 + STARTDATE_DESC_CS2101 + STARTTIME_DESC_CS2101"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                + ENDDATE_DESC_CS2101 + ENDTIME_DESC_CS2101 + DESCRIPTION_DESC_CS2101 + CATEGORY_DESC_CS2101,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        // missing startDate prefix"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_CS2101 + VALID_STARTDATE_CS2101 + STARTTIME_DESC_CS2101"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                + ENDDATE_DESC_CS2101 + ENDTIME_DESC_CS2101 + DESCRIPTION_DESC_CS2101 + CATEGORY_DESC_CS2101,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        // missing startTime prefix"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_CS2101 + STARTDATE_DESC_CS2101 + VALID_STARTTIME_CS2101"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                + ENDDATE_DESC_CS2101 + ENDTIME_DESC_CS2101 + DESCRIPTION_DESC_CS2101 + CATEGORY_DESC_CS2101,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        // missing endDate prefix"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_CS2101 + STARTDATE_DESC_CS2101 + STARTTIME_DESC_CS2101"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                + VALID_ENDDATE_CS2101 + ENDTIME_DESC_CS2101 + DESCRIPTION_DESC_CS2101 + CATEGORY_DESC_CS2101,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        // missing endTime prefix"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_CS2101 + STARTDATE_DESC_CS2101 + STARTTIME_DESC_CS2101"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                + ENDDATE_DESC_CS2101 + VALID_ENDTIME_CS2101 + DESCRIPTION_DESC_CS2101 + CATEGORY_DESC_CS2101,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        // missing description prefix"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_CS2101 + STARTDATE_DESC_CS2101 + STARTTIME_DESC_CS2101"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                + ENDDATE_DESC_CS2101 + ENDTIME_DESC_CS2101 + VALID_DESCRIPTION_CS2101 + CATEGORY_DESC_CS2101,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        // missing category prefix"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_CS2101 + STARTDATE_DESC_CS2101 + STARTTIME_DESC_CS2101"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                        + ENDDATE_DESC_CS2101 + ENDTIME_DESC_CS2101 + DESCRIPTION_DESC_CS2101 + VALID_CATEGORY_CS2101,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_CS2101 + VALID_STARTDATE_CS2101 + VALID_STARTTIME_CS2101"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                + VALID_ENDDATE_CS2101 + VALID_ENDTIME_CS2101 + VALID_DESCRIPTION_CS2101 + VALID_CATEGORY_CS2101,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + STARTDATE_DESC_CS2101 + STARTTIME_DESC_CS2101"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                + ENDDATE_DESC_CS2101 + ENDTIME_DESC_CS2101 + DESCRIPTION_DESC_CS2101 + CATEGORY_DESC_CS2101"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                + TAG_DESC_CS2101, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        // invalid startDate"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_CS2101 + INVALID_STARTDATE_DESC + STARTTIME_DESC_CS2101"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                + ENDDATE_DESC_CS2101 + ENDTIME_DESC_CS2101 + DESCRIPTION_DESC_CS2101 + CATEGORY_DESC_CS2101"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                + TAG_DESC_CS2101, StartDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        // invalid startTime"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_CS2101 + STARTDATE_DESC_CS2101 + INVALID_STARTTIME_DESC"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                + ENDDATE_DESC_CS2101 + ENDTIME_DESC_CS2101 + DESCRIPTION_DESC_CS2101 + CATEGORY_DESC_CS2101"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                + TAG_DESC_CS2101, StartTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        // invalid endDate"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_CS2101 + STARTDATE_DESC_CS2101 + STARTTIME_DESC_CS2101"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                + INVALID_ENDDATE_DESC + ENDTIME_DESC_CS2101 + DESCRIPTION_DESC_CS2101 + CATEGORY_DESC_CS2101"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                + TAG_DESC_CS2101, EndDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        // invalid endTime"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_CS2101 + STARTDATE_DESC_CS2101 + STARTTIME_DESC_CS2101"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                + ENDDATE_DESC_CS2101 + INVALID_ENDTIME_DESC + DESCRIPTION_DESC_CS2101 + CATEGORY_DESC_CS2101"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                + TAG_DESC_CS2101, EndTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        // invalid description"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_CS2101 + STARTDATE_DESC_CS2101 + STARTTIME_DESC_CS2101"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                + ENDDATE_DESC_CS2101 + ENDTIME_DESC_CS2101 + INVALID_DESCRIPTION_DESC + CATEGORY_DESC_CS2101"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                + TAG_DESC_CS2101, Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        // invalid categories"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_CS2101 + STARTDATE_DESC_CS2101 + STARTTIME_DESC_CS2101"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                + ENDDATE_DESC_CS2101 + ENDTIME_DESC_CS2101 + DESCRIPTION_DESC_CS2101 + INVALID_CATEGORY_DESC"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                + TAG_DESC_CS2101, Categories.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_CS2101 + STARTDATE_DESC_CS2101 + STARTTIME_DESC_CS2101"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                + ENDDATE_DESC_CS2101 + ENDTIME_DESC_CS2101 + DESCRIPTION_DESC_CS2101 + CATEGORY_DESC_CS2101"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + STARTDATE_DESC_CS2101 + STARTTIME_DESC_CS2101"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                + ENDDATE_DESC_CS2101 + ENDTIME_DESC_CS2101 + INVALID_DESCRIPTION_DESC + CATEGORY_DESC_CS2101,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_CS2101 + STARTDATE_DESC_CS2101"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                + STARTTIME_DESC_CS2101 + ENDDATE_DESC_CS2101 + ENDTIME_DESC_CS2101 + DESCRIPTION_DESC_CS2101"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                + CATEGORY_DESC_CS2101, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 119,
      "-": 63
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ClearCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "public class ClearCommandParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private ClearCommandParser parser \u003d new ClearCommandParser();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public void parse_invalidArg_throwsParseException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        assertParseFailure(parser, \"aa-bb-cc-dd\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ClearCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        assertParseFailure(parser, \"aa-bb ccdd\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ClearCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        assertParseFailure(parser, \"01\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ClearCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        assertParseFailure(parser, \"01_01_11\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ClearCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        assertParseFailure(parser, \"01~01~11\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ClearCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        assertParseFailure(parser, \"0\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ClearCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zeyang-Li": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ExportCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import static seedu.address.logic.parser.ExportCommandParser.MESSAGE_INVALID_CATEGORY_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import static seedu.address.logic.parser.ExportCommandParser.MESSAGE_INVALID_FILETYPE_FORMAT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "public class ExportCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private ExportCommandParser parser \u003d new ExportCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public void parse_invalidArgsLength_failure() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        assertParseFailure(parser, \"\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        assertParseFailure(parser, \"a all.json test\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public void parse_invalidFilename_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        // wrong filetype"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        assertParseFailure(parser, \"testExportFile.xml\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                String.format(MESSAGE_INVALID_FILETYPE_FORMAT, ExportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        // no extension"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        assertParseFailure(parser, \"testExportFile\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                String.format(MESSAGE_INVALID_FILETYPE_FORMAT, ExportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        // wrong category type"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        assertParseFailure(parser, \"testExportFile.json t\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                String.format(MESSAGE_INVALID_CATEGORY_FORMAT, ExportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        assertParseFailure(parser, \"testExportFile.json cca\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                String.format(MESSAGE_INVALID_CATEGORY_FORMAT, ExportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public void parse_validFileType() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        Path filePath;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        ExportCommand expectedCommand;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        filePath \u003d Paths.get(\"data\", \"testExportFile.json\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        expectedCommand \u003d new ExportCommand(filePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        // parse user input without whitespaces"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        assertParseSuccess(parser, \" testExportFile.json\", expectedCommand);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        // parse user input with whitespaces"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        assertParseSuccess(parser, \"  testExportFile.json    \", expectedCommand);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public void parse_validCategoryType() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        Path filePath;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        filePath \u003d Paths.get(\"data\", \"testExportFile.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        assertParseSuccess(parser, \"testExportFile.json a\", new ExportCommand(filePath, \"a\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        assertParseSuccess(parser, \"testExportFile.json c\", new ExportCommand(filePath, \"c\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        assertParseSuccess(parser, \"testExportFile.json e\", new ExportCommand(filePath, \"e\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        assertParseSuccess(parser, \"testExportFile.json r\", new ExportCommand(filePath, \"r\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        assertParseSuccess(parser, \"testExportFile.json o\", new ExportCommand(filePath, \"o\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zeyang-Li": 78
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ImportCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "public class ImportCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private ImportCommandParser parser \u003d new ImportCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public void parse_missingNotNullField_failure() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        // no parameters"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public void parse_validArgs_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        Path filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        ImportCommand expectedCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        filePath \u003d Paths.get(\"data\", \"testImportFile.json\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        expectedCommand \u003d new ImportCommand(filePath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        // parse user input without whitespaces"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        assertParseSuccess(parser, \" testImportFile.json\", expectedCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        // parse user input with whitespaces"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        assertParseSuccess(parser, \"  testImportFile.json    \", expectedCommand);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public void parse_invalidFilename_throwsParseException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        // wrong filetype"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        assertParseFailure(parser, \"testImportFile.xml\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        // no extension"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        assertParseFailure(parser, \"testImportFile\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zeyang-Li": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.StartDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static final String INVALID_NAME \u003d \"Do CS2101\u0026\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static final String INVALID_STARTDATE \u003d \"19.03.01\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#cs2101\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static final String VALID_NAME \u003d \"Do CS2101\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static final String VALID_STARTDATE \u003d \"03-01-19\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"important\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"cs2101\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertEquals(INDEX_FIRST_TASK, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertEquals(INDEX_FIRST_TASK, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void parseStartDate_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseStartDate((String) null));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void parseStartDate_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseStartDate(INVALID_STARTDATE));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void parseStartDate_validValueWithoutWhitespace_returnsStartDate() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        StartDate expectedStartDate \u003d new StartDate(VALID_STARTDATE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertEquals(expectedStartDate, ParserUtil.parseStartDate(VALID_STARTDATE));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void parseStartDate_validValueWithWhitespace_returnsTrimmedStartDate() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String startDateWithWhitespace \u003d WHITESPACE + VALID_STARTDATE + WHITESPACE;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        StartDate expectedStartDate \u003d new StartDate(VALID_STARTDATE);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertEquals(expectedStartDate, ParserUtil.parseStartDate(startDateWithWhitespace));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(null);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(INVALID_TAG);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(null);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 24,
      "-": 132
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/TaskBookParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.logic.suggestions.WrongCommandSuggestion;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.TaskContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.testutil.TaskUtil;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class TaskBookParserTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final TaskBookParser parser \u003d new TaskBookParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Task task \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(TaskUtil.getAddCommand(task));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertEquals(new AddCommand(task), command);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void parseCommand_addAlias() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Task task \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(AddCommand.COMMAND_ALIAS + \" \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                + TaskUtil.getTaskDetails(task));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertEquals(new AddCommand(task), command);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \"\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void parseCommand_clearAlias() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS) instanceof ClearCommand);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS + \"\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_TASK), command);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void parseCommand_deleteAlias() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                DeleteCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_TASK.getOneBased());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_TASK), command);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Task task \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder(task).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                + INDEX_FIRST_TASK.getOneBased() + \" \" + TaskUtil.getEditTaskDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_TASK, descriptor), command);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void parseCommand_editAlias() throws Exception {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Task task \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder(task).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                + INDEX_FIRST_TASK.getOneBased() + \" \" + TaskUtil.getEditTaskDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_TASK, descriptor), command);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertEquals(new FindCommand(new TaskContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void parseCommand_findAlias() throws Exception {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                FindCommand.COMMAND_ALIAS + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertEquals(new FindCommand(new TaskContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \"\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \"\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND + \"\\n\" + WrongCommandSuggestion.NO_SUGGESTION,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                    pe.getMessage());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void parseCommand_historyAlias() throws Exception {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS + \"\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \"\") instanceof ListCommand);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void parseCommand_listAlias() throws Exception {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS) instanceof ListCommand);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS + \"\") instanceof ListCommand);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void parseCommand_redoCommandAlias_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_ALIAS) instanceof RedoCommand);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_ALIAS + \" 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void parseCommand_undoCommandAlias_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_ALIAS) instanceof UndoCommand);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_ALIAS + \" 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 83,
      "-": 113
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/suggestion/WrongCommandSuggestionTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "package seedu.address.logic.suggestion;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import static org.junit.Assert.assertNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.AddAccountCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.DeleteAccountCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.EditAccountCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.FindAccountCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.ListAccountsCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.TimelineCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.suggestions.Suggestion;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.suggestions.WrongCommandSuggestion;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "public class WrongCommandSuggestionTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private Suggestion wrongCommandSuggestion \u003d new WrongCommandSuggestion();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private ArrayList\u003cString\u003e outputCommandList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        outputCommandList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public void getSuggestion_noSuggestions() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        // \"abcDEFGH\" input is not similar to any command"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        assertNull(wrongCommandSuggestion.getSuggestions(\"abcDEFGH\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public void getSuggestion_oneSuggestion() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        // \"histary\" input is similar to history command and has only one suggestion available"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        outputCommandList.add(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        assertEquals(outputCommandList, wrongCommandSuggestion.getSuggestions(\"histary\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public void getSuggestion_multipleSuggestions() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        outputCommandList.add(RedoCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        outputCommandList.add(UndoCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        assertEquals(outputCommandList, wrongCommandSuggestion.getSuggestions(\"wido\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public void getSuggestion_multipleSuggestions2() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        outputCommandList.add(EditCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        outputCommandList.add(ExitCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        assertEquals(outputCommandList, wrongCommandSuggestion.getSuggestions(\"ecot\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public void getSuggestion_multipleSuggestions3() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        outputCommandList.add(ExportCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        outputCommandList.add(ImportCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        assertEquals(outputCommandList, wrongCommandSuggestion.getSuggestions(\"aaport\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public void getSuggestion_checkOccClearSuggestion() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        outputCommandList.add(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        assertEquals(outputCommandList, wrongCommandSuggestion.getSuggestions(\"raelc\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public void getSuggestion_checkOccListSuggestion() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        outputCommandList.add(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        assertEquals(outputCommandList, wrongCommandSuggestion.getSuggestions(\"tsil\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public void getSuggestion_checkOccTimelineSuggestion() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        outputCommandList.add(TimelineCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        assertEquals(outputCommandList, wrongCommandSuggestion.getSuggestions(\"tiimelne\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public void getSuggestion_checkOccFindAccSuggestion() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        outputCommandList.add(FindAccountCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        assertEquals(outputCommandList, wrongCommandSuggestion.getSuggestions(\"fdniountAcc\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public void getSuggestion_checkOccListAccSuggestion() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        outputCommandList.add(ListAccountsCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        assertEquals(outputCommandList, wrongCommandSuggestion.getSuggestions(\"listountsAcc\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public void getSuggestion_checkOccAddAccSuggestion() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        outputCommandList.add(AddAccountCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        assertEquals(outputCommandList, wrongCommandSuggestion.getSuggestions(\"ddaountAcc\"));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public void getSuggestion_checkOccDeleteAccSuggestion() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        outputCommandList.add(DeleteAccountCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        assertEquals(outputCommandList, wrongCommandSuggestion.getSuggestions(\"teledeountAcc\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public void getSuggestion_checkOccEditAccSuggestion() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        outputCommandList.add(EditAccountCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        assertEquals(outputCommandList, wrongCommandSuggestion.getSuggestions(\"etidountAcc\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zeyang-Li": 119
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ENDDATE_CS2101;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.CS2100;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.CS2110;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.TaskContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.testutil.TaskBookBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertEquals(new TaskBook(), new TaskBook(modelManager.getTaskBook()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertEquals(null, modelManager.getSelectedTask());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        userPrefs.setTaskBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        userPrefs.setTaskBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void setTaskBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        modelManager.setTaskBookFilePath(null);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void setTaskBookFilePath_validPath_setsTaskBookFilePath() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        modelManager.setTaskBookFilePath(path);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertEquals(path, modelManager.getTaskBookFilePath());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void hasTask_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        modelManager.hasTask(null);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void hasTask_taskNotInTaskBook_returnsFalse() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertFalse(modelManager.hasTask(CS2110));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void hasTask_taskInTaskBook_returnsTrue() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        modelManager.addTask(CS2110);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertTrue(modelManager.hasTask(CS2110));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void deleteTask_taskIsSelectedAndFirstTaskInFilteredTaskList_selectionCleared() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        modelManager.addTask(CS2110);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        modelManager.setSelectedTask(CS2110);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        modelManager.deleteTask(CS2110);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertEquals(null, modelManager.getSelectedTask());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void deleteTask_taskIsSelectedAndSecondTaskInFilteredTaskList_firstTaskSelected() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        modelManager.addTask(CS2110);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        modelManager.addTask(CS2100);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertEquals(Arrays.asList(CS2110, CS2100), modelManager.getFilteredTaskList());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        modelManager.setSelectedTask(CS2100);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        modelManager.deleteTask(CS2100);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertEquals(CS2110, modelManager.getSelectedTask());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void setTask_taskIsSelected_selectedTaskUpdated() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        modelManager.addTask(CS2110);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        modelManager.setSelectedTask(CS2110);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Task updatedCS2110 \u003d new TaskBuilder(CS2110).withEndDate(VALID_ENDDATE_CS2101).build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        modelManager.setTask(CS2110, updatedCS2110);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertEquals(updatedCS2110, modelManager.getSelectedTask());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void getFilteredTaskList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        modelManager.getFilteredTaskList().remove(0);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void setSelectedTask_taskNotInFilteredTaskList_throwsTaskNotFoundException() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        thrown.expect(TaskNotFoundException.class);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        modelManager.setSelectedTask(CS2110);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void setSelectedTask_taskInFilteredTaskList_setsSelectedTask() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        modelManager.addTask(CS2110);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertEquals(Collections.singletonList(CS2110), modelManager.getFilteredTaskList());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        modelManager.setSelectedTask(CS2110);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertEquals(CS2110, modelManager.getSelectedTask());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        TaskBook taskBook \u003d new TaskBookBuilder().withTask(CS2110).withTask(CS2100).build();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        TaskBook differentTaskBook \u003d new TaskBook();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        AccountList accountList \u003d new AccountList();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        modelManager \u003d new ModelManager(taskBook, userPrefs, accountList);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(taskBook, userPrefs, accountList);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        // different taskBook -\u003e returns false"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentTaskBook, userPrefs, accountList)));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String[] keywords \u003d CS2110.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        modelManager.updateFilteredTaskList(new TaskContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(taskBook, userPrefs, accountList)));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        modelManager.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        differentUserPrefs.setTaskBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(taskBook, differentUserPrefs, accountList)));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 66,
      "-": 122
    }
  },
  {
    "path": "src/test/java/seedu/address/model/TaskBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ENDDATE_CS2101;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_CS2101;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.CS2110;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import javafx.beans.property.SimpleIntegerProperty;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.day.Day;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class TaskBookTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final TaskBook taskBook \u003d new TaskBook();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertEquals(Collections.emptyList(), taskBook.getTaskList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        taskBook.resetData(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void resetData_withValidReadOnlyTaskBook_replacesData() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        TaskBook newData \u003d getTypicalTaskBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        taskBook.resetData(newData);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertEquals(newData, taskBook);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void resetData_withDuplicateTasks_throwsDuplicateTaskException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        // Two tasks with the same identity fields"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Task editedCS2110 \u003d new TaskBuilder(CS2110).withEndDate(VALID_ENDDATE_CS2101).withTags(VALID_TAG_CS2101)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        List\u003cTask\u003e newTasks \u003d Arrays.asList(CS2110, editedCS2110);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        TaskBookStub newData \u003d new TaskBookStub(newTasks);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        thrown.expect(DuplicateTaskException.class);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        taskBook.resetData(newData);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void hasTask_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        taskBook.hasTask(null);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void hasTask_taskNotInTaskBook_returnsFalse() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertFalse(taskBook.hasTask(CS2110));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void hasTask_taskInTaskBook_returnsTrue() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        taskBook.addTask(CS2110);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertTrue(taskBook.hasTask(CS2110));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void hasTask_taskWithSameIdentityFieldsInTaskBook_returnsTrue() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        taskBook.addTask(CS2110);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Task editedCS2110 \u003d new TaskBuilder(CS2110).withEndDate(VALID_ENDDATE_CS2101).withTags(VALID_TAG_CS2101)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertTrue(taskBook.hasTask(editedCS2110));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void getTaskList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        taskBook.getTaskList().remove(0);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void addListener_withInvalidationListener_listenerAdded() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        SimpleIntegerProperty counter \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter.set(counter.get() + 1);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        taskBook.addListener(listener);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        taskBook.addTask(CS2110);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertEquals(1, counter.get());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void removeListener_withInvalidationListener_listenerRemoved() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        SimpleIntegerProperty counter \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter.set(counter.get() + 1);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        taskBook.addListener(listener);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        taskBook.removeListener(listener);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        taskBook.addTask(CS2110);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertEquals(0, counter.get());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * A stub ReadOnlyTaskBook whose tasks list can violate interface constraints."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static class TaskBookStub implements ReadOnlyTaskBook {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        private final ObservableList\u003cTask\u003e tasks \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        TaskBookStub(Collection\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            this.tasks.setAll(tasks);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        public ObservableList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            return tasks;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        public ObservableList\u003cDay\u003e getDayList() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 147
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e userPrefs.setTaskBookFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 1,
      "-": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/model/VersionedTaskBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.CS2100;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.CS2110;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.CS2113;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.testutil.TaskBookBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class VersionedTaskBookTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final ReadOnlyTaskBook taskBookWithCS2110 \u003d new TaskBookBuilder().withTask(CS2110).build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final ReadOnlyTaskBook taskBookWithCS2100 \u003d new TaskBookBuilder().withTask(CS2100).build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final ReadOnlyTaskBook taskBookWithCS2113 \u003d new TaskBookBuilder().withTask(CS2113).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final ReadOnlyTaskBook emptyTaskBook \u003d new TaskBookBuilder().build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void commit_singleTaskBook_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        VersionedTaskBook versionedTaskBook \u003d prepareTaskBookList(emptyTaskBook);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        versionedTaskBook.commit();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertTaskBookListStatus(versionedTaskBook,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                Collections.singletonList(emptyTaskBook),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                emptyTaskBook,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void commit_multipleTaskBookPointerAtEndOfStateList_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        VersionedTaskBook versionedTaskBook \u003d prepareTaskBookList("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                emptyTaskBook, taskBookWithCS2110, taskBookWithCS2100);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        versionedTaskBook.commit();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertTaskBookListStatus(versionedTaskBook,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                Arrays.asList(emptyTaskBook, taskBookWithCS2110, taskBookWithCS2100),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                taskBookWithCS2100,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void commit_multipleTaskBookPointerNotAtEndOfStateList_statesAfterPointerRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        VersionedTaskBook versionedTaskBook \u003d prepareTaskBookList("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                emptyTaskBook, taskBookWithCS2110, taskBookWithCS2100);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedTaskBook, 2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        versionedTaskBook.commit();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertTaskBookListStatus(versionedTaskBook,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                Collections.singletonList(emptyTaskBook),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                emptyTaskBook,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void canUndo_multipleTaskBookPointerAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        VersionedTaskBook versionedTaskBook \u003d prepareTaskBookList("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                emptyTaskBook, taskBookWithCS2110, taskBookWithCS2100);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertTrue(versionedTaskBook.canUndo());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void canUndo_multipleTaskBookPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        VersionedTaskBook versionedTaskBook \u003d prepareTaskBookList("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                emptyTaskBook, taskBookWithCS2110, taskBookWithCS2100);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedTaskBook, 1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertTrue(versionedTaskBook.canUndo());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void canUndo_singleTaskBook_returnsFalse() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        VersionedTaskBook versionedTaskBook \u003d prepareTaskBookList(emptyTaskBook);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertFalse(versionedTaskBook.canUndo());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void canUndo_multipleTaskBookPointerAtStartOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        VersionedTaskBook versionedTaskBook \u003d prepareTaskBookList("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                emptyTaskBook, taskBookWithCS2110, taskBookWithCS2100);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedTaskBook, 2);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertFalse(versionedTaskBook.canUndo());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void canRedo_multipleTaskBookPointerNotAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        VersionedTaskBook versionedTaskBook \u003d prepareTaskBookList("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                emptyTaskBook, taskBookWithCS2110, taskBookWithCS2100);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedTaskBook, 1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertTrue(versionedTaskBook.canRedo());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void canRedo_multipleTaskBookPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        VersionedTaskBook versionedTaskBook \u003d prepareTaskBookList("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                emptyTaskBook, taskBookWithCS2110, taskBookWithCS2100);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedTaskBook, 2);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertTrue(versionedTaskBook.canRedo());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void canRedo_singleTaskBook_returnsFalse() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        VersionedTaskBook versionedTaskBook \u003d prepareTaskBookList(emptyTaskBook);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertFalse(versionedTaskBook.canRedo());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void canRedo_multipleTaskBookPointerAtEndOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        VersionedTaskBook versionedTaskBook \u003d prepareTaskBookList("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                emptyTaskBook, taskBookWithCS2110, taskBookWithCS2100);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertFalse(versionedTaskBook.canRedo());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void undo_multipleTaskBookPointerAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        VersionedTaskBook versionedTaskBook \u003d prepareTaskBookList("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                emptyTaskBook, taskBookWithCS2110, taskBookWithCS2100);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        versionedTaskBook.undo();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertTaskBookListStatus(versionedTaskBook,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                Collections.singletonList(emptyTaskBook),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                taskBookWithCS2110,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                Collections.singletonList(taskBookWithCS2100));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void undo_multipleTaskBookPointerNotAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        VersionedTaskBook versionedTaskBook \u003d prepareTaskBookList("
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                emptyTaskBook, taskBookWithCS2110, taskBookWithCS2100);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedTaskBook, 1);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        versionedTaskBook.undo();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertTaskBookListStatus(versionedTaskBook,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                emptyTaskBook,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                Arrays.asList(taskBookWithCS2110, taskBookWithCS2100));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void undo_singleAddressBook_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        VersionedTaskBook versionedTaskBook \u003d prepareTaskBookList(emptyTaskBook);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertThrows(VersionedTaskBook.NoUndoableStateException.class, versionedTaskBook::undo);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void undo_multipleTaskBookPointerAtStartOfStateList_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        VersionedTaskBook versionedTaskBook \u003d prepareTaskBookList("
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                emptyTaskBook, taskBookWithCS2110, taskBookWithCS2100);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedTaskBook, 2);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertThrows(VersionedTaskBook.NoUndoableStateException.class, versionedTaskBook::undo);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void redo_multipleTaskBookPointerNotAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        VersionedTaskBook versionedTaskBook \u003d prepareTaskBookList("
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                emptyTaskBook, taskBookWithCS2110, taskBookWithCS2100);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedTaskBook, 1);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        versionedTaskBook.redo();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertTaskBookListStatus(versionedTaskBook,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                Arrays.asList(emptyTaskBook, taskBookWithCS2110),"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                taskBookWithCS2100,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void redo_multipleTaskBookPointerAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        VersionedTaskBook versionedTaskBook \u003d prepareTaskBookList("
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                emptyTaskBook, taskBookWithCS2110, taskBookWithCS2100);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedTaskBook, 2);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        versionedTaskBook.redo();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertTaskBookListStatus(versionedTaskBook,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                Collections.singletonList(emptyTaskBook),"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                taskBookWithCS2110,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                Collections.singletonList(taskBookWithCS2100));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void redo_singleAddressBook_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        VersionedTaskBook versionedAddressBook \u003d prepareTaskBookList(emptyTaskBook);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertThrows(VersionedTaskBook.NoRedoableStateException.class, versionedAddressBook::redo);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void redo_multipleTaskBookPointerAtEndOfStateList_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        VersionedTaskBook versionedTaskBook \u003d prepareTaskBookList("
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                emptyTaskBook, taskBookWithCS2110, taskBookWithCS2100);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertThrows(VersionedTaskBook.NoRedoableStateException.class, versionedTaskBook::redo);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        VersionedTaskBook versionedTaskBook \u003d prepareTaskBookList(taskBookWithCS2110, taskBookWithCS2100);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        VersionedTaskBook copy \u003d prepareTaskBookList(taskBookWithCS2110, taskBookWithCS2100);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertTrue(versionedTaskBook.equals(copy));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertTrue(versionedTaskBook.equals(versionedTaskBook));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertFalse(versionedTaskBook.equals(null));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertFalse(versionedTaskBook.equals(1));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        // different state list -\u003e returns false"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        VersionedTaskBook differentTaskBookList \u003d prepareTaskBookList(taskBookWithCS2100, taskBookWithCS2113);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertFalse(versionedTaskBook.equals(differentTaskBookList));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        // different current pointer index -\u003e returns false"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        VersionedTaskBook differentCurrentStatePointer \u003d prepareTaskBookList("
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                taskBookWithCS2110, taskBookWithCS2100);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedTaskBook, 1);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertFalse(versionedTaskBook.equals(differentCurrentStatePointer));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Asserts that {@code versionedTaskBook} is currently pointing at {@code expectedCurrentState},"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * states before {@code versionedTaskBook#currentStatePointer} is equal to {@code expectedStatesBeforePointer},"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * and states after {@code versionedTaskBook#currentStatePointer} is equal to {@code expectedStatesAfterPointer}."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private void assertTaskBookListStatus(VersionedTaskBook versionedTaskBook,"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                                             List\u003cReadOnlyTaskBook\u003e expectedStatesBeforePointer,"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                                             ReadOnlyTaskBook expectedCurrentState,"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                                             List\u003cReadOnlyTaskBook\u003e expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        // check state currently pointing at is correct"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertEquals(new TaskBook(versionedTaskBook), expectedCurrentState);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        // shift pointer to start of state list"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        while (versionedTaskBook.canUndo()) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            versionedTaskBook.undo();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        // check states before pointer are correct"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        for (ReadOnlyTaskBook readOnlyTaskBook : expectedStatesBeforePointer) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            assertEquals(readOnlyTaskBook, new TaskBook(versionedTaskBook));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            versionedTaskBook.redo();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        // check states after pointer are correct"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        for (ReadOnlyTaskBook expectedTaskBook : expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            versionedTaskBook.redo();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            assertEquals(expectedTaskBook, new TaskBook(versionedTaskBook));"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        // check that there are no more states after pointer"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertFalse(versionedTaskBook.canRedo());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        // revert pointer to original position"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        expectedStatesAfterPointer.forEach(unused -\u003e versionedTaskBook.undo());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Creates and returns a {@code VersionedTaskBook} with the {@code taskBookStates} added into it, and the"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * {@code VersionedTaskBook#currentStatePointer} at the end of list."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private VersionedTaskBook prepareTaskBookList(ReadOnlyTaskBook... taskBookStates) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertFalse(taskBookStates.length \u003d\u003d 0);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        VersionedTaskBook versionedTaskBook \u003d new VersionedTaskBook(taskBookStates[0]);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        for (int i \u003d 1; i \u003c taskBookStates.length; i++) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            versionedTaskBook.resetData(taskBookStates[i]);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            versionedTaskBook.commit();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return versionedTaskBook;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Shifts the {@code versionedTaskBook#currentStatePointer} by {@code count} to the left of its list."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private void shiftCurrentStatePointerLeftwards(VersionedTaskBook versionedTaskBook, int count) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            versionedTaskBook.undo();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 298
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedTaskTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.storage.JsonAdaptedTask.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.CS2100;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Categories;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.EndDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.EndTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.StartDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.StartTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class JsonAdaptedTaskTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static final String INVALID_NAME \u003d \" \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static final String INVALID_STARTDATE \u003d \"11.11.11\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static final String INVALID_STARTTIME \u003d \"11:11\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static final String INVALID_ENDDATE \u003d \"22.22.22\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static final String INVALID_ENDTIME \u003d \"22:22\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static final String INVALID_DESCRIPTION \u003d \" \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static final String INVALID_CATEGORIES \u003d \"b\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static final String VALID_NAME \u003d CS2100.getName().toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static final String VALID_STARTDATE \u003d CS2100.getStartDate().toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static final String VALID_STARTTIME \u003d CS2100.getStartTime().toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static final String VALID_ENDDATE \u003d CS2100.getEndDate().toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static final String VALID_ENDTIME \u003d CS2100.getEndTime().toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d CS2100.getDescription().toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static final String VALID_CATEGORIES \u003d CS2100.getCategories().toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d CS2100.getTags().stream()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void toModelType_validTaskDetails_returnsTask() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        JsonAdaptedTask task \u003d new JsonAdaptedTask(CS2100);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertEquals(CS2100, task.toModelType());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        JsonAdaptedTask task \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                new JsonAdaptedTask(INVALID_NAME, VALID_STARTDATE, VALID_STARTTIME, VALID_ENDDATE, VALID_ENDTIME,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                        VALID_DESCRIPTION, VALID_CATEGORIES, VALID_TAGS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        JsonAdaptedTask task \u003d new JsonAdaptedTask(null, VALID_STARTDATE, VALID_STARTTIME, VALID_ENDDATE,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                VALID_ENDTIME, VALID_DESCRIPTION, VALID_CATEGORIES, VALID_TAGS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void toModelType_invalidStartDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        JsonAdaptedTask task \u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                new JsonAdaptedTask(VALID_NAME, INVALID_STARTDATE, VALID_STARTTIME, VALID_ENDDATE, VALID_ENDTIME,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                        VALID_DESCRIPTION, VALID_CATEGORIES, VALID_TAGS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String expectedMessage \u003d StartDate.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void toModelType_nullStartDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        JsonAdaptedTask task \u003d new JsonAdaptedTask(VALID_NAME, null, VALID_STARTTIME, VALID_ENDDATE, VALID_ENDTIME,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                VALID_DESCRIPTION, VALID_CATEGORIES, VALID_TAGS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, StartDate.class.getSimpleName());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void toModelType_invalidStartTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        JsonAdaptedTask task \u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                new JsonAdaptedTask(VALID_NAME, VALID_STARTDATE, INVALID_STARTTIME, VALID_ENDDATE, VALID_ENDTIME,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                        VALID_DESCRIPTION, VALID_CATEGORIES, VALID_TAGS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String expectedMessage \u003d StartTime.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void toModelType_nullStartTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        JsonAdaptedTask task \u003d new JsonAdaptedTask(VALID_NAME, VALID_STARTDATE, null, VALID_ENDDATE, VALID_ENDTIME,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                VALID_DESCRIPTION, VALID_CATEGORIES, VALID_TAGS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, StartTime.class.getSimpleName());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void toModelType_invalidEndDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        JsonAdaptedTask task \u003d"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                new JsonAdaptedTask(VALID_NAME, VALID_STARTDATE, VALID_STARTTIME, INVALID_ENDDATE, VALID_ENDTIME,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                        VALID_DESCRIPTION, VALID_CATEGORIES, VALID_TAGS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String expectedMessage \u003d EndDate.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void toModelType_nullEndDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        JsonAdaptedTask task \u003d new JsonAdaptedTask(VALID_NAME, VALID_STARTDATE, VALID_STARTTIME, null, VALID_ENDTIME,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                VALID_DESCRIPTION, VALID_CATEGORIES, VALID_TAGS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, EndDate.class.getSimpleName());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void toModelType_invalidEndTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        JsonAdaptedTask task \u003d"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                new JsonAdaptedTask(VALID_NAME, VALID_STARTDATE, VALID_STARTTIME, VALID_ENDDATE, INVALID_ENDTIME,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                        VALID_DESCRIPTION, VALID_CATEGORIES, VALID_TAGS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String expectedMessage \u003d EndTime.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void toModelType_nullEndTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        JsonAdaptedTask task \u003d new JsonAdaptedTask(VALID_NAME, VALID_STARTDATE, VALID_STARTTIME, VALID_ENDDATE, null,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                VALID_DESCRIPTION, VALID_CATEGORIES, VALID_TAGS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, EndTime.class.getSimpleName());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void toModelType_invalidDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        JsonAdaptedTask task \u003d"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                new JsonAdaptedTask(VALID_NAME, VALID_STARTDATE, VALID_STARTTIME, VALID_ENDDATE, VALID_ENDTIME,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                        INVALID_DESCRIPTION, VALID_CATEGORIES, VALID_TAGS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String expectedMessage \u003d Description.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void toModelType_nullDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        JsonAdaptedTask task \u003d new JsonAdaptedTask(VALID_NAME, VALID_STARTDATE, VALID_STARTTIME, VALID_ENDDATE,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                VALID_ENDTIME, null, VALID_CATEGORIES, VALID_TAGS);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void toModelType_invalidCategories_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        JsonAdaptedTask task \u003d"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                new JsonAdaptedTask(VALID_NAME, VALID_STARTDATE, VALID_STARTTIME, VALID_ENDDATE, VALID_ENDTIME,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                        VALID_DESCRIPTION, INVALID_CATEGORIES, VALID_TAGS);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String expectedMessage \u003d Categories.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void toModelType_nullCategories_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        JsonAdaptedTask task \u003d new JsonAdaptedTask(VALID_NAME, VALID_STARTDATE, VALID_STARTTIME, VALID_ENDDATE,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                VALID_ENDTIME, VALID_DESCRIPTION, null, VALID_TAGS);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Categories.class.getSimpleName());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        JsonAdaptedTask task \u003d"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                new JsonAdaptedTask(VALID_NAME, VALID_STARTDATE, VALID_STARTTIME, VALID_ENDDATE, VALID_ENDTIME,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                        VALID_DESCRIPTION, VALID_CATEGORIES, invalidTags);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, task::toModelType);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 179
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableAddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonSerializableAddressBookTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableTaskBookTest\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static final Path TYPICAL_TASKS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalTasksTaskBook.json\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static final Path INVALID_TASK_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidTaskTaskBook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static final Path DUPLICATE_TASK_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateTaskTaskBook.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void toModelType_invalidTaskFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        JsonSerializableTaskBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_TASK_FILE,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                JsonSerializableTaskBook.class).get();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void toModelType_duplicateTasks_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        JsonSerializableTaskBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_TASK_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                JsonSerializableTaskBook.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        thrown.expectMessage(JsonSerializableTaskBook.MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 11,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonTaskBookStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.CS2110;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.ENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.HOME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.ReadOnlyTaskBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.TaskBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class JsonTaskBookStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonTaskBookStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void readTaskBook_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        readTaskBook(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private java.util.Optional\u003cReadOnlyTaskBook\u003e readTaskBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return new JsonTaskBookStorage(Paths.get(filePath)).readTaskBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertFalse(readTaskBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        readTaskBook(\"notJsonFormatTaskBook.json\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        // IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        // That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void readTaskBook_invalidTaskTaskBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        readTaskBook(\"invalidTaskTaskBook.json\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void readTaskBook_invalidAndValidTaskTaskBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        readTaskBook(\"invalidAndValidTaskTaskBook.json\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void readAndSaveTaskBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        TaskBook original \u003d getTypicalTaskBook();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        JsonTaskBookStorage jsonTaskBookStorage \u003d new JsonTaskBookStorage(filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        jsonTaskBookStorage.saveTaskBook(original, filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        ReadOnlyTaskBook readBack \u003d jsonTaskBookStorage.readTaskBook(filePath).get();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertEquals(original, new TaskBook(readBack));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        original.addTask(HOME);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        original.removeTask(CS2110);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        jsonTaskBookStorage.saveTaskBook(original, filePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        readBack \u003d jsonTaskBookStorage.readTaskBook(filePath).get();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertEquals(original, new TaskBook(readBack));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        original.addTask(ENT);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        jsonTaskBookStorage.saveTaskBook(original); // file path not specified"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        readBack \u003d jsonTaskBookStorage.readTaskBook().get(); // file path not specified"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertEquals(original, new TaskBook(readBack));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void saveTaskBook_nullTaskBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        saveTaskBook(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private void saveTaskBook(ReadOnlyTaskBook taskBook, String filePath) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            new JsonTaskBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                    .saveTaskBook(taskBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void saveTaskBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        saveTaskBook(new TaskBook(), null);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 124
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() throws DataConversionException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(\"NotJsonFormatUserPrefs.json\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        userPrefs.setTaskBookFilePath(Paths.get(\"data\\\\taskbook.json\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(new UserPrefs(), null);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.getRoot().toPath().resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 1,
      "-": 134
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.ReadOnlyTaskBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.TaskBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        JsonTaskBookStorage taskBookStorage \u003d new JsonTaskBookStorage(getTempFilePath(\"tb\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        JsonAccountListStorage accountListStorage \u003d new JsonAccountListStorage(getTempFilePath(\"al\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        storageManager \u003d new StorageManager(taskBookStorage, userPrefsStorage, accountListStorage);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void taskBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "         * {@link JsonTaskBookStorage} class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        TaskBook original \u003d getTypicalTaskBook();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        storageManager.saveTaskBook(original);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        ReadOnlyTaskBook retrieved \u003d storageManager.readTaskBook().get();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertEquals(original, new TaskBook(retrieved));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void getTaskBookFilePath() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertNotNull(storageManager.getTaskBookFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 14,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditTaskDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Categories;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.EndDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.EndTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.StartDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.StartTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * A utility class to help with building EditTaskDescriptor objects."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class EditTaskDescriptorBuilder {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private EditTaskDescriptor descriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public EditTaskDescriptorBuilder() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        descriptor \u003d new EditTaskDescriptor();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public EditTaskDescriptorBuilder(EditTaskDescriptor descriptor) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.descriptor \u003d new EditTaskDescriptor(descriptor);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns an {@code EditTaskDescriptor} with fields containing {@code task}\u0027s details"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public EditTaskDescriptorBuilder(Task task) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        descriptor \u003d new EditTaskDescriptor();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        descriptor.setName(task.getName());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        descriptor.setStartDate(task.getStartDate());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        descriptor.setStartTime(task.getStartTime());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        descriptor.setEndDate(task.getEndDate());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        descriptor.setEndTime(task.getEndTime());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        descriptor.setDescription(task.getDescription());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        descriptor.setCategories(task.getCategories());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        descriptor.setTags(task.getTags());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Sets the {@code Name} of the {@code EditTaskDescriptor} that we are building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public EditTaskDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Sets the {@code StartDate} of the {@code EditTaskDescriptor} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public EditTaskDescriptorBuilder withStartDate(String startDate) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        descriptor.setStartDate(new StartDate(startDate));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Sets the {@code StartTime} of the {@code EditTaskDescriptor} that we are building."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public EditTaskDescriptorBuilder withStartTime(String startTime) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        descriptor.setStartTime(new StartTime(startTime));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Sets the {@code EndDate} of the {@code EditTaskDescriptor} that we are building."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public EditTaskDescriptorBuilder withEndDate(String endDate) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        descriptor.setEndDate(new EndDate(endDate));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Sets the {@code EndTime} of the {@code EditTaskDescriptor} that we are building."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public EditTaskDescriptorBuilder withEndTime(String endTime) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        descriptor.setEndTime(new EndTime(endTime));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Sets the {@code Description} of the {@code EditTaskDescriptor} that we are building."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public EditTaskDescriptorBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        descriptor.setDescription(new Description(description));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Sets the {@code Categories} of the {@code EditTaskDescriptor} that we are building."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public EditTaskDescriptorBuilder withCategories(String categories) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        descriptor.setCategories(new Categories(categories));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditTaskDescriptor}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public EditTaskDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public EditTaskDescriptor build() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 117
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TaskBookBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.TaskBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * A utility class to help with building Taskbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " *     {@code TaskBook tb \u003d new TaskBookBuilder().withTask(\"Do CS2113T\", \"Finish CS2101\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class TaskBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private TaskBook taskBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public TaskBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        taskBook \u003d new TaskBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public TaskBookBuilder(TaskBook taskBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.taskBook \u003d taskBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Adds a new {@code Task} to the {@code TaskBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public TaskBookBuilder withTask(Task task) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        taskBook.addTask(task);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public TaskBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return taskBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TaskBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Categories;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.EndDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.EndTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.StartDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.StartTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * A utility class to help with building Task objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class TaskBuilder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Revise CS2113T\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String DEFAULT_STARTDATE \u003d \"14-04-19\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String DEFAULT_STARTTIME \u003d \"14.00\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String DEFAULT_ENDDATE \u003d \"14-04-19\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String DEFAULT_ENDTIME \u003d \"17.00\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Class diagram\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public static final String DEFAULT_CATEGORY \u003d \"c\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private StartDate startDate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private EndDate endDate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private StartTime startTime;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private EndTime endTime;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private Categories category;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public TaskBuilder() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        startDate \u003d new StartDate(DEFAULT_STARTDATE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        startTime \u003d new StartTime(DEFAULT_STARTTIME);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        endDate \u003d new EndDate(DEFAULT_ENDDATE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        endTime \u003d new EndTime(DEFAULT_ENDTIME);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        category \u003d new Categories(DEFAULT_CATEGORY);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public TaskBuilder(String name, String sd, String st, String ed, String et, String d, String c) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        this.startDate \u003d new StartDate(sd);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        this.startTime \u003d new StartTime(st);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        this.endDate \u003d new EndDate(ed);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        this.endTime \u003d new EndTime(et);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        this.description \u003d new Description(d);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        this.tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        this.category \u003d new Categories(c);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public TaskBuilder(Task taskToCopy) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        name \u003d taskToCopy.getName();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        startDate \u003d taskToCopy.getStartDate();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        startTime \u003d taskToCopy.getStartTime();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        endDate \u003d taskToCopy.getEndDate();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        endTime \u003d taskToCopy.getEndTime();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        description \u003d taskToCopy.getDescription();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(taskToCopy.getTags());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        category \u003d taskToCopy.getCategories();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Sets the {@code Name} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public TaskBuilder withName(String name) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public TaskBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     * Sets the {@code category} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public TaskBuilder withCategory(String category) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.category \u003d new Categories(category);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Sets the {@code StartDate} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public TaskBuilder withStartDate(String startDate) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.startDate \u003d new StartDate(startDate);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Sets the {@code StartTime} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public TaskBuilder withStartTime(String startTime) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.startTime \u003d new StartTime(startTime);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Sets the {@code EndDate} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public TaskBuilder withEndDate(String endDate) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.endDate \u003d new EndDate(endDate);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Sets the {@code EndTime} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public TaskBuilder withEndTime(String endTime) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.endTime \u003d new EndTime(endTime);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Sets the {@code Description} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public TaskBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public Task build() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return new Task(name, startDate, startTime, endDate, endTime, description, category, tags);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 126,
      "BrittonAlone": 7,
      "Zeyang-Li": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TaskUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENDDATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENDTIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTDATE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTTIME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * A utility class for Task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class TaskUtil {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns an add command string for adding the {@code task}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static String getAddCommand(Task task) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getTaskDetails(task);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns an login command string."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static String getLoginCommand(String command) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return command + \" \" + getLoginDetails();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns the part of command string for the given {@code task}\u0027s details."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static String getTaskDetails(Task task) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        sb.append(PREFIX_NAME + task.getName().fullName + \" \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        sb.append(PREFIX_STARTDATE + task.getStartDate().value + \" \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        sb.append(PREFIX_STARTTIME + task.getStartTime().value + \" \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        sb.append(PREFIX_ENDDATE + task.getEndDate().value + \" \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        sb.append(PREFIX_ENDTIME + task.getEndTime().value + \" \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        sb.append(PREFIX_DESCRIPTION + task.getDescription().value + \" \");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        sb.append(PREFIX_CATEGORY + task.getCategories().value + \" \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        task.getTags().stream().forEach("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        );"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns the part of command string for the given {@code task}\u0027s details."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static String getLoginDetails() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        sb.append(PREFIX_USERNAME + \"admin \");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        sb.append(PREFIX_PASSWORD + \"admin\");;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns the part of command string for the given {@code EditTaskDescriptor}\u0027s details."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static String getEditTaskDescriptorDetails(EditTaskDescriptor descriptor) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        descriptor.getStartDate().ifPresent(startDate -\u003e sb.append(PREFIX_STARTDATE)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .append(startDate.value).append(\" \"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        descriptor.getStartTime().ifPresent(startTime -\u003e sb.append(PREFIX_STARTTIME)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .append(startTime.value).append(\" \"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        descriptor.getEndDate().ifPresent(endDate -\u003e sb.append(PREFIX_ENDDATE)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .append(endDate.value).append(\" \"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        descriptor.getEndTime().ifPresent(endTime -\u003e sb.append(PREFIX_ENDTIME).append(endTime.value).append(\" \"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        descriptor.getDescription().ifPresent(description -\u003e sb.append(PREFIX_DESCRIPTION)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .append(description.value).append(\" \"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        descriptor.getCategories().ifPresent(categories -\u003e sb.append(PREFIX_CATEGORY).append(categories.value)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .append(\" \"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 96
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the middle index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return Index.fromOneBased(model.getFilteredTaskList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return Index.fromOneBased(model.getFilteredTaskList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the person in the {@code model}\u0027s person list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static Task getTask(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return model.getFilteredTaskList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 5,
      "-": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final Index INDEX_FIRST_TASK \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final Index INDEX_SECOND_TASK \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 2,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalTasks.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_CS2101;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_CS2113;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_CS2101;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_CS2113;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ENDDATE_CS2101;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ENDDATE_CS2113;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ENDTIME_CS2101;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ENDTIME_CS2113;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_CS2101;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_CS2113;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STARTDATE_CS2101;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STARTDATE_CS2113;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STARTTIME_CS2101;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STARTTIME_CS2113;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_CS2101;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_CS2113;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.TaskBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * A utility class containing a list of {@code Task} objects to be used in tests."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class TypicalTasks {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final Task CS2110 \u003d new TaskBuilder().withName(\"CS2110\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            .withStartDate(\"01-01-11\").withStartTime(\"01.00\").withEndDate(\"02-01-11\").withEndTime(\"02.00\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            .withDescription(\"Do sequence\").withCategory(\"a\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            .withTags(\"CS2110\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final Task SAMESTARTDATEWITHCS2110 \u003d new TaskBuilder().withName(\"sameStartDateWithCS2110\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            .withStartDate(\"01-01-11\").withStartTime(\"01.00\").withEndDate(\"02-01-11\").withEndTime(\"02.00\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            .withDescription(\"Do sequence\").withCategory(\"c\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            .withTags(\"sameStartDateWithCS2110\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final Task CS2100 \u003d new TaskBuilder().withName(\"cs2100\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            .withStartDate(\"03-03-03\").withStartTime(\"03.00\").withCategory(\"e\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            .withDescription(\"Do user\").withEndDate(\"04-03-04\").withEndTime(\"04.00\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            .withTags(\"CS2100\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final Task NEVERSTART \u003d new TaskBuilder().withName(\"neverStart\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            .withStartDate(\"01-01-99\").withStartTime(\"03.00\").withCategory(\"r\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            .withDescription(\"test clear command\").withEndDate(\"04-03-99\").withEndTime(\"04.00\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            .withTags(\"NeverEnd\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final Task NEVERSTART2 \u003d new TaskBuilder().withName(\"neverStart2\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            .withStartDate(\"01-01-60\").withStartTime(\"03.00\").withCategory(\"o\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            .withDescription(\"second test clear command\").withEndDate(\"04-03-60\").withEndTime(\"04.00\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            .withTags(\"NeverEnd\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final Task HOME \u003d new TaskBuilder().withName(\"Do housework\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            .withStartDate(\"11-11-11\").withStartTime(\"10.00\").withEndDate(\"12-11-11\").withEndTime(\"11.00\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            .withDescription(\"Throw rubbish\").withCategory(\"r\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final Task ENT \u003d new TaskBuilder().withName(\"Watch TV\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            .withStartDate(\"11-11-11\").withStartTime(\"12.00\").withEndDate(\"12-11-11\").withEndTime(\"13.00\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            .withDescription(\"Discovery\").withCategory(\"e\").build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    // Manually added - Task\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final Task CS2113 \u003d new TaskBuilder().withName(VALID_NAME_CS2113)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            .withStartDate(VALID_STARTDATE_CS2113).withStartTime(VALID_STARTTIME_CS2113)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            .withEndDate(VALID_ENDDATE_CS2113).withEndTime(VALID_ENDTIME_CS2113)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            .withDescription(VALID_DESCRIPTION_CS2113).withCategory(VALID_CATEGORY_CS2113)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            .withTags(VALID_TAG_CS2113).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final Task CS2101 \u003d new TaskBuilder().withName(VALID_NAME_CS2101)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            .withStartDate(VALID_STARTDATE_CS2101).withStartTime(VALID_STARTTIME_CS2101)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            .withEndDate(VALID_ENDDATE_CS2101).withEndTime(VALID_ENDTIME_CS2101)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            .withDescription(VALID_DESCRIPTION_CS2101).withCategory(VALID_CATEGORY_CS2101)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            .withTags(VALID_TAG_CS2101).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private TypicalTasks() {} // prevents instantiation"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns an {@code TaskBook} with all the typical tasks."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static TaskBook getTypicalTaskBook() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        TaskBook tb \u003d new TaskBook();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        for (Task task : getTypicalTasks()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            tb.addTask(task);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return tb;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static List\u003cTask\u003e getTypicalTasks() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(CS2110, SAMESTARTDATEWITHCS2110, CS2100, NEVERSTART, NEVERSTART2));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 75,
      "Zeyang-Li": 15
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/CommandBoxTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBoxTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_SUCCEEDS \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ArrayList\u003cString\u003e history \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandBoxHandle commandBoxHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(commandText -\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandText.equals(COMMAND_THAT_SUCCEEDS)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                return new CommandResult(\"Command successful\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(\"Command failed\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }, history);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(commandBox);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithSuccessfulCommand() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithFailedCommand() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify that style is changed correctly even after multiple consecutive failed commands"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_handleKeyPress() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.ESCAPE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.A);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithUp() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands (latest command is failure)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, thirdCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithDown() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that fails, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the text remains \u003cbr\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForFailedCommand() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that succeeds, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the text is cleared \u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForSuccessfulCommand() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(keycode);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommand, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 1,
      "-": 159
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/StatusBarFooterTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.CS2110;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.AfterClass;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.TaskBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooterTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path STUB_SAVE_LOCATION \u003d Paths.get(\"Stub\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path RELATIVE_PATH \u003d Paths.get(\".\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock originalClock \u003d StatusBarFooter.getClock();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBarFooterHandle statusBarFooterHandle;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final TaskBook taskBook \u003d new TaskBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setUpBeforeClass() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // inject fixed clock"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(injectedClock);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @AfterClass"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void tearDownAfterClass() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // restore original clock"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(originalClock);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(STUB_SAVE_LOCATION, taskBook);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(statusBarFooter);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // initial state"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(), SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        // after task book is updated"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        guiRobot.interact(() -\u003e taskBook.addTask(CS2110));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(SYNC_STATUS_UPDATED, new Date(injectedClock.millis()).toString()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the save location matches that of {@code expectedSaveLocation}, and the"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * sync status matches that of {@code expectedSyncStatus}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertStatusBarContent(String expectedSaveLocation, String expectedSyncStatus) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSaveLocation, statusBarFooterHandle.getSaveLocation());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, statusBarFooterHandle.getSyncStatus());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 6,
      "-": 69
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/TaskCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysTask;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import guitests.guihandles.TaskCardHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class TaskCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        // no tags"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Task taskWithNoTags \u003d new TaskBuilder().withTags(new String[0]).build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        TaskCard taskCard \u003d new TaskCard(taskWithNoTags, 1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        uiPartRule.setUiPart(taskCard);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertCardDisplay(taskCard, taskWithNoTags, 1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        // with tags"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Task taskWithTags \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        taskCard \u003d new TaskCard(taskWithTags, 2);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        uiPartRule.setUiPart(taskCard);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertCardDisplay(taskCard, taskWithTags, 2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Task task \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        TaskCard taskCard \u003d new TaskCard(task, 0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        // same task, same index -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        TaskCard copy \u003d new TaskCard(task, 0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertTrue(taskCard.equals(copy));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertTrue(taskCard.equals(taskCard));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertFalse(taskCard.equals(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertFalse(taskCard.equals(0));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        // different task, same index -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Task differentTask \u003d new TaskBuilder().withName(\"differentName\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertFalse(taskCard.equals(new TaskCard(differentTask, 0)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        // same task, different index -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertFalse(taskCard.equals(new TaskCard(task, 1)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Asserts that {@code taskCard} displays the details of {@code expectedTask} correctly and matches"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private void assertCardDisplay(TaskCard taskCard, Task expectedTask, int expectedId) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        TaskCardHandle taskCardHandle \u003d new TaskCardHandle(taskCard.getRoot());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        // verify id is displayed correctly"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertEquals(Integer.toString(expectedId) + \". \", taskCardHandle.getId());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        // verify task details are displayed correctly"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertCardDisplaysTask(expectedTask, taskCardHandle);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/TaskListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTasks;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysTask;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import guitests.guihandles.TaskCardHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import guitests.guihandles.TaskListPanelHandle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Categories;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.EndDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.EndTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.StartDate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.StartTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class TaskListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static final ObservableList\u003cTask\u003e TYPICAL_TASKS \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            FXCollections.observableList(getTypicalTasks());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 2500;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final SimpleObjectProperty\u003cTask\u003e selectedTask \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private TaskListPanelHandle taskListPanelHandle;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        initUi(TYPICAL_TASKS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_TASKS.size(); i++) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            taskListPanelHandle.navigateToCard(TYPICAL_TASKS.get(i));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            Task expectedTask \u003d TYPICAL_TASKS.get(i);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            TaskCardHandle actualCard \u003d taskListPanelHandle.getTaskCardHandle(i);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            assertCardDisplaysTask(expectedTask, actualCard);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void selection_modelSelectedTaskChanged_selectionChanges() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        initUi(TYPICAL_TASKS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Task secondTask \u003d TYPICAL_TASKS.get(INDEX_SECOND_TASK.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        guiRobot.interact(() -\u003e selectedTask.set(secondTask));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        TaskCardHandle expectedTask \u003d taskListPanelHandle.getTaskCardHandle(INDEX_SECOND_TASK.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        TaskCardHandle selectedTask \u003d taskListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertCardEquals(expectedTask, selectedTask);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Verifies that creating and deleting large number of tasks in {@code TaskListPanel} requires lesser than"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void performanceTest() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        ObservableList\u003cTask\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            initUi(backingList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }, \"Creation and deletion of task cards exceeded time limit\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns a list of tasks containing {@code taskCount} tasks that is used to populate the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * {@code TaskListPanel}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private ObservableList\u003cTask\u003e createBackingList(int taskCount) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        ObservableList\u003cTask\u003e backingList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        for (int i \u003d 0; i \u003c taskCount; i++) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            Name name \u003d new Name(i + \"a\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            StartDate startDate \u003d new StartDate(\"11-11-11\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            StartTime startTime \u003d new StartTime(\"11.00\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            EndDate endDate \u003d new EndDate(\"12-11-11\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            EndTime endTime \u003d new EndTime(\"12.00\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            Description description \u003d new Description(\"AAAA\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            Categories categories \u003d new Categories(\"a\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            Task task \u003d new Task(name, startDate, startTime, endDate, endTime, description, categories,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                    Collections.emptySet());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            backingList.add(task);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return backingList;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Initializes {@code taskListPanelHandle} with a {@code TaskListPanel} backed by {@code backingList}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code TaskListPanel}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private void initUi(ObservableList\u003cTask\u003e backingList) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        TaskListPanel taskListPanel \u003d"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                new TaskListPanel(backingList, selectedTask, selectedTask::set);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        uiPartRule.setUiPart(taskListPanel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        taskListPanelHandle \u003d new TaskListPanelHandle(getChildNode(taskListPanel.getRoot(),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                TaskListPanelHandle.TASK_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 111
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/testutil/GuiTestAssert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import guitests.guihandles.TaskCardHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import guitests.guihandles.TaskListPanelHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiTestAssert {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static void assertCardEquals(TaskCardHandle expectedCard, TaskCardHandle actualCard) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getName(), actualCard.getName());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertEquals(expectedCard.getStartDate(), actualCard.getStartDate());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertEquals(expectedCard.getStartTime(), actualCard.getStartTime());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertEquals(expectedCard.getEndDate(), actualCard.getEndDate());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertEquals(expectedCard.getEndTime(), actualCard.getEndTime());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertEquals(expectedCard.getDescription(), actualCard.getDescription());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertEquals(expectedCard.getCategories(), actualCard.getCategories());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getTags(), actualCard.getTags());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static void assertCardDisplaysTask(Task expectedTask, TaskCardHandle actualCard) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertEquals(expectedTask.getName().fullName, actualCard.getName());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertEquals(expectedTask.getStartDate().value, actualCard.getStartDate());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertEquals(expectedTask.getStartTime().value, actualCard.getStartTime());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertEquals(expectedTask.getEndDate().value, actualCard.getEndDate());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertEquals(expectedTask.getEndTime().value, actualCard.getEndTime());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertEquals(expectedTask.getDescription().value, actualCard.getDescription());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertEquals(expectedTask.getCategories().fullName, actualCard.getCategories());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertEquals(expectedTask.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                actualCard.getTags());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Asserts that the list in {@code taskListPanelHandle} displays the details of {@code tasks} correctly and"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static void assertListMatching(TaskListPanelHandle taskListPanelHandle, Task... tasks) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.length; i++) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            taskListPanelHandle.navigateToCard(i);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            assertCardDisplaysTask(tasks[i], taskListPanelHandle.getTaskCardHandle(i));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Asserts that the list in {@code taskListPanelHandle} displays the details of {@code tasks} correctly and"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static void assertListMatching(TaskListPanelHandle taskListPanelHandle, List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertListMatching(taskListPanelHandle, tasks.toArray(new Task[0]));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Asserts the size of the list in {@code taskListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static void assertListSize(TaskListPanelHandle taskListPanelHandle, int size) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        int numberOfTask \u003d taskListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertEquals(size, numberOfTask);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 31,
      "-": 50
    }
  },
  {
    "path": "src/test/java/systemtests/AddCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CATEGORY_DESC_CS2101;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CATEGORY_DESC_CS2113;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_CS2101;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_CS2113;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ENDDATE_DESC_CS2101;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ENDDATE_DESC_CS2113;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ENDTIME_DESC_CS2101;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ENDTIME_DESC_CS2113;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_CATEGORY_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DESCRIPTION_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ENDDATE_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ENDTIME_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_STARTDATE_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_STARTTIME_DESC;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_CS2101;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_CS2113;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.STARTDATE_DESC_CS2101;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.STARTDATE_DESC_CS2113;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.STARTTIME_DESC_CS2101;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.STARTTIME_DESC_CS2113;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_CS2101;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_CS2113;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.CS2101;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.CS2113;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.logic.commands.LoginCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.logic.suggestions.WrongCommandSuggestion;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.account.Username;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Categories;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.EndDate;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.EndTime;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.StartDate;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.StartTime;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.testutil.TaskUtil;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class AddCommandSystemTest extends TaskBookSystemTest {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertCommandSuccess(\"login\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        /* Case: add a task without tags to a non-empty task book"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Task toAdd \u003d CS2113;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String command \u003d AddCommand.COMMAND_WORD + NAME_DESC_CS2113 + STARTDATE_DESC_CS2113"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                + STARTTIME_DESC_CS2113 + ENDDATE_DESC_CS2113 + ENDDATE_DESC_CS2113"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                + ENDTIME_DESC_CS2113"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                + DESCRIPTION_DESC_CS2113 + CATEGORY_DESC_CS2113 + TAG_DESC_CS2113;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        /* Case: undo adding CS2113 to the list -\u003e CS2113 deleted */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo adding Amy to the list -\u003e Amy added again */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        model.addTask(toAdd);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        /* Case: add to empty task book -\u003e added */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        deleteAllTasks();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertCommandSuccess(CS2113);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        /* Case: add a task with tags, command with parameters in random order -\u003e added */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        toAdd \u003d CS2101;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_CS2101 + STARTTIME_DESC_CS2101 + STARTDATE_DESC_CS2101"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                + NAME_DESC_CS2101 + ENDDATE_DESC_CS2101 + ENDTIME_DESC_CS2101 + DESCRIPTION_DESC_CS2101"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                + CATEGORY_DESC_CS2101;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        /* Case: add a duplicate task -\u003e rejected */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        command \u003d TaskUtil.getAddCommand(CS2101);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        /* Case: add a duplicate person except with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        command \u003d TaskUtil.getAddCommand(CS2101) + \" \" + PREFIX_TAG.getPrefix() + \"others\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        /* Case: missing name -\u003e rejected */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + STARTDATE_DESC_CS2113 + STARTTIME_DESC_CS2113 + ENDDATE_DESC_CS2113"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                + ENDTIME_DESC_CS2113 + DESCRIPTION_DESC_CS2113 + CATEGORY_DESC_CS2113 + TAG_DESC_CS2113;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        /* Case: missing startDate -\u003e rejected */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_CS2113 + STARTTIME_DESC_CS2113 + ENDDATE_DESC_CS2113"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                + ENDTIME_DESC_CS2113 + DESCRIPTION_DESC_CS2113 + CATEGORY_DESC_CS2113;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        /* Case: missing startTime -\u003e rejected */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_CS2113 + STARTDATE_DESC_CS2113 + ENDDATE_DESC_CS2113"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                + ENDTIME_DESC_CS2113 + DESCRIPTION_DESC_CS2113 + CATEGORY_DESC_CS2113;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        /* Case: missing endDate -\u003e rejected */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_CS2113 + STARTDATE_DESC_CS2113 + STARTTIME_DESC_CS2113"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                + ENDTIME_DESC_CS2113 + DESCRIPTION_DESC_CS2113 + CATEGORY_DESC_CS2113;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        /* Case: missing endTime -\u003e rejected */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_CS2113 + STARTDATE_DESC_CS2113 + STARTTIME_DESC_CS2113"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                + ENDDATE_DESC_CS2113 + DESCRIPTION_DESC_CS2113 + CATEGORY_DESC_CS2113;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        /* Case: missing description -\u003e rejected */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_CS2113 + STARTDATE_DESC_CS2113 + STARTTIME_DESC_CS2113"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                + ENDDATE_DESC_CS2113 + ENDTIME_DESC_CS2113 + CATEGORY_DESC_CS2113;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        /* Case: missing categories -\u003e rejected */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_CS2113 + STARTDATE_DESC_CS2113 + STARTTIME_DESC_CS2113"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                + ENDDATE_DESC_CS2113 + ENDTIME_DESC_CS2113 + DESCRIPTION_DESC_CS2113;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        /* Case: invalid command -\u003e rejected */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        command \u003d \"adds \" + TaskUtil.getTaskDetails(toAdd);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        List\u003cString\u003e listOfCommands \u003d new WrongCommandSuggestion().getSuggestions(\"adds\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String suggestionsToString \u003d StringUtil.join(listOfCommands, \", \");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND + \u0027\\n\u0027"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                + String.format(WrongCommandSuggestion.SUGGESTION_HEADER, suggestionsToString));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + STARTDATE_DESC_CS2113 + STARTTIME_DESC_CS2113"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                + ENDDATE_DESC_CS2113 + ENDTIME_DESC_CS2113 + DESCRIPTION_DESC_CS2113 + CATEGORY_DESC_CS2113;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        /* Case: invalid startDate -\u003e rejected */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_CS2113 + INVALID_STARTDATE_DESC + STARTTIME_DESC_CS2113"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                + ENDDATE_DESC_CS2113 + ENDTIME_DESC_CS2113 + DESCRIPTION_DESC_CS2113 + CATEGORY_DESC_CS2113;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertCommandFailure(command, StartDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        /* Case: invalid startTime -\u003e rejected */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_CS2113 + STARTDATE_DESC_CS2113 + INVALID_STARTTIME_DESC"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                + ENDDATE_DESC_CS2113 + ENDTIME_DESC_CS2113 + DESCRIPTION_DESC_CS2113 + CATEGORY_DESC_CS2113;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertCommandFailure(command, StartTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        /* Case: invalid endDate -\u003e rejected */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_CS2113 + STARTDATE_DESC_CS2113 + STARTTIME_DESC_CS2113"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                + INVALID_ENDDATE_DESC + ENDTIME_DESC_CS2113 + DESCRIPTION_DESC_CS2113 + CATEGORY_DESC_CS2113;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertCommandFailure(command, EndDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        /* Case: invalid endTime -\u003e rejected */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_CS2113 + STARTDATE_DESC_CS2113 + STARTTIME_DESC_CS2113"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                + ENDDATE_DESC_CS2113 + INVALID_ENDTIME_DESC + DESCRIPTION_DESC_CS2113 + CATEGORY_DESC_CS2113;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertCommandFailure(command, EndTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        /* Case: invalid description -\u003e rejected */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_CS2113 + STARTDATE_DESC_CS2113 + STARTTIME_DESC_CS2113"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                + ENDDATE_DESC_CS2113 + ENDTIME_DESC_CS2113 + INVALID_DESCRIPTION_DESC + CATEGORY_DESC_CS2113;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertCommandFailure(command, Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        /* Case: invalid categories -\u003e rejected */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_CS2113 + STARTDATE_DESC_CS2113 + STARTTIME_DESC_CS2113"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                + ENDDATE_DESC_CS2113 + ENDTIME_DESC_CS2113 + DESCRIPTION_DESC_CS2113 + INVALID_CATEGORY_DESC;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertCommandFailure(command, Categories.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_CS2113 + STARTDATE_DESC_CS2113 + STARTTIME_DESC_CS2113"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                + ENDDATE_DESC_CS2113 + ENDTIME_DESC_CS2113 + DESCRIPTION_DESC_CS2113 + CATEGORY_DESC_CS2113"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * 4. {@code Storage} and {@code TaskListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * {@code TaskBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @see TaskBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private void assertCommandSuccess(Task toAdd) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertCommandSuccess(TaskUtil.getAddCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(Task)"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private void assertCommandSuccess(String command, Task toAdd) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        expectedModel.addTask(toAdd);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Task)} except asserts that"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * 2. {@code Storage} and {@code TaskListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(String, Task)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private void assertCommandSuccess(String command) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Username username \u003d new Username(\"admin\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertCommandSuccess(TaskUtil.getLoginCommand(command), username);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(Task)"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private void assertCommandSuccess(String command, Username username) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        expectedModel.setLoggedInUser(username);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String expectedResultMessage \u003d String.format(LoginCommand.MESSAGE_SUCCESS, username);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * {@code TaskBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @see TaskBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 159,
      "-": 120
    }
  },
  {
    "path": "src/test/java/systemtests/ModelHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.day.Day;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods to set up {@code Model} for testing."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelHelper {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static final Predicate\u003cTask\u003e PREDICATE_MATCHING_NO_TASKS \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static final Predicate\u003cDay\u003e PREDICATE_MATCHING_NO_DAYS \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static void setFilteredList(Model model, List\u003cTask\u003e toDisplay) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Optional\u003cPredicate\u003cTask\u003e\u003e predicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                toDisplay.stream().map(ModelHelper::getPredicateMatching).reduce(Predicate::or);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        model.updateFilteredTaskList(predicate.orElse(PREDICATE_MATCHING_NO_TASKS));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ModelHelper#setFilteredList(Model, List)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static void setFilteredList(Model model, Task... toDisplay) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        setFilteredList(model, Arrays.asList(toDisplay));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static void setFilteredDayList(Model model, List\u003cDay\u003e toDisplay) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Optional\u003cPredicate\u003cDay\u003e\u003e predicate \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                toDisplay.stream().map(ModelHelper::getDayPredicateMatching).reduce(Predicate::or);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        model.updateFilteredDayList(predicate.orElse(PREDICATE_MATCHING_NO_DAYS));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns a predicate that evaluates to true if this {@code Task} equals to {@code other}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static Predicate\u003cTask\u003e getPredicateMatching(Task other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return task -\u003e task.equals(other);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns a predicate that evaluates to true if this {@code Day} equals to {@code other}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static Predicate\u003cDay\u003e getDayPredicateMatching(Day other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return day -\u003e day.equals(other);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 24,
      "-": 33
    }
  },
  {
    "path": "src/test/java/systemtests/SampleDataTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.TaskBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class SampleDataTest extends TaskBookSystemTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns null to force test app to load data of the file in {@code getDataFileLocation()}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    protected TaskBook getInitialData() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a non-existent file location to force test app to load sample data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFileIfExists(filePath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the file at {@code filePath} if it exists."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void deleteFileIfExists(Path filePath) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.deleteIfExists(filePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void taskBook_dataFileDoesNotExist_loadSampleData() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Task[] expectedList \u003d SampleDataUtil.getSampleTasks();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertListMatching(getTaskListPanel(), expectedList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 7,
      "-": 44
    }
  },
  {
    "path": "src/test/java/systemtests/SystemTestSetupHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.ReadOnlyTaskBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods that system tests require."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class SystemTestSetupHelper {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets up a new {@code TestApp} and returns it."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public TestApp setupApplication(Supplier\u003cReadOnlyTaskBook\u003e taskBook, Path saveFileLocation) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerStage(Stage::new);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            FxToolkit.setupApplication(() -\u003e testApp \u003d new TestApp(taskBook, saveFileLocation));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Application takes too long to set up.\", te);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes TestFX."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void initialize() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.hideStage();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Encapsulates the primary stage of {@code TestApp} in a {@code MainWindowHandle} and returns it."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle setupMainWindowHandle() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupStage((stage) -\u003e {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle \u003d new MainWindowHandle(stage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle.focus();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.showStage();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to set up.\", te);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tears down existing stages."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDownStage() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.cleanupStages();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to tear down.\", te);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 3,
      "-": 71
    }
  },
  {
    "path": "src/test/java/systemtests/TaskBookSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import guitests.guihandles.DayListPanelHandle;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import guitests.guihandles.TaskListPanelHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.TaskBook;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.testutil.TypicalTasks;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * A system test class for TaskBook, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public abstract class TaskBookSystemTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    protected TaskBook getInitialData() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return TypicalTasks.getTypicalTaskBook();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public TaskListPanelHandle getTaskListPanel() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return mainWindowHandle.getTaskListPanel();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public DayListPanelHandle getDayListPanel() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return mainWindowHandle.getDayListPanel();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Displays all tasks in the task book."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    protected void showAllTasks() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertEquals(getModel().getTaskBook().getTaskList().size(), getModel().getFilteredTaskList().size());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Displays all tasks with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    protected void showTasksWithName(String keyword) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertTrue(getModel().getFilteredTaskList().size() \u003c getModel().getTaskBook().getTaskList().size());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Deletes all tasks in the task book."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    protected void deleteAllTasks() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertEquals(0, getModel().getTaskBook().getTaskList().size());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same task objects as {@code expectedModel}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * and the task list panel displays the tasks in the model correctly."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertEquals(new TaskBook(expectedModel.getTaskBook()), testApp.readStorageTaskBook());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertListMatching(getTaskListPanel(), expectedModel.getFilteredTaskList());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Calls {@code TaskListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        getTaskListPanel().rememberSelectedTaskCard();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Asserts that the selected card in the task list panel remain unchanged."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @see TaskListPanelHandle#isSelectedTaskCardChanged()"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertFalse(getTaskListPanel().isSelectedTaskCardChanged());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertListMatching(getTaskListPanel(), getModel().getFilteredTaskList());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Paths.get(\".\").resolve(testApp.getStorageSaveLocation()).toString(),"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "                getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 33,
      "-": 204
    }
  }
]
